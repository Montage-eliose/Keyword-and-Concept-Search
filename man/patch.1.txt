PATCH(1)                    General Commands Manual                   PATCH(1)



NNAAMMEE
       patch - apply a diff file to an original

SSYYNNOOPPSSIISS
       ppaattcchh [_o_p_t_i_o_n_s] [_o_r_i_g_i_n_a_l_f_i_l_e [_p_a_t_c_h_f_i_l_e]]

       but usually just

       ppaattcchh --pp_n_u_m <<_p_a_t_c_h_f_i_l_e

DDEESSCCRRIIPPTTIIOONN
       ppaattcchh takes a patch file _p_a_t_c_h_f_i_l_e containing a difference listing pro-
       duced by the ddiiffff program and applies those differences to one or  more
       original  files, producing patched versions.  Normally the patched ver-
       sions are put in place of the originals.  Backups can be made; see  the
       --bb  or  ----bbaacckkuupp option.  The names of the files to be patched are usu-
       ally taken from the patch file, but if there's  just  one  file  to  be
       patched it can be specified on the command line as _o_r_i_g_i_n_a_l_f_i_l_e.

       Upon startup, patch attempts to determine the type of the diff listing,
       unless overruled by a --cc (----ccoonntteexxtt), --ee (----eedd), --nn (----nnoorrmmaall),  or  --uu
       (----uunniiffiieedd)  option.  Context diffs (old-style, new-style, and unified)
       and normal diffs are applied by the  ppaattcchh  program  itself,  while  eedd
       diffs are simply fed to the eedd(1) editor via a pipe.

       ppaattcchh  tries to skip any leading garbage, apply the diff, and then skip
       any trailing garbage.  Thus you could feed an article or  message  con-
       taining  a  diff  listing  to ppaattcchh, and it should work.  If the entire
       diff is indented by a consistent amount, if lines end in CRLF, or if  a
       diff  is  encapsulated  one  or  more times by prepending "-- " to lines
       starting with "--" as specified by Internet RFC 934, this is taken  into
       account.   After  removing  indenting or encapsulation, lines beginning
       with ## are ignored, as they are considered to be comments.

       With context diffs, and to a lesser extent with normal diffs, ppaattcchh can
       detect  when the line numbers mentioned in the patch are incorrect, and
       attempts to find the correct place to apply each hunk of the patch.  As
       a first guess, it takes the line number mentioned for the hunk, plus or
       minus any offset used in applying the previous hunk.  If  that  is  not
       the correct place, ppaattcchh scans both forwards and backwards for a set of
       lines matching the context given in the hunk.  First ppaattcchh looks for  a
       place where all lines of the context match.  If no such place is found,
       and it's a context diff, and the maximum fuzz factor is  set  to  1  or
       more, then another scan takes place ignoring the first and last line of
       context.  If that fails, and the maximum fuzz factor is  set  to  2  or
       more,  the  first  two  and  last two lines of context are ignored, and
       another scan is made.  (The default maximum fuzz factor is 2.)

       Hunks with less prefix context  than  suffix  context  (after  applying
       fuzz)  must  apply  at the start of the file if their first line number
       is 1.  Hunks with more prefix context than suffix context (after apply-
       ing fuzz) must apply at the end of the file.

       If ppaattcchh cannot find a place to install that hunk of the patch, it puts
       the hunk out to a reject file, which normally is the name of the output
       file  plus  a ..rreejj suffix, or ## if ..rreejj would generate a file name that
       is too long (if even appending the single character ##  makes  the  file
       name too long, then ## replaces the file name's last character).

       The  rejected hunk comes out in unified or context diff format.  If the
       input was a normal diff, many of the contexts  are  simply  null.   The
       line  numbers  on the hunks in the reject file may be different than in
       the patch file: they reflect the approximate location patch thinks  the
       failed hunks belong in the new file rather than the old one.

       As  each  hunk is completed, you are told if the hunk failed, and if so
       which line (in the new file) ppaattcchh thought the hunk should go  on.   If
       the  hunk  is installed at a different line from the line number speci-
       fied in the diff, you are told the offset.  A single large  offset  _m_a_y
       indicate  that  a  hunk was installed in the wrong place.  You are also
       told if a fuzz factor was used to make the match,  in  which  case  you
       should  also be slightly suspicious.  If the ----vveerrbboossee option is given,
       you are also told about hunks that match exactly.

       If no original file _o_r_i_g_f_i_l_e is specified on the  command  line,  ppaattcchh
       tries  to figure out from the leading garbage what the name of the file
       to edit is, using the following rules.

       First, ppaattcchh takes an ordered list of candidate file names as follows:

        ++oo If the header is that of a context diff, ppaattcchh takes the old and new
          file  names  in  the  header.  A name is ignored if it does not have
          enough slashes to satisfy the --pp_n_u_m or ----ssttrriipp==_n_u_m option.  The name
          //ddeevv//nnuullll is also ignored.

        ++oo If  there is an IInnddeexx:: line in the leading garbage and if either the
          old and new names are both absent  or  if  ppaattcchh  is  conforming  to
          POSIX, ppaattcchh takes the name in the IInnddeexx:: line.

        ++oo For the purpose of the following rules, the candidate file names are
          considered to be in the order (old, new, index), regardless  of  the
          order that they appear in the header.

       Then ppaattcchh selects a file name from the candidate list as follows:

        ++oo If  some  of  the named files exist, ppaattcchh selects the first name if
          conforming to POSIX, and the best name otherwise.

        ++oo If ppaattcchh is not ignoring RCS, ClearCase, Perforce, and SCCS (see the
          --gg _n_u_m  or  ----ggeett==_n_u_m  option), and no named files exist but an RCS,
          ClearCase, Perforce, or SCCS master  is  found,  ppaattcchh  selects  the
          first named file with an RCS, ClearCase, Perforce, or SCCS master.

        ++oo If no named files exist, no RCS, ClearCase, Perforce, or SCCS master
          was found, some names are given, ppaattcchh is not conforming  to  POSIX,
          and  the patch appears to create a file, ppaattcchh selects the best name
          requiring the creation of the fewest directories.

        ++oo If no file name results from the above heuristics, you are asked for
          the name of the file to patch, and ppaattcchh selects that name.

       To  determine  the  _b_e_s_t  of a nonempty list of file names, ppaattcchh first
       takes all the names with the fewest path name components; of those,  it
       then  takes all the names with the shortest basename; of those, it then
       takes all the shortest names; finally, it  takes  the  first  remaining
       name.

       Additionally,  if  the  leading  garbage contains a PPrreerreeqq:: line, ppaattcchh
       takes the first word from the prerequisites line  (normally  a  version
       number)  and checks the original file to see if that word can be found.
       If not, ppaattcchh asks for confirmation before proceeding.

       The upshot of all this is that you should be able to say,  while  in  a
       news interface, something like the following:

          || ppaattcchh --dd //uussrr//ssrrcc//llooccaall//bblluurrffll

       and patch a file in the bblluurrffll directory directly from the article con-
       taining the patch.

       If the patch file contains more than one patch, ppaattcchh  tries  to  apply
       each  of  them  as if they came from separate patch files.  This means,
       among other things, that it is assumed that the name  of  the  file  to
       patch  must  be  determined for each diff listing, and that the garbage
       before each diff listing contains interesting things such as file names
       and revision level, as mentioned previously.

OOPPTTIIOONNSS
       --bb  or  ----bbaacckkuupp
          Make  backup  files.   That is, when patching a file, rename or copy
          the original instead of removing it.  See the --VV  or  ----vveerrssiioonn--ccoonn--
          ttrrooll option for details about how backup file names are determined.

       ----bbaacckkuupp--iiff--mmiissmmaattcchh
          Back  up  a file if the patch does not match the file exactly and if
          backups are not otherwise requested.  This  is  the  default  unless
          ppaattcchh is conforming to POSIX.

       ----nnoo--bbaacckkuupp--iiff--mmiissmmaattcchh
          Do  not  back up a file if the patch does not match the file exactly
          and if backups are not otherwise requested.  This is the default  if
          ppaattcchh is conforming to POSIX.

       --BB _p_r_e_f  or  ----pprreeffiixx==_p_r_e_f
          Use  the  ssiimmppllee  method  to determine backup file names (see the --VV
          _m_e_t_h_o_d or ----vveerrssiioonn--ccoonnttrrooll _m_e_t_h_o_d option), and  append  _p_r_e_f  to  a
          file  name  when generating its backup file name.  For example, with
          --BB //jjuunnkk// the  simple  backup  file  name  for  ssrrcc//ppaattcchh//uuttiill..cc  is
          //jjuunnkk//ssrrcc//ppaattcchh//uuttiill..cc.

       ----bbiinnaarryy
          Write  all  files  in  binary  mode,  except for standard output and
          //ddeevv//ttttyy.  When reading, disable the heuristic for transforming CRLF
          line  endings  into LF line endings.  This option is needed on POSIX
          systems when applying patches generated on non-POSIX systems to non-
          POSIX  files.  (On POSIX systems, file reads and writes never trans-
          form line endings. On Windows, reads and writes  do  transform  line
          endings by default, and patches should be generated by ddiiffff ----bbiinnaarryy
          when line endings are significant.)

       --cc  or  ----ccoonntteexxtt
          Interpret the patch file as a ordinary context diff.

       --dd _d_i_r  or  ----ddiirreeccttoorryy==_d_i_r
          Change to the directory _d_i_r immediately, before doing anything else.

       --DD _d_e_f_i_n_e  or  ----iiffddeeff==_d_e_f_i_n_e
          Use the ##iiffddeeff ... ##eennddiiff construct to mark changes, with _d_e_f_i_n_e  as
          the differentiating symbol.

       ----ddrryy--rruunn
          Print  the results of applying the patches without actually changing
          any files.

       --ee  or  ----eedd
          Interpret the patch file as an eedd script.

       --EE  or  ----rreemmoovvee--eemmppttyy--ffiilleess
          Remove output files that are  empty  after  the  patches  have  been
          applied.  Normally this option is unnecessary, since ppaattcchh can exam-
          ine the time stamps on the header to determine whether a file should
          exist  after  patching.  However, if the input is not a context diff
          or if ppaattcchh is conforming to POSIX,  ppaattcchh  does  not  remove  empty
          patched  files  unless  this  option is given.  When ppaattcchh removes a
          file, it also attempts to remove any empty ancestor directories.

       --ff  or  ----ffoorrccee
          Assume that the user knows exactly what he or she is doing,  and  do
          not  ask any questions.  Skip patches whose headers do not say which
          file is to be patched; patch files even though they have  the  wrong
          version  for  the PPrreerreeqq:: line in the patch; and assume that patches
          are not reversed even if they look like they are.  This option  does
          not suppress commentary; use --ss for that.

       --FF _n_u_m  or  ----ffuuzzzz==_n_u_m
          Set the maximum fuzz factor.  This option only applies to diffs that
          have context, and causes ppaattcchh to ignore up to that  many  lines  of
          context in looking for places to install a hunk.  Note that a larger
          fuzz factor increases the odds of a faulty patch.  The default  fuzz
          factor  is  2.  A fuzz factor greater than or equal to the number of
          lines of context in the context diff, ordinarily 3, ignores all con-
          text.

       --gg _n_u_m  or  ----ggeett==_n_u_m
          This  option  controls  ppaattcchh's  actions when a file is under RCS or
          SCCS control, and does not exist or is  read-only  and  matches  the
          default  version, or when a file is under ClearCase or Perforce con-
          trol and does not exist.  If _n_u_m is positive, ppaattcchh gets (or  checks
          out)  the  file  from  the  revision  control system; if zero, ppaattcchh
          ignores RCS, ClearCase, Perforce, and SCCS  and  does  not  get  the
          file;  and if negative, ppaattcchh asks the user whether to get the file.
          The default value of this option  is  given  by  the  value  of  the
          PPAATTCCHH__GGEETT  environment  variable  if  it is set; if not, the default
          value is zero.

       ----hheellpp
          Print a summary of options and exit.

       --ii _p_a_t_c_h_f_i_l_e  or  ----iinnppuutt==_p_a_t_c_h_f_i_l_e
          Read the patch from _p_a_t_c_h_f_i_l_e.  If _p_a_t_c_h_f_i_l_e is --, read  from  stan-
          dard input, the default.

       --ll  or  ----iiggnnoorree--wwhhiitteessppaaccee
          Match  patterns  loosely, in case tabs or spaces have been munged in
          your files.  Any sequence of one or more blanks in  the  patch  file
          matches  any  sequence in the original file, and sequences of blanks
          at the ends of lines are  ignored.   Normal  characters  must  still
          match  exactly.  Each line of the context must still match a line in
          the original file.

       ----mmeerrggee or ----mmeerrggee==mmeerrggee or ----mmeerrggee==ddiiffff33
          Merge a patch file into the original files similar  to  ddiiffff33(1)  or
          mmeerrggee(1).   If  a  conflict  is  found,  ppaattcchh outputs a warning and
          brackets the conflict with <<<<<<<<<<<<<< and  >>>>>>>>>>>>>>  lines.   A  typical
          conflict will look like this:

              <<<<<<<<<<<<<<
              _l_i_n_e_s _f_r_o_m _t_h_e _o_r_i_g_i_n_a_l _f_i_l_e
              ||||||||||||||
              _o_r_i_g_i_n_a_l _l_i_n_e_s _f_r_o_m _t_h_e _p_a_t_c_h
              ==============
              _n_e_w _l_i_n_e_s _f_r_o_m _t_h_e _p_a_t_c_h
              >>>>>>>>>>>>>>

          The  optional  argument  of ----mmeerrggee determines the output format for
          conflicts: the diff3 format shows the |||||||||||||| section with the orig-
          inal  lines  from  the  patch;  in the merge format, this section is
          missing.  The merge format is the default.

          This option implies ----ffoorrwwaarrdd  and  does  not  take  the  ----ffuuzzzz=_n_u_m
          option into account.

       --nn  or  ----nnoorrmmaall
          Interpret the patch file as a normal diff.

       --NN  or  ----ffoorrwwaarrdd
          Ignore  patches  that  seem to be reversed or already applied. It is
          only checked if the first hunk of a patch can be reversed.  See also
          --RR.

       --oo _o_u_t_f_i_l_e  or  ----oouuttppuutt==_o_u_t_f_i_l_e
          Send  output  to _o_u_t_f_i_l_e instead of patching files in place.  Do not
          use this option if _o_u_t_f_i_l_e is one of the files to be patched.   When
          _o_u_t_f_i_l_e  is --, send output to standard output, and send any messages
          that would usually go to standard output to standard error.

       --pp_n_u_m  or  ----ssttrriipp==_n_u_m
          Strip the smallest prefix containing _n_u_m leading slashes  from  each
          file  name found in the patch file.  A sequence of one or more adja-
          cent slashes is counted as a single slash.  This controls  how  file
          names  found  in  the  patch file are treated, in case you keep your
          files in a different directory than the  person  who  sent  out  the
          patch.  For example, supposing the file name in the patch file was

             //uu//hhoowwaarrdd//ssrrcc//bblluurrffll//bblluurrffll..cc

          setting --pp00 gives the entire file name unmodified, --pp11 gives

             uu//hhoowwaarrdd//ssrrcc//bblluurrffll//bblluurrffll..cc

          without the leading slash, --pp44 gives

             bblluurrffll//bblluurrffll..cc

          and  not specifying --pp at all just gives you bblluurrffll..cc.  Whatever you
          end up with is looked for either in the current  directory,  or  the
          directory specified by the --dd option.

       ----ppoossiixx
          Conform more strictly to the POSIX standard, as follows.

           ++oo Take the first existing file from the list (old, new, index) when
             intuiting file names from diff headers.

           ++oo Do not remove files that are empty after patching.

           ++oo Do not ask whether to get files from RCS, ClearCase, Perforce, or
             SCCS.

           ++oo Require that all options precede the files in the command line.

           ++oo Do not backup files when there is a mismatch.

       ----qquuoottiinngg--ssttyyllee==_w_o_r_d
          Use style _w_o_r_d to quote output names.  The _w_o_r_d should be one of the
          following:

          lliitteerraall
                 Output names as-is.

          sshheellll  Quote names for the shell if they contain  shell  metacharac-
                 ters or would cause ambiguous output.

          sshheellll--aallwwaayyss
                 Quote  names  for  the shell, even if they would normally not
                 require quoting.

          cc      Quote names as for a C language string.

          eessccaappee Quote as with cc  except  omit  the  surrounding  double-quote
                 characters.

          You can specify the default value of the ----qquuoottiinngg--ssttyyllee option with
          the environment variable QQUUOOTTIINNGG__SSTTYYLLEE.  If that  environment  vari-
          able is not set, the default value is sshheellll.

       --rr _r_e_j_e_c_t_f_i_l_e  or  ----rreejjeecctt--ffiillee==_r_e_j_e_c_t_f_i_l_e
          Put  rejects into _r_e_j_e_c_t_f_i_l_e instead of the default ..rreejj file.  When
          _r_e_j_e_c_t_f_i_l_e is --, discard rejects.

       --RR  or  ----rreevveerrssee
          Assume that this patch was  created  with  the  old  and  new  files
          swapped.   (Yes,  I'm  afraid  that  does happen occasionally, human
          nature being what it is.)  ppaattcchh attempts to swap each  hunk  around
          before applying it.  Rejects come out in the swapped format.  The --RR
          option does not work with eedd diff scripts because there is too  lit-
          tle information to reconstruct the reverse operation.

          If  the  first hunk of a patch fails, ppaattcchh reverses the hunk to see
          if it can be applied that way.  If it can, you are asked if you want
          to  have  the --RR option set.  If it can't, the patch continues to be
          applied normally.  (Note: this method cannot detect a reversed patch
          if  it  is a normal diff and if the first command is an append (i.e.
          it should have been a delete) since appends always succeed,  due  to
          the  fact  that  a  null  context  matches  anywhere.  Luckily, most
          patches add or  change  lines  rather  than  delete  them,  so  most
          reversed  normal  diffs begin with a delete, which fails, triggering
          the heuristic.)

       ----rreeaadd--oonnllyy==_b_e_h_a_v_i_o_r
          Behave as requested when trying to modify a read-only  file:  iiggnnoorree
          the potential problem, wwaarrnn about it (the default), or ffaaiill.

       ----rreejjeecctt--ffoorrmmaatt==_f_o_r_m_a_t
          Produce reject files in the specified _f_o_r_m_a_t (either ccoonntteexxtt or uunnii--
          ffiieedd).  Without this option, rejected hunks come out in unified diff
          format  if the input patch was of that format, otherwise in ordinary
          context diff form.

       --ss  or  ----ssiilleenntt  or  ----qquuiieett
          Work silently, unless an error occurs.

       ----ffoollllooww--ssyymmlliinnkkss
          When looking for input files, follow symbolic links.   Replaces  the
          symbolic  links,  instead  of modifying the files the symbolic links
          point to.  Git-style patches to symbolic links will no longer apply.
          This  option  exists  for backwards compatibility with previous ver-
          sions of patch; its use is discouraged.

       --tt  or  ----bbaattcchh
          Suppress questions like --ff, but  make  some  different  assumptions:
          skip  patches  whose  headers do not contain file names (the same as
          --ff); skip patches for which the file has the wrong version  for  the
          PPrreerreeqq::  line  in the patch; and assume that patches are reversed if
          they look like they are.

       --TT  or  ----sseett--ttiimmee
          Set the modification and access times of  patched  files  from  time
          stamps  given in context diff headers.  Unless specified in the time
          stamps, assume that the context diff headers use local time.

          Use of this option with time stamps that do not include  time  zones
          is  not  recommended, because patches using local time cannot easily
          be used by people in other time zones, and because local time stamps
          are  ambiguous when local clocks move backwards during daylight-sav-
          ing time adjustments.  Make  sure  that  time  stamps  include  time
          zones,  or  generate  patches  with  UTC and use the --ZZ or ----sseett--uuttcc
          option instead.

       --uu  or  ----uunniiffiieedd
          Interpret the patch file as a unified context diff.

       --vv  or  ----vveerrssiioonn
          Print out ppaattcchh's revision header and patch level, and exit.

       --VV _m_e_t_h_o_d  or  ----vveerrssiioonn--ccoonnttrrooll==_m_e_t_h_o_d
          Use _m_e_t_h_o_d to determine backup file names.  The method can  also  be
          given  by the PPAATTCCHH__VVEERRSSIIOONN__CCOONNTTRROOLL (or, if that's not set, the VVEERR--
          SSIIOONN__CCOONNTTRROOLL) environment variable,  which  is  overridden  by  this
          option.   The  method does not affect whether backup files are made;
          it affects only the names of any backup files that are made.

          The value of _m_e_t_h_o_d is like the GNU  Emacs  `version-control'  vari-
          able; ppaattcchh also recognizes synonyms that are more descriptive.  The
          valid values for _m_e_t_h_o_d are (unique abbreviations are accepted):

          eexxiissttiinngg  or  nniill
             Make numbered backups of files that already have them,  otherwise
             simple backups.  This is the default.

          nnuummbbeerreedd  or  tt
             Make  numbered  backups.   The numbered backup file name for _F is
             _F..~~_N~~ where _N is the version number.

          ssiimmppllee  or  nneevveerr
             Make simple backups.  The --BB or ----pprreeffiixx, --YY  or  ----bbaasseennaammee--pprree--
             ffiixx,  and  --zz  or ----ssuuffffiixx options specify the simple backup file
             name.  If none of these options are given, then a  simple  backup
             suffix is used; it is the value of the SSIIMMPPLLEE__BBAACCKKUUPP__SSUUFFFFIIXX envi-
             ronment variable if set, and is ..oorriigg otherwise.

          With numbered or simple backups, if the  backup  file  name  is  too
          long, the backup suffix ~~ is used instead; if even appending ~~ would
          make the name too long, then ~~ replaces the last  character  of  the
          file name.

       ----vveerrbboossee
          Output extra information about the work being done.

       --xx _n_u_m  or  ----ddeebbuugg==_n_u_m
          Set internal debugging flags of interest only to ppaattcchh patchers.

       --YY _p_r_e_f  or  ----bbaasseennaammee--pprreeffiixx==_p_r_e_f
          Use  the  ssiimmppllee  method  to determine backup file names (see the --VV
          _m_e_t_h_o_d or ----vveerrssiioonn--ccoonnttrrooll _m_e_t_h_o_d option), and prefix _p_r_e_f  to  the
          basename  of  a file name when generating its backup file name.  For
          example,  with  --YY ..ddeell//   the   simple   backup   file   name   for
          ssrrcc//ppaattcchh//uuttiill..cc is ssrrcc//ppaattcchh//..ddeell//uuttiill..cc.

       --zz _s_u_f_f_i_x  or  ----ssuuffffiixx==_s_u_f_f_i_x
          Use  the  ssiimmppllee  method  to determine backup file names (see the --VV
          _m_e_t_h_o_d or ----vveerrssiioonn--ccoonnttrrooll _m_e_t_h_o_d option), and use  _s_u_f_f_i_x  as  the
          suffix.    For   example,   with  --zz --  the  backup  file  name  for
          ssrrcc//ppaattcchh//uuttiill..cc is ssrrcc//ppaattcchh//uuttiill..cc--.

       --ZZ  or  ----sseett--uuttcc
          Set the modification and access times of  patched  files  from  time
          stamps  given  in context diff headers. Unless specified in the time
          stamps, assume that the context diff headers use Coordinated Univer-
          sal  Time  (UTC, often known as GMT).  Also see the --TT or ----sseett--ttiimmee
          option.

          The --ZZ or ----sseett--uuttcc and --TT or ----sseett--ttiimmee  options  normally  refrain
          from  setting  a  file's  time  if the file's original time does not
          match the time given in the patch header, or if its contents do  not
          match  the  patch  exactly.  However, if the --ff or ----ffoorrccee option is
          given, the file time is set regardless.

          Due to the limitations of ddiiffff output format, these  options  cannot
          update the times of files whose contents have not changed.  Also, if
          you use these options, you should remove (e.g. with mmaakkee cclleeaann)  all
          files that depend on the patched files, so that later invocations of
          mmaakkee do not get confused by the patched files' times.

EENNVVIIRROONNMMEENNTT
       PPAATTCCHH__GGEETT
          This specifies whether ppaattcchh gets missing or  read-only  files  from
          RCS,  ClearCase,  Perforce,  or SCCS by default; see the --gg or ----ggeett
          option.

       PPOOSSIIXXLLYY__CCOORRRREECCTT
          If set, ppaattcchh conforms  more  strictly  to  the  POSIX  standard  by
          default: see the ----ppoossiixx option.

       QQUUOOTTIINNGG__SSTTYYLLEE
          Default value of the ----qquuoottiinngg--ssttyyllee option.

       SSIIMMPPLLEE__BBAACCKKUUPP__SSUUFFFFIIXX
          Extension to use for simple backup file names instead of ..oorriigg.

       TTMMPPDDIIRR, TTMMPP, TTEEMMPP
          Directory  to  put temporary files in; ppaattcchh uses the first environ-
          ment variable in this list that  is  set.   If  none  are  set,  the
          default is system-dependent; it is normally //ttmmpp on Unix hosts.

       VVEERRSSIIOONN__CCOONNTTRROOLL or PPAATTCCHH__VVEERRSSIIOONN__CCOONNTTRROOLL
          Selects  version  control  style;  see  the  --vv or ----vveerrssiioonn--ccoonnttrrooll
          option.

FFIILLEESS
       _$_T_M_P_D_I_R//pp**
          temporary files

       //ddeevv//ttttyy
          controlling terminal; used to get answers to questions asked of  the
          user

SSEEEE AALLSSOO
       ddiiffff(1), eedd(1), mmeerrggee(1).

       Marshall  T. Rose and Einar A. Stefferud, Proposed Standard for Message
       Encapsulation,    Internet    RFC    934     <URL:ftp://ftp.isi.edu/in-
       notes/rfc934.txt> (1985-01).

NNOOTTEESS FFOORR PPAATTCCHH SSEENNDDEERRSS
       There are several things you should bear in mind if you are going to be
       sending out patches.

       Create your  patch  systematically.   A  good  method  is  the  command
       ddiiffff --NNaauurr _o_l_d _n_e_w  where _o_l_d and _n_e_w identify the old and new directo-
       ries.  The names _o_l_d and _n_e_w should not contain any slashes.  The  ddiiffff
       command's  headers  should have dates and times in Universal Time using
       traditional Unix format, so that patch recipients can  use  the  --ZZ  or
       ----sseett--uuttcc  option.  Here is an example command, using Bourne shell syn-
       tax:

          LLCC__AALLLL==CC TTZZ==UUTTCC00 ddiiffff --NNaauurr ggcccc--22..77 ggcccc--22..88

       Tell your recipients how to apply  the  patch  by  telling  them  which
       directory  to ccdd to, and which ppaattcchh options to use.  The option string
       --NNpp11 is recommended.  Test your procedure by pretending to be a recipi-
       ent and applying your patch to a copy of the original files.

       You can save people a lot of grief by keeping a ppaattcchhlleevveell..hh file which
       is patched to increment the patch level as the first diff in the  patch
       file  you  send  out.   If you put a PPrreerreeqq:: line in with the patch, it
       won't let them apply patches out of order without some warning.

       You can create a file by sending out a diff that compares //ddeevv//nnuullll  or
       an empty file dated the Epoch (1970-01-01 00:00:00 UTC) to the file you
       want to create.  This only works if the file you want to create doesn't
       exist  already  in  the target directory.  Conversely, you can remove a
       file by sending out a context diff that compares the file to be deleted
       with  an  empty  file dated the Epoch.  The file will be removed unless
       ppaattcchh is conforming to POSIX and the --EE or ----rreemmoovvee--eemmppttyy--ffiilleess  option
       is  not  given.  An easy way to generate patches that create and remove
       files is to use GNU ddiiffff's --NN or ----nneeww--ffiillee option.

       If the recipient is supposed to use the --pp_N option, do not send  output
       that looks like this:

          ddiiffff --NNaauurr vv22..00..2299//pprroogg//RREEAADDMMEE pprroogg//RREEAADDMMEE
          ------ vv22..00..2299//pprroogg//RREEAADDMMEE   MMoonn MMaarr 1100 1155::1133::1122 11999977
          ++++++ pprroogg//RREEAADDMMEE   MMoonn MMaarr 1177 1144::5588::2222 11999977

       because  the two file names have different numbers of slashes, and dif-
       ferent versions of ppaattcchh interpret  the  file  names  differently.   To
       avoid confusion, send output that looks like this instead:

          ddiiffff --NNaauurr vv22..00..2299//pprroogg//RREEAADDMMEE vv22..00..3300//pprroogg//RREEAADDMMEE
          ------ vv22..00..2299//pprroogg//RREEAADDMMEE   MMoonn MMaarr 1100 1155::1133::1122 11999977
          ++++++ vv22..00..3300//pprroogg//RREEAADDMMEE   MMoonn MMaarr 1177 1144::5588::2222 11999977


       Avoid  sending patches that compare backup file names like RREEAADDMMEE..oorriigg,
       since this might confuse ppaattcchh into patching a backup file  instead  of
       the  real  file.  Instead, send patches that compare the same base file
       names in different directories, e.g. oolldd//RREEAADDMMEE and nneeww//RREEAADDMMEE.

       Take care not to send out reversed patches, since it makes people  won-
       der whether they already applied the patch.

       Try  not to have your patch modify derived files (e.g. the file ccoonnffiigg--
       uurree where there is a line ccoonnffiigguurree:: ccoonnffiigguurree..iinn  in  your  makefile),
       since the recipient should be able to regenerate the derived files any-
       way.  If you must send diffs of derived files, generate the diffs using
       UTC,  have  the  recipients  apply  the  patch with the --ZZ or ----sseett--uuttcc
       option, and have them remove any unpatched files that depend on patched
       files (e.g. with mmaakkee cclleeaann).

       While  you  may be able to get away with putting 582 diff listings into
       one file, it may be wiser to group related patches into separate  files
       in case something goes haywire.

DDIIAAGGNNOOSSTTIICCSS
       Diagnostics  generally  indicate  that  ppaattcchh couldn't parse your patch
       file.

       If the ----vveerrbboossee option is given, the  message  HHmmmm......  indicates  that
       there  is unprocessed text in the patch file and that ppaattcchh is attempt-
       ing to intuit whether there is a patch in that text and,  if  so,  what
       kind of patch it is.

       ppaattcchh's  exit  status  is 0 if all hunks are applied successfully, 1 if
       some hunks cannot be applied or there were merge conflicts,  and  2  if
       there  is  more  serious  trouble.  When applying a set of patches in a
       loop it behooves you to check this exit status so  you  don't  apply  a
       later patch to a partially patched file.

CCAAVVEEAATTSS
       Context  diffs  cannot  reliably  represent the creation or deletion of
       empty files, empty directories,  or  special  files  such  as  symbolic
       links.  Nor can they represent changes to file metadata like ownership,
       permissions, or whether one file is a hard link to another.  If changes
       like  these  are  also  required,  separate  instructions (e.g. a shell
       script) to accomplish them should accompany the patch.

       ppaattcchh cannot tell if the line numbers are off in an eedd script, and  can
       detect bad line numbers in a normal diff only when it finds a change or
       deletion.  A context diff using fuzz factor 3 may have the  same  prob-
       lem.   You  should  probably do a context diff in these cases to see if
       the changes made sense.  Of  course,  compiling  without  errors  is  a
       pretty good indication that the patch worked, but not always.

       ppaattcchh  usually  produces  the correct results, even when it has to do a
       lot of guessing.  However, the results are  guaranteed  to  be  correct
       only  when the patch is applied to exactly the same version of the file
       that the patch was generated from.

CCOOMMPPAATTIIBBIILLIITTYY IISSSSUUEESS
       The POSIX standard specifies behavior that differs from ppaattcchh's  tradi-
       tional  behavior.  You should be aware of these differences if you must
       interoperate with ppaattcchh versions 2.1 and earlier, which do not  conform
       to POSIX.

        ++oo In  traditional  ppaattcchh,  the --pp option's operand was optional, and a
          bare --pp was equivalent to --pp00..  The --pp option now requires an  oper-
          and,  and --pp 00 is now equivalent to --pp00.  For maximum compatibility,
          use options like --pp00 and --pp11.

          Also, traditional ppaattcchh simply counted slashes when  stripping  path
          prefixes; ppaattcchh now counts pathname components.  That is, a sequence
          of one or more adjacent slashes now counts as a single  slash.   For
          maximum  portability,  avoid  sending  patches containing //// in file
          names.

        ++oo In traditional ppaattcchh, backups were enabled by default.  This  behav-
          ior is now enabled with the --bb or ----bbaacckkuupp option.

          Conversely,  in POSIX ppaattcchh, backups are never made, even when there
          is a mismatch.  In GNU ppaattcchh, this  behavior  is  enabled  with  the
          ----nnoo--bbaacckkuupp--iiff--mmiissmmaattcchh  option,  or by conforming to POSIX with the
          ----ppoossiixx option or by setting the PPOOSSIIXXLLYY__CCOORRRREECCTT  environment  vari-
          able.

          The  --bb _s_u_f_f_i_x  option  of  traditional  ppaattcchh  is equivalent to the
          --bb --zz _s_u_f_f_i_x options of GNU ppaattcchh.

        ++oo Traditional ppaattcchh used a complicated (and  incompletely  documented)
          method  to  intuit the name of the file to be patched from the patch
          header.  This method did  not  conform  to  POSIX,  and  had  a  few
          gotchas.   Now ppaattcchh uses a different, equally complicated (but bet-
          ter documented) method that is optionally POSIX-conforming; we  hope
          it  has  fewer  gotchas.  The two methods are compatible if the file
          names in the context diff header and the IInnddeexx:: line are all identi-
          cal  after  prefix-stripping.   Your patch is normally compatible if
          each header's file names all contain the same number of slashes.

        ++oo When traditional ppaattcchh asked the user a question, it sent the  ques-
          tion  to standard error and looked for an answer from the first file
          in the following list that was a terminal: standard error,  standard
          output,  //ddeevv//ttttyy, and standard input.  Now ppaattcchh sends questions to
          standard output and gets answers from //ddeevv//ttttyy.  Defaults  for  some
          answers  have been changed so that ppaattcchh never goes into an infinite
          loop when using default answers.

        ++oo Traditional ppaattcchh exited with a status value that counted the number
          of bad hunks, or with status 1 if there was real trouble.  Now ppaattcchh
          exits with status 1 if some hunks failed, or with  2  if  there  was
          real trouble.

        ++oo Limit  yourself  to  the following options when sending instructions
          meant to be executed by anyone running GNU ppaattcchh, traditional ppaattcchh,
          or  a  ppaattcchh  that conforms to POSIX.  Spaces are significant in the
          following list, and operands are required.

             --cc
             --dd _d_i_r
             --DD _d_e_f_i_n_e
             --ee
             --ll
             --nn
             --NN
             --oo _o_u_t_f_i_l_e
             --pp_n_u_m
             --RR
             --rr _r_e_j_e_c_t_f_i_l_e

BBUUGGSS
       Please report bugs via email to <<bbuugg--ppaattcchh@@ggnnuu..oorrgg>>.

       If code has been duplicated (for instance with ##iiffddeeff OOLLDDCCOODDEE ... ##eellssee
       ......  ##eennddiiff),  ppaattcchh is incapable of patching both versions, and, if it
       works at all, will likely patch the wrong one, and  tell  you  that  it
       succeeded to boot.

       If  you  apply  a  patch  you've  already applied, ppaattcchh thinks it is a
       reversed patch, and offers to un-apply the patch.  This could  be  con-
       strued as a feature.

       Computing  how  to  merge a hunk is significantly harder than using the
       standard fuzzy algorithm.  Bigger hunks, more context, a bigger  offset
       from  the  original  location, and a worse match all slow the algorithm
       down.

CCOOPPYYIINNGG
       Copyright (C) 1984, 1985, 1986, 1988 Larry Wall.
       Copyright (C) 1989, 1990, 1991, 1992, 1993,  1994,  1995,  1996,  1997,
       1998, 1999, 2000, 2001, 2002, 2009 Free Software Foundation, Inc.

       Permission  is  granted  to make and distribute verbatim copies of this
       manual provided the copyright notice and  this  permission  notice  are
       preserved on all copies.

       Permission  is granted to copy and distribute modified versions of this
       manual under the conditions for verbatim  copying,  provided  that  the
       entire  resulting derived work is distributed under the terms of a per-
       mission notice identical to this one.

       Permission is granted to copy and distribute translations of this  man-
       ual into another language, under the above conditions for modified ver-
       sions, except that this permission notice may be included  in  transla-
       tions approved by the copyright holders instead of in the original Eng-
       lish.

AAUUTTHHOORRSS
       Larry Wall wrote the original version of ppaattcchh.   Paul  Eggert  removed
       ppaattcchh's  arbitrary limits; added support for binary files, setting file
       times, and deleting files; and made it conform better to POSIX.   Other
       contributors  include  Wayne  Davison,  who  added unidiff support, and
       David MacKenzie, who added configuration and backup  support.   Andreas
       Grnbacher added support for merging.



GNU                               2012-09-28                          PATCH(1)
