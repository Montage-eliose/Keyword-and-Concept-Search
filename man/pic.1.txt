PIC(1)                      General Commands Manual                     PIC(1)



NNAAMMEE
       pic - compile pictures for troff or TeX

SSYYNNOOPPSSIISS
       ppiicc [ --nnvvCCSSUU ] [ _f_i_l_e_n_a_m_e ... ]
       ppiicc --tt [ --ccvvzzCCSSUU ] [ _f_i_l_e_n_a_m_e ... ]

DDEESSCCRRIIPPTTIIOONN
       This manual page describes the GNU version of ppiicc, which is part of the
       groff document formatting system.  ppiicc compiles  descriptions  of  pic-
       tures  embedded  within ttrrooffff or TeX input files into commands that are
       understood by TeX or ttrrooffff.  Each picture starts with a line  beginning
       with  ..PPSS and ends with a line beginning with ..PPEE.  Anything outside of
       ..PPSS and ..PPEE is passed through without change.

       It is the user's responsibility to provide appropriate  definitions  of
       the  PPSS and PPEE macros.  When the macro package being used does not sup-
       ply such definitions (for example, old versions  of  -ms),  appropriate
       definitions can be obtained with --mmppiicc: These will center each picture.

OOPPTTIIOONNSS
       Options  that  do  not take arguments may be grouped behind a single --.
       The special option ---- can be used to mark the end of  the  options.   A
       filename of -- refers to the standard input.

       --CC     Recognize  ..PPSS  and  ..PPEE even when followed by a character other
              than space or newline.

       --SS     Safer mode; do not execute sshh commands.  This can be useful when
              operating on untrustworthy input.  (enabled by default)

       --UU     Unsafe mode; revert the default option --SS.

       --nn     Don't  use  the  groff extensions to the troff drawing commands.
              You should use this  if  you  are  using  a  postprocessor  that
              doesn't  support these extensions.  The extensions are described
              in ggrrooffff__oouutt(5).  The --nn option also causes ppiicc not to use zero-
              length lines to draw dots in troff mode.

       --tt     TeX mode.

       --cc     Be more compatible with ttppiicc.  Implies --tt.  Lines beginning with
              \\ are not passed through transparently.  Lines beginning with  ..
              are  passed  through  with  the initial ..  changed to \\.  A line
              beginning with ..ppss is  given  special  treatment:  it  takes  an
              optional  integer  argument  specifying  the line thickness (pen
              size) in milliinches; a missing argument restores  the  previous
              line  thickness;  the  default  line thickness is 8 milliinches.
              The line thickness thus specified takes effect only when a  non-
              negative  line  thickness  has  not been specified by use of the
              tthhiicckknneessss attribute or by setting the lliinneetthhiicckk variable.

       --vv     Print the version number.

       --zz     In TeX mode draw dots using zero-length lines.

       The following options supported by other versions of ppiicc are ignored:

       --DD     Draw all lines using the \D escape sequence.   ppiicc  always  does
              this.

       --TT _d_e_v Generate  output  for the ttrrooffff device _d_e_v.  This is unnecessary
              because the ttrrooffff output generated by ppiicc is device-independent.

UUSSAAGGEE
       This section describes only the differences between  GNU  ppiicc  and  the
       original version of ppiicc.  Many of these differences also apply to newer
       versions of Unix ppiicc.  A complete documentation  is  available  in  the
       file

              //uussrr//sshhaarree//ddoocc//ggrrooffff--bbaassee//ppiicc..mmss..ggzz

   TTeeXX mmooddee
       TeX  mode  is enabled by the --tt option.  In TeX mode, ppiicc will define a
       vbox called \\ggrraapphh for each picture.  Use the ffiiggnnaammee command to change
       the  name  of  the  vbox.  You must yourself print that vbox using, for
       example, the command

              \\cceenntteerrlliinnee{{\\bbooxx\\ggrraapphh}}

       Actually, since the vbox has a height  of  zero  (it  is  defined  with
       \vtop) this will produce slightly more vertical space above the picture
       than below it;

              \\cceenntteerrlliinnee{{\\rraaiissee 11eemm\\bbooxx\\ggrraapphh}}

       would avoid this.

       To make the vbox having a positive height and a depth of zero (as  used
       e.g. by LaTeX's ggrraapphhiiccss..ssttyy), define the following macro in your docu-
       ment:

              \\ddeeff\\ggppiiccbbooxx##11{{%%
                 \\vvbbooxx{{\\uunnvvbbooxx\\ccssnnaammee ##11\\eennddccssnnaammee\\kkeerrnn 00pptt}}}}

       Now you can simply say \\ggppiiccbbooxx{{ggrraapphh}} instead of \box\graph.

       You must use a TeX driver that supports the ttppiicc specials, version 2.

       Lines beginning with \\ are passed through transparently; a %%  is  added
       to  the  end  of the line to avoid unwanted spaces.  You can safely use
       this feature to change fonts or to change the value  of  \\bbaasseelliinneesskkiipp.
       Anything  else  may  well  produce undesirable results; use at your own
       risk.  Lines beginning with a period are not given any  special  treat-
       ment.

   CCoommmmaannddss
       ffoorr _v_a_r_i_a_b_l_e == _e_x_p_r_1 ttoo _e_x_p_r_2 [bbyy [**]_e_x_p_r_3] ddoo _X _b_o_d_y _X
              Set _v_a_r_i_a_b_l_e to _e_x_p_r_1.  While the value of _v_a_r_i_a_b_l_e is less than
              or equal to _e_x_p_r_2, do _b_o_d_y and increment _v_a_r_i_a_b_l_e by  _e_x_p_r_3;  if
              bbyy  is not given, increment _v_a_r_i_a_b_l_e by 1.  If _e_x_p_r_3 is prefixed
              by ** then _v_a_r_i_a_b_l_e will instead be  multiplied  by  _e_x_p_r_3.   The
              value  of  _e_x_p_r_3 can be negative for the additive case; _v_a_r_i_a_b_l_e
              is then tested whether it is greater than  or  equal  to  _e_x_p_r_2.
              For  the  multiplicative  case, _e_x_p_r_3 must be greater than zero.
              If the constraints aren't met, the loop isn't executed.   _X  can
              be any character not occurring in _b_o_d_y.

       iiff _e_x_p_r tthheenn _X _i_f_-_t_r_u_e _X [eellssee _Y _i_f_-_f_a_l_s_e _Y]
              Evaluate  _e_x_p_r;  if it is non-zero then do _i_f_-_t_r_u_e, otherwise do
              _i_f_-_f_a_l_s_e.  _X can be any character not occurring in  _i_f_-_t_r_u_e.   _Y
              can be any character not occurring in _i_f_-_f_a_l_s_e.

       pprriinntt _a_r_g...
              Concatenate  the  arguments and print as a line on stderr.  Each
              _a_r_g must be an expression, a position, or text.  This is  useful
              for debugging.

       ccoommmmaanndd _a_r_g...
              Concatenate  the  arguments  and  pass them through as a line to
              troff or TeX.  Each _a_r_g must be an expression,  a  position,  or
              text.   This  has a similar effect to a line beginning with .. or
              \\, but allows the values of variables to be passed through.  For
              example,

                     ..PPSS
                     xx == 1144
                     ccoommmmaanndd ""..ddss ssttrriinngg xx iiss "" xx ""..""
                     ..PPEE
                     \\**[[ssttrriinngg]]

              prints

                     xx iiss 1144..

       sshh _X _c_o_m_m_a_n_d _X
              Pass  _c_o_m_m_a_n_d  to a shell.  _X can be any character not occurring
              in _c_o_m_m_a_n_d.

       ccooppyy ""_f_i_l_e_n_a_m_e""
              Include _f_i_l_e_n_a_m_e at this point in the file.

       ccooppyy [""_f_i_l_e_n_a_m_e""] tthhrruu _X _b_o_d_y _X [uunnttiill ""_w_o_r_d""]
       ccooppyy [""_f_i_l_e_n_a_m_e""] tthhrruu _m_a_c_r_o [uunnttiill ""_w_o_r_d""]
              This construct does _b_o_d_y once for each  line  of  _f_i_l_e_n_a_m_e;  the
              line  is split into blank-delimited words, and occurrences of $$_i
              in _b_o_d_y, for _i between 1 and 9, are replaced by the _i-th word of
              the  line.   If  _f_i_l_e_n_a_m_e is not given, lines are taken from the
              current input up to ..PPEE.  If an uunnttiill clause is specified, lines
              will  be read only until a line the first word of which is _w_o_r_d;
              that line will then be discarded.  _X can be  any  character  not
              occurring in _b_o_d_y.  For example,

                     ..PPSS
                     ccooppyy tthhrruu %% cciirrccllee aatt (($$11,,$$22)) %% uunnttiill ""EENNDD""
                     11 22
                     33 44
                     55 66
                     EENNDD
                     bbooxx
                     ..PPEE

              is equivalent to

                     ..PPSS
                     cciirrccllee aatt ((11,,22))
                     cciirrccllee aatt ((33,,44))
                     cciirrccllee aatt ((55,,66))
                     bbooxx
                     ..PPEE

              The  commands  to  be  performed for each line can also be taken
              from a macro defined earlier by giving the name of the macro  as
              the argument to tthhrruu.

       rreesseett
       rreesseett _v_a_r_i_a_b_l_e_1[,,] _v_a_r_i_a_b_l_e_2 _._._.
              Reset  pre-defined  variables  _v_a_r_i_a_b_l_e_1, _v_a_r_i_a_b_l_e_2 ... to their
              default values.  If no  arguments  are  given,  reset  all  pre-
              defined  variables to their default values.  Note that assigning
              a value to ssccaallee also causes all pre-defined variables that con-
              trol  dimensions  to  be reset to their default values times the
              new value of scale.

       pplloott _e_x_p_r [""_t_e_x_t""]
              This is a text object which is constructed by using  _t_e_x_t  as  a
              format  string for sprintf with an argument of _e_x_p_r.  If _t_e_x_t is
              omitted a format string of ""%%gg""  is  used.   Attributes  can  be
              specified  in the same way as for a normal text object.  Be very
              careful that you specify an appropriate format string; ppiicc  does
              only very limited checking of the string.  This is deprecated in
              favour of sspprriinnttff.

       _v_a_r_i_a_b_l_e ::== _e_x_p_r
              This is similar to == except _v_a_r_i_a_b_l_e must  already  be  defined,
              and  _e_x_p_r  will be assigned to _v_a_r_i_a_b_l_e without creating a vari-
              able local to the current block.  (By contrast,  ==  defines  the
              variable  in  the  current  block  if  it is not already defined
              there, and then changes the value in the  current  block  only.)
              For example, the following:

                     ..PPSS
                     xx == 33
                     yy == 33
                     [[
                       xx ::== 55
                       yy == 55
                     ]]
                     pprriinntt xx "" "" yy
                     ..PPEE

              prints

                     55 33

       Arguments of the form

              _X _a_n_y_t_h_i_n_g _X

       are also allowed to be of the form

              {{ _a_n_y_t_h_i_n_g }}

       In  this  case  _a_n_y_t_h_i_n_g  can  contain balanced occurrences of {{ and }}.
       Strings may contain _X or imbalanced occurrences of {{ and }}.

   EExxpprreessssiioonnss
       The syntax for expressions has been significantly extended:

       _x ^^ _y (exponentiation)
       ssiinn((_x))
       ccooss((_x))
       aattaann22((_y,, _x))
       lloogg((_x)) (base 10)
       eexxpp((_x)) (base 10, ie 10^_x)
       ssqqrrtt((_x))
       iinntt((_x))
       rraanndd(()) (return a random number between 0 and 1)
       rraanndd((_x)) (return a random number between 1 and _x; deprecated)
       ssrraanndd((_x)) (set the random number seed)
       mmaaxx((_e_1,, _e_2))
       mmiinn((_e_1,, _e_2))
       !!_e
       _e_1 &&&& _e_2
       _e_1 |||| _e_2
       _e_1 ==== _e_2
       _e_1 !!== _e_2
       _e_1 >>== _e_2
       _e_1 >> _e_2
       _e_1 <<== _e_2
       _e_1 << _e_2
       ""_s_t_r_1"" ==== ""_s_t_r_2""
       ""_s_t_r_1"" !!== ""_s_t_r_2""

       String comparison expressions must be parenthesised in some contexts to
       avoid ambiguity.

   OOtthheerr CChhaannggeess
       A  bare  expression, _e_x_p_r, is acceptable as an attribute; it is equiva-
       lent to _d_i_r _e_x_p_r, where _d_i_r is the current direction.  For example

              lliinnee 22ii

       means draw a line 2 inches long in the current direction.  The `i'  (or
       `I')  character  is  ignored;  to use another measurement unit, set the
       _s_c_a_l_e variable to an appropriate value.

       The maximum width and height of the picture are taken  from  the  vari-
       ables mmaaxxppsswwiidd and mmaaxxppsshhtt.  Initially these have values 8.5 and 11.

       Scientific notation is allowed for numbers.  For example

              xx == 55ee--22

       Text attributes can be compounded.  For example,

              ""ffoooo"" aabboovvee lljjuusstt

       is valid.

       There  is  no  limit to the depth to which blocks can be examined.  For
       example,

              [[AA:: [[BB:: [[CC:: bbooxx ]]]]]] wwiitthh ..AA..BB..CC..ssww aatt 11,,22
              cciirrccllee aatt llaasstt [[]]..AA..BB..CC

       is acceptable.

       Arcs now have compass points determined by the circle of which the  arc
       is a part.

       Circles,  ellipses,  and  arcs  can  be  dotted or dashed.  In TeX mode
       splines can be dotted or dashed also.

       Boxes can have rounded corners.  The rraadd attribute specifies the radius
       of  the quarter-circles at each corner.  If no rraadd or ddiiaamm attribute is
       given, a radius of bbooxxrraadd is used.  Initially, bbooxxrraadd has a value of 0.
       A box with rounded corners can be dotted or dashed.

       Boxes  can have slanted sides.  This effectively changes the shape of a
       box from a rectangle to an arbitrary parallelogram.  The  xxssllaanntteedd  and
       yyssllaanntteedd attributes specify the x and y offset of the box's upper right
       corner from its default position.

       The ..PPSS line can have a second argument specifying a maximum height for
       the  picture.   If  the  width  of  zero is specified the width will be
       ignored in computing the scaling factor for the picture.  Note that GNU
       ppiicc  will  always scale a picture by the same amount vertically as well
       as horizontally.  This is different from the  DWB  2.0  ppiicc  which  may
       scale a picture by a different amount vertically than horizontally if a
       height is specified.

       Each text object has an invisible box associated with it.  The  compass
       points  of  a  text  object  are  determined by this box.  The implicit
       motion associated with the object is also determined by this box.   The
       dimensions  of this box are taken from the width and height attributes;
       if the width attribute is not supplied then the width will be taken  to
       be  tteexxttwwiidd;  if  the  height attribute is not supplied then the height
       will be taken to be the number of  text  strings  associated  with  the
       object times tteexxtthhtt.  Initially tteexxttwwiidd and tteexxtthhtt have a value of 0.

       In  (almost  all)  places  where  a  quoted text string can be used, an
       expression of the form

              sspprriinnttff((""_f_o_r_m_a_t"",, _a_r_g,,...))

       can also be used; this will produce the arguments  formatted  according
       to _f_o_r_m_a_t, which should be a string as described in pprriinnttff(3) appropri-
       ate for the number of arguments supplied.

       The thickness of the lines used to draw objects is  controlled  by  the
       lliinneetthhiicckk  variable.   This  gives the thickness of lines in points.  A
       negative value means use the default thickness:  in  TeX  output  mode,
       this  means  use  a thickness of 8 milliinches; in TeX output mode with
       the --cc option, this means use  the  line  thickness  specified  by  ..ppss
       lines; in troff output mode, this means use a thickness proportional to
       the pointsize.  A zero value means draw the thinnest possible line sup-
       ported by the output device.  Initially it has a value of -1.  There is
       also a tthhiicckk[nneessss] attribute.  For example,

              cciirrccllee tthhiicckknneessss 11..55

       would draw a circle using a line with a thickness of 1.5  points.   The
       thickness  of lines is not affected by the value of the ssccaallee variable,
       nor by the width or height given in the ..PPSS line.

       Boxes (including boxes with rounded corners or slanted sides),  circles
       and  ellipses  can  be  filled by giving them an attribute of ffiillll[eedd].
       This takes an optional argument of an expression with a value between 0
       and  1; 0 will fill it with white, 1 with black, values in between with
       a proportionally gray shade.  A value greater than 1 can also be  used:
       this means fill with the shade of gray that is currently being used for
       text and lines.  Normally this will be black, but  output  devices  may
       provide  a  mechanism for changing this.  Without an argument, then the
       value of the variable ffiillllvvaall will be used.  Initially this has a value
       of  0.5.   The  invisible  attribute  does  not  affect  the filling of
       objects.  Any text associated with a filled object will be added  after
       the  object  has  been filled, so that the text will not be obscured by
       the filling.

       Three additional modifiers are available to  specify  colored  objects:
       oouuttlliinnee[dd]  sets  the  color of the outline, sshhaaddeedd the fill color, and
       ccoolloo[uu]rr[eedd] sets both.  All three keywords expect a suffix  specifying
       the color, for example

              cciirrccllee sshhaaddeedd ""ggrreeeenn"" oouuttlliinnee ""bbllaacckk""

       Currently, color support isn't available in TeX mode.  Predefined color
       names for ggrrooffff are in the device macro  files,  for  example  ppss..ttmmaacc;
       additional  colors  can  be defined with the ..ddeeffccoolloorr request (see the
       manual page of ttrrooffff(1) for more details).

       To change the name of the vbox in TeX  mode,  set  the  pseudo-variable
       ffiiggnnaammee  (which  is  actually a specially parsed command) within a pic-
       ture.  Example:

              ..PPSS
              ffiiggnnaammee == ffoooobbaarr;;
              ......
              ..PPEE

       The picture is then available in the box \\ffoooobbaarr.

       ppiicc assumes that at the beginning of a  picture  both  glyph  and  fill
       color are set to the default value.

       Arrow  heads will be drawn as solid triangles if the variable aarrrroowwhheeaadd
       is non-zero and either TeX mode is enabled or the  --nn  option  has  not
       been  given.   Initially  aarrrroowwhheeaadd  has a value of 1.  Note that solid
       arrow heads are always filled with the current outline color.

       The troff output of ppiicc is device-independent.  The --TT option is there-
       fore  redundant.   All  numbers  are taken to be in inches; numbers are
       never interpreted to be in troff machine units.

       Objects can have an aalliiggnneedd attribute.  This  will  only  work  if  the
       postprocessor  is ggrrooppss, or ggrrooppddff.  Any text associated with an object
       having the aalliiggnneedd attribute will be rotated about the  center  of  the
       object  so  that it is aligned in the direction from the start point to
       the end point of the object.  Note that this  attribute  will  have  no
       effect for objects whose start and end points are coincident.

       In places where _ntthh is allowed ``_e_x_p_r''tthh is also allowed.  Note that ''tthh
       is a single token: no space is allowed between the '' and the  tthh.   For
       example,

              ffoorr ii == 11 ttoo 44 ddoo {{
                 lliinnee ffrroomm ``ii''tthh bbooxx..nnww ttoo ``ii++11''tthh bbooxx..ssee
              }}

CCOONNVVEERRSSIIOONN
       To  obtain a stand-alone picture from a ppiicc file, enclose your ppiicc code
       with ..PPSS and ..PPEE requests; rrooffff configuration commands may be added  at
       the beginning of the file, but no rrooffff text.

       It  is  necessary  to feed this file into ggrrooffff without adding any page
       information, so you must check which ..PPSS and ..PPEE requests are  actually
       called.  For example, the mm macro package adds a page number, which is
       very annoying.  At the moment, calling standard ggrrooffff without any macro
       package  works.   Alternatively, you can define your own requests, e.g.
       to do nothing:

              ..ddee PPSS
              ....
              ..ddee PPEE
              ....

       ggrrooffff itself does not provide direct  conversion  into  other  graphics
       file  formats.  But there are lots of possibilities if you first trans-
       form your picture into PostScript(R)  format  using  the  ggrrooffff  option
       --TTppss.   Since this _p_s-file lacks BoundingBox information it is not very
       useful by itself, but it may be fed  into  other  conversion  programs,
       usually  named  ppss22_o_t_h_e_r or ppssttoo_o_t_h_e_r or the like.  Moreover, the Post-
       Script interpreter gghhoossttssccrriipptt (ggss) has  built-in  graphics  conversion
       devices that are called with the option

              ggss --ssDDEEVVIICCEE==_<_d_e_v_n_a_m_e_>

       Call

              ggss ----hheellpp

       for a list of the available devices.

       An  alternative  may be to use the --TTppddff option to convert your picture
       directly into PPDDFF format.  The MediaBox of the  file  produced  can  be
       controlled by passing a --PP--pp papersize to groff.

       As the Encapsulated PostScript File Format EEPPSS is getting more and more
       important, and the conversion wasn't regarded trivial in the  past  you
       might  be  interested  to  know  that  there is a conversion tool named
       ppss22eeppss which does the right job.  It  is  much  better  than  the  tool
       ppss22eeppssii packaged with ggss.

       For  bitmapped  graphic  formats, you should use ppssttooppnnmm; the resulting
       (intermediate) PPNNMM file can be then converted to virtually any graphics
       format using the tools of the nneettppbbmm package .

FFIILLEESS
       //uussrr//sshhaarree//ggrrooffff//11..2222..22//ttmmaacc//ppiicc..ttmmaacc
              Example definitions of the PPSS and PPEE macros.

SSEEEE AALLSSOO
       ttrrooffff(1),   ggrrooffff__oouutt(5),   tteexx(1),   ggss(1),   ppss22eeppss(1),   ppssttooppnnmm(1),
       ppss22eeppssii(1), ppnnmm(5)

       Eric S. Raymond, _M_a_k_i_n_g _P_i_c_t_u_r_e_s _W_i_t_h _G_N_U _P_I_C_.
       /usr/share/doc/groff-base/pic.ps (this file, together with  its  source
       file, pic.ms, is part of the groff documentation)

       Tpic: Pic for TeX

       Brian  W.  Kernighan,  _P_I_C _-_- _A _G_r_a_p_h_i_c_s _L_a_n_g_u_a_g_e _f_o_r _T_y_p_e_s_e_t_t_i_n_g _(_U_s_e_r
       _M_a_n_u_a_l_)_.  AT&T Bell Laboratories, Computing  Science  Technical  Report
       No. 116
       <http://cm.bell-labs.com/cm/cs/cstr/116.ps.gz> (revised May, 1991).

       ppss22eeppss is available from CTAN mirrors, e.g.
       <ftp://ftp.dante.de/tex-archive/support/ps2eps/>

       W. Richard Stevens, _T_u_r_n_i_n_g _P_I_C _I_n_t_o _H_T_M_L
       <http://www.kohala.com/start/troff/pic2html.html>

       W. Richard Stevens, _E_x_a_m_p_l_e_s _o_f _p_i_c_M_a_c_r_o_s
       <http://www.kohala.com/start/troff/pic.examples.ps>

BBUUGGSS
       Input  characters  that  are  invalid for ggrrooffff (i.e., those with ASCII
       code 0, or 013 octal, or between 015 and 037 octal, or between 0200 and
       0237 octal) are rejected even in TeX mode.

       The interpretation of ffiillllvvaall is incompatible with the pic in 10th edi-
       tion Unix, which interprets 0 as black and 1 as white.

       PostScript(R) is a registered trademark of Adobe Systems Incorporation.



Groff Version 1.22.2            22 January 2014                         PIC(1)
