DUMPKEYS(1)                 General Commands Manual                DUMPKEYS(1)



NNAAMMEE
       dumpkeys - dump keyboard translation tables

SSYYNNOOPPSSIISS
       dduummppkkeeyyss  [  --hhiillffnn --cc_c_h_a_r_s_e_t ----hheellpp ----sshhoorrtt--iinnffoo ----lloonngg--iinnffoo ----nnuummeerriicc
       ----ffuullll--ttaabbllee ----ffuunnccss--oonnllyy ----kkeeyyss--oonnllyy ----ccoommppoossee--oonnllyy  ----cchhaarrsseett==_c_h_a_r_s_e_t
       ]

DDEESSCCRRIIPPTTIIOONN
       dduummppkkeeyyss  writes,  to  the standard output, the current contents of the
       keyboard driver's  translation  tables,  in  the  format  specified  by
       kkeeyymmaappss(5).

       Using  the  various options, the format of the output can be controlled
       and also other information from the kernel and the programs dduummppkkeeyyss(1)
       and llooaaddkkeeyyss(1) can be obtained.

OOPPTTIIOONNSS
       --hh ----hheellpp
              Prints the program's version number and a short usage message to
              the program's standard error output and exits.

       --ii ----sshhoorrtt--iinnffoo
              Prints some characteristics of the kernel's keyboard driver. The
              items shown are:

              Keycode range supported by the kernel

                     This tells what values can be used after the kkeeyyccooddee key-
                     word in keytable files. See kkeeyymmaappss(5) for more  informa-
                     tion and the syntax of these files.

              Number of actions bindable to a key

                     This  tells  how  many different actions a single key can
                     output using various modifier keys. If the  value  is  16
                     for example, you can define up to 16 different actions to
                     a key combined with modifiers. When the value is 16,  the
                     kernel probably knows about four modifier keys, which you
                     can press in  different  combinations  with  the  key  to
                     access all the bound actions.

              Ranges of action codes supported by the kernel

                     This  item contains a list of action code ranges in hexa-
                     decimal notation.  These are the values that can be  used
                     in  the right hand side of a key definition, ie. the _v_v's
                     in a line

                            kkeeyyccooddee _x_x = _v_v _v_v _v_v _v_v

                     (see kkeeyymmaappss(5) for more information about the format  of
                     key  definition lines).  dduummppkkeeyyss(1) and llooaaddkkeeyyss(1) sup-
                     port a symbolic notation,  which  is  preferable  to  the
                     numeric  one, as the action codes may vary from kernel to
                     kernel while the symbolic names usually remain the  same.
                     However,  the  list  of action code ranges can be used to
                     determine, if the kernel actually supports all  the  sym-
                     bols  llooaaddkkeeyyss(1)  knows, or are there maybe some actions
                     supported by the kernel that have  no  symbolic  name  in
                     your  llooaaddkkeeyyss(1)  program.  To see this, you compare the
                     range list  with  the  action  symbol  list,  see  option
                     ----lloonngg--iinnffoo below.

              Number of function keys supported by kernel

                     This tells the number of action codes that can be used to
                     output strings of characters. These action codes are tra-
                     ditionally bound to the various function and editing keys
                     of the keyboard and are defined to send  standard  escape
                     sequences. However, you can redefine these to send common
                     command lines, email  addresses  or  whatever  you  like.
                     Especially if the number of this item is greater than the
                     number of function and editing keys in your keyboard, you
                     may  have  some "spare" action codes that you can bind to
                     AltGr-letter combinations, for example, to send some use-
                     ful strings. See llooaaddkkeeyyss(1) for more details.

              Function strings

                     You can see you current function key definitions with the
                     command

                            dduummppkkeeyyss ----ffuunnccss--oonnllyy

       --ll ----lloonngg--iinnffoo
              This option instructs dduummppkkeeyyss to print a long information list-
              ing.  The  output  is the same as with the ----sshhoorrtt--iinnffoo appended
              with the list of action symbols  supported  by  llooaaddkkeeyyss(1)  and
              dduummppkkeeyyss(1), along with the symbols' numeric values.

       --nn ----nnuummeerriicc
              This  option causes dduummppkkeeyyss to by-pass the conversion of action
              code values to symbolic notation and to print the in hexadecimal
              format instead.

       --ff ----ffuullll--ttaabbllee
              This  makes  dduummppkkeeyyss  skip  all  the short-hand heuristics (see
              kkeeyymmaappss(5)) and output the key bindings in the  canonical  form.
              First  a  keymaps line describing the currently defined modifier
              combinations is printed. Then for each key a row with  a  column
              for  each  modifier  combination is printed. For example, if the
              current keymap in use uses seven modifiers, every row will  have
              seven action code columns. This format can be useful for example
              to programs that post-process the output of dduummppkkeeyyss.

       ----ffuunnccss--oonnllyy
              When this option is given, dduummppkkeeyyss prints only the function key
              string  definitions. Normally dduummppkkeeyyss prints both the key bind-
              ings and the string definitions.

       ----kkeeyyss--oonnllyy
              When this option is given, dduummppkkeeyyss prints only  the  key  bind-
              ings.  Normally  dduummppkkeeyyss  prints  both the key bindings and the
              string definitions.

       ----ccoommppoossee--oonnllyy
              When this option is given, dduummppkkeeyyss prints only the compose  key
              combinations.   This option is available only if your kernel has
              compose key support.

       --cc_c_h_a_r_s_e_t  ----cchhaarrsseett==_c_h_a_r_s_e_t
              This instructs  dduummppkkeeyyss  to  interpret  character  code  values
              according  to the specified character set. This affects only the
              translation of character code values to  symbolic  names.  Valid
              values  for _c_h_a_r_s_e_t currently are iissoo--88885599--XX, Where X is a digit
              in 1-9.  If no _c_h_a_r_s_e_t is specified, iissoo--88885599--11  is  used  as  a
              default.    This   option   produces  an  output  line  `charset
              "iso-8859-X"', telling loadkeys how  to  interpret  the  keymap.
              (For  example,  "division"  is  0xf7  in  iso-8859-1 but 0xba in
              iso-8859-8.)

FFIILLEESS
       //uussrr//sshhaarree//kkeeyymmaappss  recommended directory for keytable files

SSEEEE AALLSSOO
       llooaaddkkeeyyss(1), kkeeyymmaappss(5)




                                  1 Sep 1993                       DUMPKEYS(1)
