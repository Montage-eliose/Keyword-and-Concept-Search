PKCHECK(1)                          pkcheck                         PKCHECK(1)



NNAAMMEE
       pkcheck - Check whether a process is authorized

SSYYNNOOPPSSIISS
       ppkkcchheecckk [----vveerrssiioonn] [----hheellpp]

       ppkkcchheecckk [----lliisstt--tteemmpp]

       ppkkcchheecckk [----rreevvookkee--tteemmpp]

       ppkkcchheecckk ----aaccttiioonn--iidd _a_c_t_i_o_n
               {----pprroocceessss { _p_i_d | _p_i_d_,_p_i_d_-_s_t_a_r_t_-_t_i_m_e | _p_i_d_,_p_i_d_-_s_t_a_r_t_-_t_i_m_e_,_u_i_d }
               | ----ssyysstteemm--bbuuss--nnaammee _b_u_s_n_a_m_e} [----aallllooww--uusseerr--iinntteerraaccttiioonn]
               [----eennaabbllee--iinntteerrnnaall--aaggeenntt] [----ddeettaaiill _k_e_y _v_a_l_u_e...]

DDEESSCCRRIIPPTTIIOONN
       ppkkcchheecckk is used to check whether a process, specified by either
       ----pprroocceessss (see below) or ----ssyysstteemm--bbuuss--nnaammee, is authorized for _a_c_t_i_o_n.
       The ----ddeettaaiill option can be used zero or more times to pass details
       about _a_c_t_i_o_n. If ----aallllooww--uusseerr--iinntteerraaccttiioonn is passed, ppkkcchheecckk blocks
       while waiting for authentication.

       The invocation ppkkcchheecckk ----lliisstt--tteemmpp will list all temporary
       authorizations for the current session and ppkkcchheecckk ----rreevvookkee--tteemmpp will
       revoke all temporary authorizations for the current session.

       This command is a simple wrapper around the PolicyKit D-Bus interface;
       see the D-Bus interface documentation for details.

RREETTUURRNN VVAALLUUEE
       If the specified process is authorized, ppkkcchheecckk exits with a return
       value of 0. If the authorization result contains any details, these are
       printed on standard output as key/value pairs using environment style
       reporting, e.g. first the key followed by a an equal sign, then the
       value followed by a newline.

           KEY1=VALUE1
           KEY2=VALUE2
           KEY3=VALUE3
           ...

       Octects that are not in [a-zA-Z0-9_] are escaped using octal codes
       prefixed with _\. For example, the UTF-8 string _f_l_,  will be printed as
       _f_\_3_0_3_\_2_7_0_l_\_5_4_\_3_4_4_\_2_7_5_\_2_4_0_\_3_4_5_\_2_4_5_\_2_7_5.

       If the specificied process is not authorized, ppkkcchheecckk exits with a
       return value of 1 and a diagnostic message is printed on standard
       error. Details are printed on standard output.

       If the specificied process is not authorized because no suitable
       authentication agent is available or if the ----aallllooww--uusseerr--iinntteerraaccttiioonn
       wasn't passed, ppkkcchheecckk exits with a return value of 2 and a diagnostic
       message is printed on standard error. Details are printed on standard
       output.

       If the specificied process is not authorized because the authentication
       dialog / request was dismissed by the user, ppkkcchheecckk exits with a return
       value of 3 and a diagnostic message is printed on standard error.
       Details are printed on standard output.

       If an error occured while checking for authorization, ppkkcchheecckk exits
       with a return value of 127 with a diagnostic message printed on
       standard error.

       If one or more of the options passed are malformed, ppkkcchheecckk exits with
       a return value of 126. If stdin is a tty, then this manual page is also
       shown.

NNOOTTEESS
       Do not use either the bare _p_i_d or _p_i_d_,_s_t_a_r_t_-_t_i_m_e syntax forms for
       ----pprroocceessss. There are race conditions in both. New code should always
       use _p_i_d_,_p_i_d_-_s_t_a_r_t_-_t_i_m_e_,_u_i_d. The value of _s_t_a_r_t_-_t_i_m_e can be determined
       by consulting e.g. the pprroocc(5) file system depending on the operating
       system. If fewer than 3 arguments are passed, ppkkcchheecckk will attempt to
       look up them up internally, but note that this may be racy.

       If your program is a daemon with e.g. a custom Unix domain socket, you
       should determine the _u_i_d parameter via operating system mechanisms such
       as PEERCRED.

AAUUTTHHEENNTTIICCAATTIIOONN AAGGEENNTT
       ppkkcchheecckk, like any other PolicyKit application, will use the
       authentication agent registered for the process in question. However,
       if no authentication agent is available, then ppkkcchheecckk can register its
       own textual authentication agent if the option ----eennaabbllee--iinntteerrnnaall--aaggeenntt
       is passed.

AAUUTTHHOORR
       Written by David Zeuthen <davidz@redhat.com> with a lot of help from
       many others.

BBUUGGSS
       Please send bug reports to either the distribution or the polkit-devel
       mailing list, see the link
       hhttttpp::////lliissttss..ffrreeeeddeesskkttoopp..oorrgg//mmaaiillmmaann//lliissttiinnffoo//ppoollkkiitt--ddeevveell on how to
       subscribe.

SSEEEE AALLSSOO
       ppoollkkiitt(8), ppkkaaccttiioonn(1), ppkkeexxeecc(1), ppkkttttyyaaggeenntt(1)



polkit                             May 2009                         PKCHECK(1)
