XZ(1)                              XZ Utils                              XZ(1)



NNAAMMEE
       xz,  unxz,  xzcat, lzma, unlzma, lzcat - Compress or decompress .xz and
       .lzma files

SSYYNNOOPPSSIISS
       xxzz [_o_p_t_i_o_n]...  [_f_i_l_e]...

       uunnxxzz is equivalent to xxzz ----ddeeccoommpprreessss.
       xxzzccaatt is equivalent to xxzz ----ddeeccoommpprreessss ----ssttddoouutt.
       llzzmmaa is equivalent to xxzz ----ffoorrmmaatt==llzzmmaa.
       uunnllzzmmaa is equivalent to xxzz ----ffoorrmmaatt==llzzmmaa ----ddeeccoommpprreessss.
       llzzccaatt is equivalent to xxzz ----ffoorrmmaatt==llzzmmaa ----ddeeccoommpprreessss ----ssttddoouutt.

       When writing scripts that need to decompress files, it  is  recommended
       to  always use the name xxzz with appropriate arguments (xxzz --dd or xxzz --ddcc)
       instead of the names uunnxxzz and xxzzccaatt.

DDEESSCCRRIIPPTTIIOONN
       xxzz is a general-purpose data compression tool with command line  syntax
       similar  to  ggzziipp(1)  and  bbzziipp22(1).  The native file format is the ..xxzz
       format, but the legacy ..llzzmmaa format used by LZMA  Utils  and  raw  com-
       pressed streams with no container format headers are also supported.

       xxzz compresses or decompresses each _f_i_l_e according to the selected oper-
       ation mode.  If no _f_i_l_e_s are given or _f_i_l_e is --, xxzz reads from standard
       input and writes the processed data to standard output.  xxzz will refuse
       (display an error and skip the _f_i_l_e) to write compressed data to  stan-
       dard  output  if  it  is a terminal.  Similarly, xxzz will refuse to read
       compressed data from standard input if it is a terminal.

       Unless ----ssttddoouutt is specified, _f_i_l_e_s other than -- are written to  a  new
       file whose name is derived from the source _f_i_l_e name:

       +o  When  compressing,  the  suffix  of  the  target file format (..xxzz or
          ..llzzmmaa) is appended to the source filename to get  the  target  file-
          name.

       +o  When  decompressing,  the  ..xxzz  or  ..llzzmmaa suffix is removed from the
          filename to get the target filename.  xxzz also  recognizes  the  suf-
          fixes ..ttxxzz and ..ttllzz, and replaces them with the ..ttaarr suffix.

       If  the  target file already exists, an error is displayed and the _f_i_l_e
       is skipped.

       Unless writing to standard output, xxzz will display a warning  and  skip
       the _f_i_l_e if any of the following applies:

       +o  _F_i_l_e  is  not  a regular file.  Symbolic links are not followed, and
          thus they are not considered to be regular files.

       +o  _F_i_l_e has more than one hard link.

       +o  _F_i_l_e has setuid, setgid, or sticky bit set.

       +o  The operation mode is set to compress and the  _f_i_l_e  already  has  a
          suffix  of  the  target file format (..xxzz or ..ttxxzz when compressing to
          the ..xxzz format, and ..llzzmmaa or ..ttllzz when compressing to the ..llzzmmaa for-
          mat).

       +o  The  operation mode is set to decompress and the _f_i_l_e doesn't have a
          suffix of any of the supported file formats (..xxzz,  ..ttxxzz,  ..llzzmmaa,  or
          ..ttllzz).

       After successfully compressing or decompressing the _f_i_l_e, xxzz copies the
       owner, group, permissions, access time, and modification time from  the
       source  _f_i_l_e  to the target file.  If copying the group fails, the per-
       missions are modified so that the target file doesn't become accessible
       to  users  who  didn't  have  permission to access the source _f_i_l_e.  xxzz
       doesn't support copying other metadata like  access  control  lists  or
       extended attributes yet.

       Once  the  target file has been successfully closed, the source _f_i_l_e is
       removed unless ----kkeeeepp was specified.  The source _f_i_l_e is never  removed
       if the output is written to standard output.

       Sending  SSIIGGIINNFFOO  or  SSIIGGUUSSRR11 to the xxzz process makes it print progress
       information to standard error.  This has only limited  use  since  when
       standard error is a terminal, using ----vveerrbboossee will display an automati-
       cally updating progress indicator.

   MMeemmoorryy uussaaggee
       The memory usage of xxzz varies from a few hundred kilobytes  to  several
       gigabytes  depending  on  the  compression settings.  The settings used
       when compressing a file determine the memory requirements of the decom-
       pressor.  Typically the decompressor needs 5 % to 20 % of the amount of
       memory that the compressor needed when creating the file.  For example,
       decompressing  a  file  created with xxzz --99 currently requires 65 MiB of
       memory.  Still, it is possible to have ..xxzz files that  require  several
       gigabytes of memory to decompress.

       Especially  users  of  older  systems  may find the possibility of very
       large memory usage annoying.  To prevent  uncomfortable  surprises,  xxzz
       has  a  built-in  memory  usage  limiter, which is disabled by default.
       While some operating systems provide ways to limit the memory usage  of
       processes,  relying  on  it  wasn't  deemed to be flexible enough (e.g.
       using uulliimmiitt(1) to limit virtual memory tends to cripple mmmmaapp(2)).

       The memory usage limiter can be enabled with the  command  line  option
       ----mmeemmlliimmiitt==_l_i_m_i_t.  Often it is more convenient to enable the limiter by
       default  by  setting  the  environment   variable   XXZZ__DDEEFFAAUULLTTSS,   e.g.
       XXZZ__DDEEFFAAUULLTTSS==----mmeemmlliimmiitt==115500MMiiBB.   It is possible to set the limits sepa-
       rately for  compression  and  decompression  by  using  ----mmeemmlliimmiitt--ccoomm--
       pprreessss==_l_i_m_i_t  and  ----mmeemmlliimmiitt--ddeeccoommpprreessss==_l_i_m_i_t.  Using these two options
       outside XXZZ__DDEEFFAAUULLTTSS is rarely useful because a single run of xxzz  cannot
       do  both  compression  and  decompression  and  ----mmeemmlliimmiitt==_l_i_m_i_t (or --MM
       _l_i_m_i_t) is shorter to type on the command line.

       If the specified memory usage limit is exceeded when decompressing,  xxzz
       will  display  an  error  and decompressing the file will fail.  If the
       limit is exceeded when compressing, xxzz will try to scale  the  settings
       down  so that the limit is no longer exceeded (except when using ----ffoorr--
       mmaatt==rraaww or ----nnoo--aaddjjuusstt).  This way the operation won't fail unless  the
       limit is very small.  The scaling of the settings is done in steps that
       don't match the compression level presets, e.g. if the  limit  is  only
       slightly  less than the amount required for xxzz --99, the settings will be
       scaled down only a little, not all the way down to xxzz --88.

   CCoonnccaatteennaattiioonn aanndd ppaaddddiinngg wwiitthh ..xxzz ffiilleess
       It is possible to concatenate ..xxzz files as is.  xxzz will decompress such
       files as if they were a single ..xxzz file.

       It  is  possible  to  insert  padding between the concatenated parts or
       after the last part.  The padding must consist of null  bytes  and  the
       size of the padding must be a multiple of four bytes.  This can be use-
       ful e.g. if the ..xxzz file is stored on a medium that measures file sizes
       in 512-byte blocks.

       Concatenation  and  padding  are  not  allowed  with ..llzzmmaa files or raw
       streams.

OOPPTTIIOONNSS
   IInntteeggeerr ssuuffffiixxeess aanndd ssppeecciiaall vvaalluueess
       In most places where an integer argument is expected, an optional  suf-
       fix  is  supported to easily indicate large integers.  There must be no
       space between the integer and the suffix.

       KKiiBB    Multiply the integer by 1,024 (2^10).  KKii, kk, kkBB, KK, and KKBB  are
              accepted as synonyms for KKiiBB.

       MMiiBB    Multiply  the integer by 1,048,576 (2^20).  MMii, mm, MM, and MMBB are
              accepted as synonyms for MMiiBB.

       GGiiBB    Multiply the integer by 1,073,741,824 (2^30).  GGii, gg, GG, and  GGBB
              are accepted as synonyms for GGiiBB.

       The special value mmaaxx can be used to indicate the maximum integer value
       supported by the option.

   OOppeerraattiioonn mmooddee
       If multiple operation mode  options  are  given,  the  last  one  takes
       effect.

       --zz, ----ccoommpprreessss
              Compress.   This is the default operation mode when no operation
              mode option is specified and no other operation mode is  implied
              from the command name (for example, uunnxxzz implies ----ddeeccoommpprreessss).

       --dd, ----ddeeccoommpprreessss, ----uunnccoommpprreessss
              Decompress.

       --tt, ----tteesstt
              Test  the integrity of compressed _f_i_l_e_s.  This option is equiva-
              lent to ----ddeeccoommpprreessss ----ssttddoouutt except that the decompressed  data
              is  discarded  instead  of being written to standard output.  No
              files are created or removed.

       --ll, ----lliisstt
              Print information about compressed _f_i_l_e_s.  No uncompressed  out-
              put  is  produced, and no files are created or removed.  In list
              mode, the program cannot read the compressed data from  standard
              input or from other unseekable sources.

              The  default  listing  shows  basic information about _f_i_l_e_s, one
              file per line.  To get more detailed information, use  also  the
              ----vveerrbboossee  option.   For  even  more  information, use ----vveerrbboossee
              twice, but note that this may be slow, because getting  all  the
              extra  information  requires  many  seeks.  The width of verbose
              output exceeds 80 characters,  so  piping  the  output  to  e.g.
              lleessss --SS may be convenient if the terminal isn't wide enough.

              The  exact  output  may  vary  between xxzz versions and different
              locales.  For machine-readable output, ----rroobboott ----lliisstt should  be
              used.

   OOppeerraattiioonn mmooddiiffiieerrss
       --kk, ----kkeeeepp
              Don't delete the input files.

       --ff, ----ffoorrccee
              This option has several effects:

              +o  If the target file already exists, delete it before compress-
                 ing or decompressing.

              +o  Compress or decompress even if the input is a  symbolic  link
                 to  a  regular  file, has more than one hard link, or has the
                 setuid, setgid, or sticky bit set.  The setuid,  setgid,  and
                 sticky bits are not copied to the target file.

              +o  When  used with ----ddeeccoommpprreessss ----ssttddoouutt and xxzz cannot recognize
                 the type of the source file, copy the source file  as  is  to
                 standard  output.   This allows xxzzccaatt ----ffoorrccee to be used like
                 ccaatt(1) for files that have not been compressed with xxzz.  Note
                 that in future, xxzz might support new compressed file formats,
                 which may make xxzz decompress more types of files  instead  of
                 copying  them  as is to standard output.  ----ffoorrmmaatt==_f_o_r_m_a_t can
                 be used to restrict xxzz to decompress only a single file  for-
                 mat.

       --cc, ----ssttddoouutt, ----ttoo--ssttddoouutt
              Write  the  compressed  or  decompressed data to standard output
              instead of a file.  This implies ----kkeeeepp.

       ----ssiinnggllee--ssttrreeaamm
              Decompress only the first ..xxzz stream, and silently ignore possi-
              ble  remaining  input  data following the stream.  Normally such
              trailing garbage makes xxzz display an error.

              xxzz never decompresses more than one stream from ..llzzmmaa  files  or
              raw  streams, but this option still makes xxzz ignore the possible
              trailing data after the ..llzzmmaa file or raw stream.

              This option has no effect if the operation mode is not  ----ddeeccoomm--
              pprreessss or ----tteesstt.

       ----nnoo--ssppaarrssee
              Disable  creation of sparse files.  By default, if decompressing
              into a regular file, xxzz tries to make the  file  sparse  if  the
              decompressed  data  contains long sequences of binary zeros.  It
              also works when writing to standard output as long  as  standard
              output  is  connected  to  a regular file and certain additional
              conditions are met to make it safe.  Creating sparse  files  may
              save  disk  space and speed up the decompression by reducing the
              amount of disk I/O.

       --SS _._s_u_f, ----ssuuffffiixx==_._s_u_f
              When compressing, use _._s_u_f as the suffix  for  the  target  file
              instead  of ..xxzz or ..llzzmmaa.  If not writing to standard output and
              the source file already has the suffix _._s_u_f, a warning  is  dis-
              played and the file is skipped.

              When  decompressing,  recognize  files  with  the suffix _._s_u_f in
              addition to files with the ..xxzz, ..ttxxzz, ..llzzmmaa, or ..ttllzz suffix.  If
              the  source  file  has the suffix _._s_u_f, the suffix is removed to
              get the target filename.

              When compressing or decompressing  raw  streams  (----ffoorrmmaatt==rraaww),
              the  suffix  must always be specified unless writing to standard
              output, because there is no default suffix for raw streams.

       ----ffiilleess[==_f_i_l_e]
              Read the filenames to process from _f_i_l_e;  if  _f_i_l_e  is  omitted,
              filenames  are read from standard input.  Filenames must be ter-
              minated with the newline character.  A dash (--) is  taken  as  a
              regular  filename; it doesn't mean standard input.  If filenames
              are given also as command line  arguments,  they  are  processed
              before the filenames read from _f_i_l_e.

       ----ffiilleess00[==_f_i_l_e]
              This  is  identical  to ----ffiilleess[==_f_i_l_e] except that each filename
              must be terminated with the null character.

   BBaassiicc ffiillee ffoorrmmaatt aanndd ccoommpprreessssiioonn ooppttiioonnss
       --FF _f_o_r_m_a_t, ----ffoorrmmaatt==_f_o_r_m_a_t
              Specify the file _f_o_r_m_a_t to compress or decompress:

              aauuttoo   This is the default.  When compressing, aauuttoo  is  equiva-
                     lent  to xxzz.  When decompressing, the format of the input
                     file is automatically detected.  Note  that  raw  streams
                     (created with ----ffoorrmmaatt==rraaww) cannot be auto-detected.

              xxzz     Compress to the ..xxzz file format, or accept only ..xxzz files
                     when decompressing.

              llzzmmaa, aalloonnee
                     Compress to the legacy ..llzzmmaa file format, or accept  only
                     ..llzzmmaa  files  when  decompressing.   The alternative name
                     aalloonnee is provided for backwards compatibility  with  LZMA
                     Utils.

              rraaww    Compress  or  uncompress a raw stream (no headers).  This
                     is meant for advanced users only.  To decode raw streams,
                     you need use ----ffoorrmmaatt==rraaww and explicitly specify the fil-
                     ter chain, which normally would have been stored  in  the
                     container headers.

       --CC _c_h_e_c_k, ----cchheecckk==_c_h_e_c_k
              Specify  the  type  of the integrity check.  The check is calcu-
              lated from the uncompressed data and stored  in  the  ..xxzz  file.
              This  option  has  an  effect only when compressing into the ..xxzz
              format; the ..llzzmmaa format doesn't support integrity checks.   The
              integrity check (if any) is verified when the ..xxzz file is decom-
              pressed.

              Supported _c_h_e_c_k types:

              nnoonnee   Don't calculate an integrity check at all.  This is  usu-
                     ally  a  bad  idea.  This can be useful when integrity of
                     the data is verified by other means anyway.

              ccrrcc3322  Calculate CRC32  using  the  polynomial  from  IEEE-802.3
                     (Ethernet).

              ccrrcc6644  Calculate CRC64 using the polynomial from ECMA-182.  This
                     is the default, since it is slightly better than CRC32 at
                     detecting  damaged files and the speed difference is neg-
                     ligible.

              sshhaa225566 Calculate SHA-256.  This is somewhat  slower  than  CRC32
                     and CRC64.

              Integrity  of the ..xxzz headers is always verified with CRC32.  It
              is not possible to change or disable it.

       --00 ... --99
              Select a compression preset level.  The default is --66.  If  mul-
              tiple  preset  levels  are specified, the last one takes effect.
              If a custom filter chain was already specified, setting  a  com-
              pression preset level clears the custom filter chain.

              The  differences  between  the presets are more significant than
              with ggzziipp(1) and bbzziipp22(1).  The  selected  compression  settings
              determine  the  memory  requirements  of  the decompressor, thus
              using a too high preset level might make it  painful  to  decom-
              press  the file on an old system with little RAM.  Specifically,
              iitt''ss nnoott aa ggoooodd iiddeeaa ttoo bblliinnddllyy uussee --99 ffoorr  eevveerryytthhiinngg  like  it
              often is with ggzziipp(1) and bbzziipp22(1).

              --00 ... --33
                     These  are somewhat fast presets.  --00 is sometimes faster
                     than ggzziipp --99 while compressing much better.   The  higher
                     ones  often have speed comparable to bbzziipp22(1) with compa-
                     rable or better compression ratio, although  the  results
                     depend a lot on the type of data being compressed.

              --44 ... --66
                     Good  to very good compression while keeping decompressor
                     memory usage reasonable even for old systems.  --66 is  the
                     default,  which  is  usually  a good choice e.g. for dis-
                     tributing files that need to be  decompressible  even  on
                     systems  with  only 16 MiB RAM.  (--55ee or --66ee may be worth
                     considering too.  See ----eexxttrreemmee.)

              --77 ...... --99
                     These are like --66 but with higher compressor  and  decom-
                     pressor  memory requirements.  These are useful only when
                     compressing files bigger than 8 MiB, 16 MiB, and  32 MiB,
                     respectively.

              On the same hardware, the decompression speed is approximately a
              constant number of bytes of  compressed  data  per  second.   In
              other  words,  the better the compression, the faster the decom-
              pression will usually be.  This also means that  the  amount  of
              uncompressed output produced per second can vary a lot.

              The following table summarises the features of the presets:

                     tab(;);  c  c  c  c  c  n  n n n n.  Preset;DictSize;Com-
                     pCPU;CompMem;DecMem -0;256 KiB;0;3 MiB;1 MiB -1;1 MiB;1;9
                     MiB;2 MiB -2;2 MiB;2;17 MiB;3 MiB -3;4 MiB;3;32 MiB;5 MiB
                     -4;4 MiB;4;48 MiB;5 MiB  -5;8  MiB;5;94  MiB;9  MiB  -6;8
                     MiB;6;94  MiB;9  MiB  -7;16  MiB;6;186  MiB;17  MiB -8;32
                     MiB;6;370 MiB;33 MiB -9;64 MiB;6;674 MiB;65 MiB

              Column descriptions:

              +o  DictSize is the LZMA2 dictionary size.  It is waste of memory
                 to  use a dictionary bigger than the size of the uncompressed
                 file.  This is why it is good to avoid using the  presets  --77
                 ...  --99 when there's no real need for them.  At --66 and lower,
                 the amount of memory wasted is usually low enough to not mat-
                 ter.

              +o  CompCPU  is a simplified representation of the LZMA2 settings
                 that affect compression speed.  The dictionary  size  affects
                 speed too, so while CompCPU is the same for levels --66 ... --99,
                 higher levels still tend to be a little slower.  To get  even
                 slower and thus possibly better compression, see ----eexxttrreemmee.

              +o  CompMem  contains  the  compressor memory requirements in the
                 single-threaded mode.  It may vary slightly between  xxzz  ver-
                 sions.   Memory  requirements  of  some  of the future multi-
                 threaded modes may be dramatically higher than  that  of  the
                 single-threaded mode.

              +o  DecMem  contains  the decompressor memory requirements.  That
                 is, the compression settings determine  the  memory  require-
                 ments  of  the  decompressor.   The exact decompressor memory
                 usage is slighly more than the LZMA2 dictionary size, but the
                 values  in  the  table  have been rounded up to the next full
                 MiB.

       --ee, ----eexxttrreemmee
              Use a slower variant of the selected  compression  preset  level
              (--00  ...  --99)  to  hopefully get a little bit better compression
              ratio, but with bad luck this can also make  it  worse.   Decom-
              pressor  memory  usage  is  not  affected, but compressor memory
              usage increases a little at preset levels --00 ... --33.

              Since there are two presets  with  dictionary  sizes  4 MiB  and
              8 MiB,  the  presets  --33ee  and  --55ee use slightly faster settings
              (lower CompCPU) than --44ee and --66ee, respectively.  That way no two
              presets are identical.

                     tab(;);  c  c  c  c  c  n  n n n n.  Preset;DictSize;Com-
                     pCPU;CompMem;DecMem  -0e;256  KiB;8;4  MiB;1  MiB   -1e;1
                     MiB;8;13   MiB;2  MiB  -2e;2  MiB;8;25  MiB;3  MiB  -3e;4
                     MiB;7;48  MiB;5  MiB  -4e;4  MiB;8;48  MiB;5  MiB   -5e;8
                     MiB;7;94  MiB;9  MiB  -6e;8  MiB;8;94  MiB;9  MiB  -7e;16
                     MiB;8;186 MiB;17 MiB -8e;32 MiB;8;370 MiB;33  MiB  -9e;64
                     MiB;8;674 MiB;65 MiB

              For  example,  there  are a total of four presets that use 8 MiB
              dictionary, whose order from the fastest to the slowest  is  --55,
              --66, --55ee, and --66ee.

       ----ffaasstt
       ----bbeesstt These  are  somewhat  misleading  aliases for --00 and --99, respec-
              tively.  These are provided  only  for  backwards  compatibility
              with LZMA Utils.  Avoid using these options.

       ----bblloocckk--ssiizzee==_s_i_z_e
              When  compressing  to  the ..xxzz format, split the input data into
              blocks of _s_i_z_e bytes.  The blocks are  compressed  independently
              from each other.

       ----mmeemmlliimmiitt--ccoommpprreessss==_l_i_m_i_t
              Set  a  memory  usage  limit for compression.  If this option is
              specified multiple times, the last one takes effect.

              If the compression settings exceed the _l_i_m_i_t, xxzz will adjust the
              settings  downwards  so that the limit is no longer exceeded and
              display a notice  that  automatic  adjustment  was  done.   Such
              adjustments  are  not made when compressing with ----ffoorrmmaatt==rraaww or
              if ----nnoo--aaddjjuusstt has been specified.  In those cases, an error  is
              displayed and xxzz will exit with exit status 1.

              The _l_i_m_i_t can be specified in multiple ways:

              +o  The  _l_i_m_i_t can be an absolute value in bytes.  Using an inte-
                 ger suffix like MMiiBB can be useful.  Example:  ----mmeemmlliimmiitt--ccoomm--
                 pprreessss==8800MMiiBB

              +o  The  _l_i_m_i_t can be specified as a percentage of total physical
                 memory (RAM).  This can be useful especially when setting the
                 XXZZ__DDEEFFAAUULLTTSS  environment  variable  in a shell initialization
                 script that is shared between different computers.  That  way
                 the  limit  is automatically bigger on systems with more mem-
                 ory.  Example: ----mmeemmlliimmiitt--ccoommpprreessss==7700%%

              +o  The _l_i_m_i_t can be reset back to its default value  by  setting
                 it  to  00.  This is currently equivalent to setting the _l_i_m_i_t
                 to mmaaxx (no memory usage limit).  Once multithreading  support
                 has been implemented, there may be a difference between 00 and
                 mmaaxx for the multithreaded case, so it is recommended to use 00
                 instead of mmaaxx until the details have been decided.

              See also the section MMeemmoorryy uussaaggee.

       ----mmeemmlliimmiitt--ddeeccoommpprreessss==_l_i_m_i_t
              Set  a  memory usage limit for decompression.  This also affects
              the ----lliisstt mode.  If  the  operation  is  not  possible  without
              exceeding  the _l_i_m_i_t, xxzz will display an error and decompressing
              the file will fail.  See ----mmeemmlliimmiitt--ccoommpprreessss==_l_i_m_i_t for  possible
              ways to specify the _l_i_m_i_t.

       --MM _l_i_m_i_t, ----mmeemmlliimmiitt==_l_i_m_i_t, ----mmeemmoorryy==_l_i_m_i_t
              This   is  equivalent  to  specifying  ----mmeemmlliimmiitt--ccoommpprreessss==_l_i_m_i_t
              ----mmeemmlliimmiitt--ddeeccoommpprreessss==_l_i_m_i_t.

       ----nnoo--aaddjjuusstt
              Display an error and exit if the compression settings exceed the
              memory usage limit.  The default is to adjust the settings down-
              wards so that the memory usage limit is not exceeded.  Automatic
              adjusting  is  always disabled when creating raw streams (----ffoorr--
              mmaatt==rraaww).

       --TT _t_h_r_e_a_d_s, ----tthhrreeaaddss==_t_h_r_e_a_d_s
              Specify the number of worker threads to use.  The actual  number
              of  threads can be less than _t_h_r_e_a_d_s if using more threads would
              exceed the memory usage limit.

              MMuullttiitthhrreeaaddeedd ccoommpprreessssiioonn aanndd ddeeccoommpprreessssiioonn aarree nnoott  iimmpplleemmeenntteedd
              yyeett,, ssoo tthhiiss ooppttiioonn hhaass nnoo eeffffeecctt ffoorr nnooww..

              AAss  ooff  wwrriittiinngg  ((22001100--0099--2277)),, iitt hhaassnn''tt bbeeeenn ddeecciiddeedd iiff tthhrreeaaddss
              wwiillll bbee uusseedd bbyy ddeeffaauulltt oonn mmuullttiiccoorree ssyysstteemmss  oonnccee  ssuuppppoorrtt  ffoorr
              tthhrreeaaddiinngg hhaass bbeeeenn iimmpplleemmeenntteedd..  CCoommmmeennttss aarree wweellccoommee..  The com-
              plicating factor is that using many threads  will  increase  the
              memory  usage dramatically.  Note that if multithreading will be
              the default, it will probably be done  so  that  single-threaded
              and  multithreaded modes produce the same output, so compression
              ratio won't be  significantly  affected  if  threading  will  be
              enabled by default.

   CCuussttoomm ccoommpprreessssoorr ffiilltteerr cchhaaiinnss
       A  custom  filter  chain  allows specifying the compression settings in
       detail instead of relying on the settings associated to the preset lev-
       els.   When  a custom filter chain is specified, the compression preset
       level options (--00 ... --99 and ----eexxttrreemmee) are silently ignored.

       A filter chain is comparable to piping on the command line.  When  com-
       pressing, the uncompressed input goes to the first filter, whose output
       goes to the next filter (if any).  The output of the last  filter  gets
       written  to  the compressed file.  The maximum number of filters in the
       chain is four, but typically a filter chain has only one  or  two  fil-
       ters.

       Many filters have limitations on where they can be in the filter chain:
       some filters can work only as the last filter in the chain,  some  only
       as  a  non-last  filter,  and  some  work in any position in the chain.
       Depending on the filter, this limitation is either inherent to the fil-
       ter design or exists to prevent security issues.

       A  custom filter chain is specified by using one or more filter options
       in the order they are wanted in the filter chain.  That is,  the  order
       of  filter  options  is significant!  When decoding raw streams (----ffoorr--
       mmaatt==rraaww), the filter chain is specified in the same  order  as  it  was
       specified when compressing.

       Filters  take filter-specific _o_p_t_i_o_n_s as a comma-separated list.  Extra
       commas in _o_p_t_i_o_n_s are ignored.  Every option has a  default  value,  so
       you need to specify only those you want to change.

       ----llzzmmaa11[==_o_p_t_i_o_n_s]
       ----llzzmmaa22[==_o_p_t_i_o_n_s]
              Add  LZMA1  or  LZMA2 filter to the filter chain.  These filters
              can be used only as the last filter in the chain.

              LZMA1 is a legacy filter, which is supported almost  solely  due
              to  the  legacy  ..llzzmmaa  file  format, which supports only LZMA1.
              LZMA2 is an updated version  of  LZMA1  to  fix  some  practical
              issues  of LZMA1.  The ..xxzz format uses LZMA2 and doesn't support
              LZMA1 at all.  Compression speed and ratios of LZMA1  and  LZMA2
              are practically the same.

              LZMA1 and LZMA2 share the same set of _o_p_t_i_o_n_s:

              pprreesseett==_p_r_e_s_e_t
                     Reset  all LZMA1 or LZMA2 _o_p_t_i_o_n_s to _p_r_e_s_e_t.  _P_r_e_s_e_t con-
                     sist of an integer, which may be followed by  single-let-
                     ter  preset  modifiers.   The integer can be from 00 to 99,
                     matching the command line options --00 ...  --99.   The  only
                     supported   modifier   is   currently  ee,  which  matches
                     ----eexxttrreemmee.  The default  _p_r_e_s_e_t  is  66,  from  which  the
                     default values for the rest of the LZMA1 or LZMA2 _o_p_t_i_o_n_s
                     are taken.

              ddiicctt==_s_i_z_e
                     Dictionary (history buffer) _s_i_z_e indicates how many bytes
                     of  the  recently  processed uncompressed data is kept in
                     memory.  The  algorithm  tries  to  find  repeating  byte
                     sequences (matches) in the uncompressed data, and replace
                     them with references to the data currently in the dictio-
                     nary.   The  bigger  the  dictionary,  the  higher is the
                     chance to find a match.  Thus, increasing dictionary _s_i_z_e
                     usually improves compression ratio, but a dictionary big-
                     ger than the uncompressed file is waste of memory.

                     Typical dictionary _s_i_z_e is from 64 KiB  to  64 MiB.   The
                     minimum  is  4 KiB.   The maximum for compression is cur-
                     rently 1.5 GiB (1536 MiB).  The decompressor already sup-
                     ports  dictionaries up to one byte less than 4 GiB, which
                     is the maximum for the LZMA1 and LZMA2 stream formats.

                     Dictionary _s_i_z_e and match finder (_m_f) together  determine
                     the memory usage of the LZMA1 or LZMA2 encoder.  The same
                     (or bigger) dictionary _s_i_z_e is required for decompressing
                     that  was used when compressing, thus the memory usage of
                     the decoder is determined by  the  dictionary  size  used
                     when  compressing.   The ..xxzz headers store the dictionary
                     _s_i_z_e either as 2^_n or 2^_n + 2^(_n-1), so these  _s_i_z_e_s  are
                     somewhat preferred for compression.  Other _s_i_z_e_s will get
                     rounded up when stored in the ..xxzz headers.

              llcc==_l_c  Specify the number of literal context bits.  The  minimum
                     is  0  and  the maximum is 4; the default is 3.  In addi-
                     tion, the sum of _l_c and _l_p must not exceed 4.

                     All bytes that cannot be encoded as matches  are  encoded
                     as  literals.   That  is, literals are simply 8-bit bytes
                     that are encoded one at a time.

                     The literal coding makes an assumption that  the  highest
                     _l_c  bits of the previous uncompressed byte correlate with
                     the next byte.  E.g. in typical English text,  an  upper-
                     case letter is often followed by a lower-case letter, and
                     a lower-case letter is usually followed by another lower-
                     case  letter.  In the US-ASCII character set, the highest
                     three bits are 010 for upper-case  letters  and  011  for
                     lower-case  letters.   When _l_c is at least 3, the literal
                     coding can take advantage of this property in the  uncom-
                     pressed data.

                     The default value (3) is usually good.  If you want maxi-
                     mum compression, test llcc==44.  Sometimes it helps a little,
                     and sometimes it makes compression worse.  If it makes it
                     worse, test e.g. llcc==22 too.

              llpp==_l_p  Specify the number of literal position bits.  The minimum
                     is 0 and the maximum is 4; the default is 0.

                     _L_p  affects  what  kind  of alignment in the uncompressed
                     data is assumed when encoding literals.  See _p_b below for
                     more information about alignment.

              ppbb==_p_b  Specify  the  number  of position bits.  The minimum is 0
                     and the maximum is 4; the default is 2.

                     _P_b affects what kind of  alignment  in  the  uncompressed
                     data  is assumed in general.  The default means four-byte
                     alignment (2^_p_b=2^2=4), which is often a good choice when
                     there's no better guess.

                     When  the  aligment  is known, setting _p_b accordingly may
                     reduce the file size a little.  E.g. with text files hav-
                     ing  one-byte  alignment  (US-ASCII,  ISO-8859-*, UTF-8),
                     setting  ppbb==00  can  improve  compression  slightly.   For
                     UTF-16  text, ppbb==11 is a good choice.  If the alignment is
                     an odd number like  3  bytes,  ppbb==00  might  be  the  best
                     choice.

                     Even though the assumed alignment can be adjusted with _p_b
                     and _l_p, LZMA1 and  LZMA2  still  slightly  favor  16-byte
                     alignment.   It  might  be worth taking into account when
                     designing file formats that are likely to be  often  com-
                     pressed with LZMA1 or LZMA2.

              mmff==_m_f  Match  finder has a major effect on encoder speed, memory
                     usage, and compression ratio.  Usually Hash  Chain  match
                     finders  are  faster than Binary Tree match finders.  The
                     default depends on the _p_r_e_s_e_t: 0 uses hhcc33, 1-3  use  hhcc44,
                     and the rest use bbtt44.

                     The  following  match  finders are supported.  The memory
                     usage formulas below are rough approximations, which  are
                     closest to the reality when _d_i_c_t is a power of two.

                     hhcc33    Hash Chain with 2- and 3-byte hashing
                            Minimum value for _n_i_c_e: 3
                            Memory usage:
                            _d_i_c_t * 7.5 (if _d_i_c_t <= 16 MiB);
                            _d_i_c_t * 5.5 + 64 MiB (if _d_i_c_t > 16 MiB)

                     hhcc44    Hash Chain with 2-, 3-, and 4-byte hashing
                            Minimum value for _n_i_c_e: 4
                            Memory usage:
                            _d_i_c_t * 7.5 (if _d_i_c_t <= 32 MiB);
                            _d_i_c_t * 6.5 (if _d_i_c_t > 32 MiB)

                     bbtt22    Binary Tree with 2-byte hashing
                            Minimum value for _n_i_c_e: 2
                            Memory usage: _d_i_c_t * 9.5

                     bbtt33    Binary Tree with 2- and 3-byte hashing
                            Minimum value for _n_i_c_e: 3
                            Memory usage:
                            _d_i_c_t * 11.5 (if _d_i_c_t <= 16 MiB);
                            _d_i_c_t * 9.5 + 64 MiB (if _d_i_c_t > 16 MiB)

                     bbtt44    Binary Tree with 2-, 3-, and 4-byte hashing
                            Minimum value for _n_i_c_e: 4
                            Memory usage:
                            _d_i_c_t * 11.5 (if _d_i_c_t <= 32 MiB);
                            _d_i_c_t * 10.5 (if _d_i_c_t > 32 MiB)

              mmooddee==_m_o_d_e
                     Compression _m_o_d_e specifies the method to analyze the data
                     produced by the match finder.  Supported _m_o_d_e_s  are  ffaasstt
                     and nnoorrmmaall.  The default is ffaasstt for _p_r_e_s_e_t_s 0-3 and nnoorr--
                     mmaall for _p_r_e_s_e_t_s 4-9.

                     Usually ffaasstt is used with Hash Chain  match  finders  and
                     nnoorrmmaall with Binary Tree match finders.  This is also what
                     the _p_r_e_s_e_t_s do.

              nniiccee==_n_i_c_e
                     Specify what is considered to be  a  nice  length  for  a
                     match.  Once a match of at least _n_i_c_e bytes is found, the
                     algorithm stops looking for possibly better matches.

                     _N_i_c_e can be 2-273 bytes.  Higher values tend to give bet-
                     ter  compression  ratio  at  the  expense  of speed.  The
                     default depends on the _p_r_e_s_e_t.

              ddeepptthh==_d_e_p_t_h
                     Specify the maximum search depth  in  the  match  finder.
                     The  default  is  the special value of 0, which makes the
                     compressor determine a reasonable _d_e_p_t_h from _m_f and _n_i_c_e.

                     Reasonable _d_e_p_t_h for Hash Chains is 4-100 and 16-1000 for
                     Binary  Trees.  Using very high values for _d_e_p_t_h can make
                     the encoder extremely slow with some files.   Avoid  set-
                     ting  the  _d_e_p_t_h  over  1000  unless  you are prepared to
                     interrupt the compression in case it is  taking  far  too
                     long.

              When  decoding  raw streams (----ffoorrmmaatt==rraaww), LZMA2 needs only the
              dictionary _s_i_z_e.  LZMA1 needs also _l_c, _l_p, and _p_b.

       ----xx8866[==_o_p_t_i_o_n_s]
       ----ppoowweerrppcc[==_o_p_t_i_o_n_s]
       ----iiaa6644[==_o_p_t_i_o_n_s]
       ----aarrmm[==_o_p_t_i_o_n_s]
       ----aarrmmtthhuummbb[==_o_p_t_i_o_n_s]
       ----ssppaarrcc[==_o_p_t_i_o_n_s]
              Add a branch/call/jump (BCJ) filter to the filter chain.   These
              filters  can  be  used  only  as a non-last filter in the filter
              chain.

              A BCJ filter converts relative addresses in the machine code  to
              their  absolute  counterparts.   This doesn't change the size of
              the data, but it increases redundancy, which can help  LZMA2  to
              produce  0-15 %  smaller  ..xxzz  file.  The BCJ filters are always
              reversible, so using a BCJ filter for wrong type of data doesn't
              cause  any data loss, although it may make the compression ratio
              slightly worse.

              It is fine to apply a BCJ filter on a whole executable;  there's
              no  need to apply it only on the executable section.  Applying a
              BCJ filter on an archive that contains both executable and  non-
              executable  files may or may not give good results, so it gener-
              ally isn't good to blindly apply a BCJ filter  when  compressing
              binary packages for distribution.

              These  BCJ filters are very fast and use insignificant amount of
              memory.  If a BCJ filter improves compression ratio of  a  file,
              it  can  improve  decompression speed at the same time.  This is
              because, on the same hardware, the decompression speed of  LZMA2
              is  roughly  a fixed number of bytes of compressed data per sec-
              ond.

              These BCJ filters have known problems related to the compression
              ratio:

              +o  Some  types  of files containing executable code (e.g. object
                 files, static libraries, and Linux kernel modules)  have  the
                 addresses  in  the  instructions  filled  with filler values.
                 These BCJ filters will still do the address conversion, which
                 will make the compression worse with these files.

              +o  Applying a BCJ filter on an archive containing multiple simi-
                 lar executables can make the compression ratio worse than not
                 using  a  BCJ filter.  This is because the BCJ filter doesn't
                 detect the boundaries of the executable  files,  and  doesn't
                 reset the address conversion counter for each executable.

              Both  of the above problems will be fixed in the future in a new
              filter.  The old BCJ filters will still be  useful  in  embedded
              systems,  because  the  decoder of the new filter will be bigger
              and use more memory.

              Different instruction sets have have different alignment:

                     tab(;); l n l l n l.  Filter;Alignment;Notes x86;1;32-bit
                     or  64-bit  x86  PowerPC;4;Big  endian  only ARM;4;Little
                     endian only ARM-Thumb;2;Little endian  only  IA-64;16;Big
                     or little endian SPARC;4;Big or little endian

              Since  the  BCJ-filtered  data is usually compressed with LZMA2,
              the compression ratio may be  improved  slightly  if  the  LZMA2
              options  are set to match the alignment of the selected BCJ fil-
              ter.  For example, with the IA-64 filter, it's good to set  ppbb==44
              with  LZMA2 (2^4=16).  The x86 filter is an exception; it's usu-
              ally good to stick to LZMA2's default four-byte  alignment  when
              compressing x86 executables.

              All BCJ filters support the same _o_p_t_i_o_n_s:

              ssttaarrtt==_o_f_f_s_e_t
                     Specify  the  start  _o_f_f_s_e_t  that is used when converting
                     between relative and absolute addresses.  The _o_f_f_s_e_t must
                     be a multiple of the alignment of the filter (see the ta-
                     ble above).  The  default  is  zero.   In  practice,  the
                     default  is  good;  specifying  a custom _o_f_f_s_e_t is almost
                     never useful.

       ----ddeellttaa[==_o_p_t_i_o_n_s]
              Add the Delta filter to the filter chain.  The Delta filter  can
              be only used as a non-last filter in the filter chain.

              Currently  only simple byte-wise delta calculation is supported.
              It can be  useful  when  compressing  e.g.  uncompressed  bitmap
              images  or  uncompressed  PCM  audio.   However, special purpose
              algorithms may give significantly better results  than  Delta  +
              LZMA2.   This  is  true  especially with audio, which compresses
              faster and better e.g. with ffllaacc(1).

              Supported _o_p_t_i_o_n_s:

              ddiisstt==_d_i_s_t_a_n_c_e
                     Specify the _d_i_s_t_a_n_c_e of the delta calculation  in  bytes.
                     _d_i_s_t_a_n_c_e must be 1-256.  The default is 1.

                     For example, with ddiisstt==22 and eight-byte input A1 B1 A2 B3
                     A3 B5 A4 B7, the output will be A1 B1 01 02 01 02 01 02.

   OOtthheerr ooppttiioonnss
       --qq, ----qquuiieett
              Suppress warnings and notices.  Specify this twice  to  suppress
              errors too.  This option has no effect on the exit status.  That
              is, even if a warning was suppressed, the exit status  to  indi-
              cate a warning is still used.

       --vv, ----vveerrbboossee
              Be  verbose.   If  standard error is connected to a terminal, xxzz
              will display a progress indicator.  Specifying  ----vveerrbboossee  twice
              will give even more verbose output.

              The progress indicator shows the following information:

              +o  Completion  percentage is shown if the size of the input file
                 is known.  That is, the percentage cannot be shown in pipes.

              +o  Amount of compressed data produced (compressing) or  consumed
                 (decompressing).

              +o  Amount  of  uncompressed  data consumed (compressing) or pro-
                 duced (decompressing).

              +o  Compression ratio, which is calculated by dividing the amount
                 of  compressed  data processed so far by the amount of uncom-
                 pressed data processed so far.

              +o  Compression or decompression speed.  This is measured as  the
                 amount  of  uncompressed  data consumed (compression) or pro-
                 duced (decompression) per second.  It is shown  after  a  few
                 seconds have passed since xxzz started processing the file.

              +o  Elapsed time in the format M:SS or H:MM:SS.

              +o  Estimated  remaining  time is shown only when the size of the
                 input file is known and a  couple  of  seconds  have  already
                 passed  since  xxzz  started  processing the file.  The time is
                 shown in a less precise format which never  has  any  colons,
                 e.g. 2 min 30 s.

              When  standard  error  is not a terminal, ----vveerrbboossee will make xxzz
              print the filename, compressed size, uncompressed size, compres-
              sion  ratio,  and  possibly also the speed and elapsed time on a
              single line to standard error after compressing or decompressing
              the file.  The speed and elapsed time are included only when the
              operation took at least a few seconds.  If the operation  didn't
              finish,  e.g. due to user interruption, also the completion per-
              centage is printed if the size of the input file is known.

       --QQ, ----nnoo--wwaarrnn
              Don't set the exit status to 2 even if a condition worth a warn-
              ing  was  detected.   This  option  doesn't affect the verbosity
              level, thus both ----qquuiieett and ----nnoo--wwaarrnn have to be  used  to  not
              display warnings and to not alter the exit status.

       ----rroobboott
              Print  messages  in a machine-parsable format.  This is intended
              to ease writing  frontends  that  want  to  use  xxzz  instead  of
              liblzma, which may be the case with various scripts.  The output
              with this option  enabled  is  meant  to  be  stable  across  xxzz
              releases.  See the section RROOBBOOTT MMOODDEE for details.

       ----iinnffoo--mmeemmoorryy
              Display,  in  human-readable  format,  how  much physical memory
              (RAM) xxzz thinks the system has and the memory usage  limits  for
              compression and decompression, and exit successfully.

       --hh, ----hheellpp
              Display  a  help  message  describing  the  most  commonly  used
              options, and exit successfully.

       --HH, ----lloonngg--hheellpp
              Display a help message describing all features of xxzz,  and  exit
              successfully

       --VV, ----vveerrssiioonn
              Display  the  version number of xxzz and liblzma in human readable
              format.  To get machine-parsable output, specify ----rroobboott  before
              ----vveerrssiioonn.

RROOBBOOTT MMOODDEE
       The robot mode is activated with the ----rroobboott option.  It makes the out-
       put of xxzz easier to parse by other programs.  Currently ----rroobboott is sup-
       ported  only  together  with  ----vveerrssiioonn, ----iinnffoo--mmeemmoorryy, and ----lliisstt.  It
       will be supported for  normal  compression  and  decompression  in  the
       future.

   VVeerrssiioonn
       xxzz ----rroobboott ----vveerrssiioonn will print the version number of xxzz and liblzma in
       the following format:

       XXZZ__VVEERRSSIIOONN==_X_Y_Y_Y_Z_Z_Z_S
       LLIIBBLLZZMMAA__VVEERRSSIIOONN==_X_Y_Y_Y_Z_Z_Z_S

       _X      Major version.

       _Y_Y_Y    Minor version.  Even numbers are stable.  Odd numbers are  alpha
              or beta versions.

       _Z_Z_Z    Patch  level  for stable releases or just a counter for develop-
              ment releases.

       _S      Stability.  0 is alpha, 1 is beta, and 2 is stable.  _S should be
              always 2 when _Y_Y_Y is even.

       _X_Y_Y_Y_Z_Z_Z_S are the same on both lines if xxzz and liblzma are from the same
       XZ Utils release.

       Examples: 4.999.9beta is 4499999900009911 and 5.0.0 is 5500000000000022.

   MMeemmoorryy lliimmiitt iinnffoorrmmaattiioonn
       xxzz ----rroobboott ----iinnffoo--mmeemmoorryy prints a single line with three  tab-separated
       columns:

       1.  Total amount of physical memory (RAM) in bytes

       2.  Memory  usage  limit  for compression in bytes.  A special value of
           zero indicates the default setting, which for single-threaded  mode
           is the same as no limit.

       3.  Memory  usage limit for decompression in bytes.  A special value of
           zero indicates the default setting, which for single-threaded  mode
           is the same as no limit.

       In  the  future,  the  output of xxzz ----rroobboott ----iinnffoo--mmeemmoorryy may have more
       columns, but never more than a single line.

   LLiisstt mmooddee
       xxzz ----rroobboott ----lliisstt uses tab-separated output.  The first column of every
       line  has  a string that indicates the type of the information found on
       that line:

       nnaammee   This is always the first line when starting to list a file.  The
              second column on the line is the filename.

       ffiillee   This line contains overall information about the ..xxzz file.  This
              line is always printed after the nnaammee line.

       ssttrreeaamm This line type is used only when ----vveerrbboossee was specified.  There
              are as many ssttrreeaamm lines as there are streams in the ..xxzz file.

       bblloocckk  This line type is used only when ----vveerrbboossee was specified.  There
              are as many bblloocckk lines as there are blocks  in  the  ..xxzz  file.
              The  bblloocckk lines are shown after all the ssttrreeaamm lines; different
              line types are not interleaved.

       ssuummmmaarryy
              This line type is used only when ----vveerrbboossee was specified  twice.
              This line is printed after all bblloocckk lines.  Like the ffiillee line,
              the ssuummmmaarryy line contains  overall  information  about  the  ..xxzz
              file.

       ttoottaallss This  line  is always the very last line of the list output.  It
              shows the total counts and sizes.

       The columns of the ffiillee lines:
              2.  Number of streams in the file
              3.  Total number of blocks in the stream(s)
              4.  Compressed size of the file
              5.  Uncompressed size of the file
              6.  Compression ratio, for example  00..112233..   If  ratio  is  over
                  9.999,  three  dashes  (------)  are  displayed  instead of the
                  ratio.
              7.  Comma-separated list of integrity check names.  The  follow-
                  ing strings are used for the known check types: NNoonnee, CCRRCC3322,
                  CCRRCC6644, and SSHHAA--225566.  For unknown check types,  UUnnkknnoowwnn--_N  is
                  used,  where  _N  is the Check ID as a decimal number (one or
                  two digits).
              8.  Total size of stream padding in the file

       The columns of the ssttrreeaamm lines:
              2.  Stream number (the first stream is 1)
              3.  Number of blocks in the stream
              4.  Compressed start offset
              5.  Uncompressed start offset
              6.  Compressed size (does not include stream padding)
              7.  Uncompressed size
              8.  Compression ratio
              9.  Name of the integrity check
              10. Size of stream padding

       The columns of the bblloocckk lines:
              2.  Number of the stream containing this block
              3.  Block number relative to the beginning of  the  stream  (the
                  first block is 1)
              4.  Block number relative to the beginning of the file
              5.  Compressed  start  offset  relative  to the beginning of the
                  file
              6.  Uncompressed start offset relative to the beginning  of  the
                  file
              7.  Total compressed size of the block (includes headers)
              8.  Uncompressed size
              9.  Compression ratio
              10. Name of the integrity check

       If  ----vveerrbboossee  was  specified twice, additional columns are included on
       the bblloocckk lines.  These are not  displayed  with  a  single  ----vveerrbboossee,
       because  getting  this  information requires many seeks and can thus be
       slow:
              11. Value of the integrity check in hexadecimal
              12. Block header size
              13. Block flags: cc indicates that compressed  size  is  present,
                  and  uu  indicates that uncompressed size is present.  If the
                  flag is not set, a dash (--) is shown  instead  to  keep  the
                  string  length  fixed.  New flags may be added to the end of
                  the string in the future.
              14. Size of the  actual  compressed  data  in  the  block  (this
                  excludes the block header, block padding, and check fields)
              15. Amount  of  memory  (in  bytes)  required to decompress this
                  block with this xxzz version
              16. Filter chain.  Note that most of the options  used  at  com-
                  pression time cannot be known, because only the options that
                  are needed for decompression are stored in the ..xxzz headers.

       The columns of the ssuummmmaarryy lines:
              2.  Amount of memory (in bytes) required to decompress this file
                  with this xxzz version
              3.  yyeess  or  nnoo  indicating  if all block headers have both com-
                  pressed size and uncompressed size stored in them
              _S_i_n_c_e xxzz _5_._1_._2_a_l_p_h_a_:
              4.  Minimum xxzz version required to decompress the file

       The columns of the ttoottaallss line:
              2.  Number of streams
              3.  Number of blocks
              4.  Compressed size
              5.  Uncompressed size
              6.  Average compression ratio
              7.  Comma-separated list of  integrity  check  names  that  were
                  present in the files
              8.  Stream padding size
              9.  Number of files.  This is here to keep the order of the ear-
                  lier columns the same as on ffiillee lines.

       If ----vveerrbboossee was specified twice, additional columns  are  included  on
       the ttoottaallss line:
              10. Maximum  amount  of memory (in bytes) required to decompress
                  the files with this xxzz version
              11. yyeess or nnoo indicating if all block  headers  have  both  com-
                  pressed size and uncompressed size stored in them
              _S_i_n_c_e xxzz _5_._1_._2_a_l_p_h_a_:
              12. Minimum xxzz version required to decompress the file

       Future  versions may add new line types and new columns can be added to
       the existing line types, but the existing columns won't be changed.

EEXXIITT SSTTAATTUUSS
       00      All is good.

       11      An error occurred.

       22      Something  worth  a  warning  occurred,  but  no  actual  errors
              occurred.

       Notices (not warnings or errors) printed on standard error don't affect
       the exit status.

EENNVVIIRROONNMMEENNTT
       xxzz parses space-separated lists of options from the  environment  vari-
       ables XXZZ__DDEEFFAAUULLTTSS and XXZZ__OOPPTT, in this order, before parsing the options
       from the command line.  Note that only  options  are  parsed  from  the
       environment  variables;  all non-options are silently ignored.  Parsing
       is done with ggeettoopptt__lloonngg(3) which is used also  for  the  command  line
       arguments.

       XXZZ__DDEEFFAAUULLTTSS
              User-specific or system-wide default options.  Typically this is
              set in a shell initialization script to enable xxzz's memory usage
              limiter  by default.  Excluding shell initialization scripts and
              similar  special  cases,  scripts  must  never  set   or   unset
              XXZZ__DDEEFFAAUULLTTSS.

       XXZZ__OOPPTT This is for passing options to xxzz when it is not possible to set
              the options directly on the xxzz command line.  This is  the  case
              e.g. when xxzz is run by a script or tool, e.g. GNU ttaarr(1):

                     XZ_OPT=-2v tar caf foo.tar.xz foo

              Scripts  may use XXZZ__OOPPTT e.g. to set script-specific default com-
              pression options.  It is still recommended  to  allow  users  to
              override XXZZ__OOPPTT if that is reasonable, e.g. in sshh(1) scripts one
              may use something like this:

                     XZ_OPT=${XZ_OPT-"-7e"}
                     export XZ_OPT

LLZZMMAA UUTTIILLSS CCOOMMPPAATTIIBBIILLIITTYY
       The command line syntax of  xxzz  is  practically  a  superset  of  llzzmmaa,
       uunnllzzmmaa,  and  llzzccaatt as found from LZMA Utils 4.32.x.  In most cases, it
       is possible to replace LZMA Utils with XZ Utils without breaking exist-
       ing  scripts.  There are some incompatibilities though, which may some-
       times cause problems.

   CCoommpprreessssiioonn pprreesseett lleevveellss
       The numbering of the compression level presets is not identical  in  xxzz
       and  LZMA Utils.  The most important difference is how dictionary sizes
       are mapped to different presets.  Dictionary size is roughly  equal  to
       the decompressor memory usage.

              tab(;);  c  c  c c n n.  Level;xz;LZMA Utils -0;256 KiB;N/A -1;1
              MiB;64 KiB -2;2 MiB;1 MiB -3;4 MiB;512 KiB -4;4 MiB;1  MiB  -5;8
              MiB;2  MiB -6;8 MiB;4 MiB -7;16 MiB;8 MiB -8;32 MiB;16 MiB -9;64
              MiB;32 MiB

       The dictionary size differences affect the compressor memory usage too,
       but  there  are some other differences between LZMA Utils and XZ Utils,
       which make the difference even bigger:

              tab(;); c c c c n n.  Level;xz;LZMA Utils  4.32.x  -0;3  MiB;N/A
              -1;9  MiB;2  MiB  -2;17 MiB;12 MiB -3;32 MiB;12 MiB -4;48 MiB;16
              MiB -5;94 MiB;26 MiB -6;94 MiB;45 MiB -7;186 MiB;83  MiB  -8;370
              MiB;159 MiB -9;674 MiB;311 MiB

       The  default  preset  level in LZMA Utils is --77 while in XZ Utils it is
       --66, so both use an 8 MiB dictionary by default.

   SSttrreeaammeedd vvss.. nnoonn--ssttrreeaammeedd ..llzzmmaa ffiilleess
       The uncompressed size of the file can be stored in  the  ..llzzmmaa  header.
       LZMA  Utils  does that when compressing regular files.  The alternative
       is to mark that uncompressed size is  unknown  and  use  end-of-payload
       marker to indicate where the decompressor should stop.  LZMA Utils uses
       this method when uncompressed size isn't known, which is the  case  for
       example in pipes.

       xxzz  supports  decompressing  ..llzzmmaa files with or without end-of-payload
       marker, but all ..llzzmmaa files  created  by  xxzz  will  use  end-of-payload
       marker  and  have  uncompressed  size  marked  as  unknown in the ..llzzmmaa
       header.  This may be a problem in some uncommon situations.  For  exam-
       ple,  a  ..llzzmmaa  decompressor in an embedded device might work only with
       files that have known uncompressed size.  If you hit this problem,  you
       need  to  use  LZMA  Utils or LZMA SDK to create ..llzzmmaa files with known
       uncompressed size.

   UUnnssuuppppoorrtteedd ..llzzmmaa ffiilleess
       The ..llzzmmaa format allows _l_c values up to 8, and _l_p values up to 4.  LZMA
       Utils can decompress files with any _l_c and _l_p, but always creates files
       with llcc==33 and llpp==00.  Creating files with other _l_c and  _l_p  is  possible
       with xxzz and with LZMA SDK.

       The implementation of the LZMA1 filter in liblzma requires that the sum
       of _l_c and _l_p must not exceed 4.  Thus, ..llzzmmaa files, which  exceed  this
       limitation, cannot be decompressed with xxzz.

       LZMA Utils creates only ..llzzmmaa files which have a dictionary size of 2^_n
       (a power of 2) but accepts files with  any  dictionary  size.   liblzma
       accepts  only  ..llzzmmaa files which have a dictionary size of 2^_n or 2^_n +
       2^(_n-1).  This is to decrease  false  positives  when  detecting  ..llzzmmaa
       files.

       These limitations shouldn't be a problem in practice, since practically
       all ..llzzmmaa files have been compressed with settings  that  liblzma  will
       accept.

   TTrraaiilliinngg ggaarrbbaaggee
       When  decompressing,  LZMA  Utils  silently ignore everything after the
       first ..llzzmmaa stream.  In most situations, this  is  a  bug.   This  also
       means  that  LZMA  Utils don't support decompressing concatenated ..llzzmmaa
       files.

       If there is data left after the first ..llzzmmaa stream,  xxzz  considers  the
       file  to  be  corrupt  unless ----ssiinnggllee--ssttrreeaamm was used.  This may break
       obscure scripts which have assumed that trailing garbage is ignored.

NNOOTTEESS
   CCoommpprreesssseedd oouuttppuutt mmaayy vvaarryy
       The exact compressed output produced from the same  uncompressed  input
       file may vary between XZ Utils versions even if compression options are
       identical.  This is because the encoder can be improved (faster or bet-
       ter  compression)  without  affecting  the file format.  The output can
       vary even between different builds of the same  XZ  Utils  version,  if
       different build options are used.

       The  above  means that implementing ----rrssyynnccaabbllee to create rsyncable ..xxzz
       files is not going to happen without freezing a  part  of  the  encoder
       implementation, which can then be used with ----rrssyynnccaabbllee.

   EEmmbbeeddddeedd ..xxzz ddeeccoommpprreessssoorrss
       Embedded ..xxzz decompressor implementations like XZ Embedded don't neces-
       sarily support files created with integrity _c_h_e_c_k types other than nnoonnee
       and   ccrrcc3322.    Since  the  default  is  ----cchheecckk==ccrrcc6644,  you  must  use
       ----cchheecckk==nnoonnee or ----cchheecckk==ccrrcc3322 when creating files for embedded systems.

       Outside embedded systems, all ..xxzz format decompressors support all  the
       _c_h_e_c_k  types, or at least are able to decompress the file without veri-
       fying the integrity check if the particular _c_h_e_c_k is not supported.

       XZ Embedded supports BCJ filters, but only with the default start  off-
       set.

EEXXAAMMPPLLEESS
   BBaassiiccss
       Compress  the  file _f_o_o into _f_o_o_._x_z using the default compression level
       (--66), and remove _f_o_o if compression is successful:

              xz foo

       Decompress _b_a_r_._x_z into _b_a_r and don't remove _b_a_r_._x_z even  if  decompres-
       sion is successful:

              xz -dk bar.xz

       Create  _b_a_z_._t_a_r_._x_z  with the preset --44ee (--44 ----eexxttrreemmee), which is slower
       than e.g. the default --66, but needs less  memory  for  compression  and
       decompression (48 MiB and 5 MiB, respectively):

              tar cf - baz | xz -4e > baz.tar.xz

       A mix of compressed and uncompressed files can be decompressed to stan-
       dard output with a single command:

              xz -dcf a.txt b.txt.xz c.txt d.txt.lzma > abcd.txt

   PPaarraalllleell ccoommpprreessssiioonn ooff mmaannyy ffiilleess
       On GNU and *BSD, ffiinndd(1) and xxaarrggss(1) can be used to  parallelize  com-
       pression of many files:

              find . -type f \! -name '*.xz' -print0 \
                  | xargs -0r -P4 -n16 xz -T1

       The  --PP  option  to  xxaarrggss(1) sets the number of parallel xxzz processes.
       The best value for the --nn option depends on how many files there are to
       be  compressed.   If there are only a couple of files, the value should
       probably be 1; with tens of thousands of files, 100 or even more may be
       appropriate  to  reduce  the  number of xxzz processes that xxaarrggss(1) will
       eventually create.

       The option --TT11 for xxzz is there to force  it  to  single-threaded  mode,
       because xxaarrggss(1) is used to control the amount of parallelization.

   RRoobboott mmooddee
       Calculate  how  many  bytes  have been saved in total after compressing
       multiple files:

              xz --robot --list *.xz | awk '/^totals/{print $5-$4}'

       A script may want to know that it is using new enough xxzz.  The  follow-
       ing  sshh(1)  script  checks that the version number of the xxzz tool is at
       least 5.0.0.  This method is compatible with old beta  versions,  which
       didn't support the ----rroobboott option:

              if ! eval "$(xz --robot --version 2> /dev/null)" ||
                      [ "$XZ_VERSION" -lt 50000002 ]; then
                  echo "Your xz is too old."
              fi
              unset XZ_VERSION LIBLZMA_VERSION

       Set a memory usage limit for decompression using XXZZ__OOPPTT, but if a limit
       has already been set, don't increase it:

              NEWLIM=$((123 << 20))  # 123 MiB
              OLDLIM=$(xz --robot --info-memory | cut -f3)
              if [ $OLDLIM -eq 0 -o $OLDLIM -gt $NEWLIM ]; then
                  XZ_OPT="$XZ_OPT --memlimit-decompress=$NEWLIM"
                  export XZ_OPT
              fi

   CCuussttoomm ccoommpprreessssoorr ffiilltteerr cchhaaiinnss
       The simplest use for custom filter chains is customizing a  LZMA2  pre-
       set.   This  can  be useful, because the presets cover only a subset of
       the potentially useful combinations of compression settings.

       The CompCPU columns of the tables from the descriptions of the  options
       --00  ...  --99  and  ----eexxttrreemmee  are useful when customizing LZMA2 presets.
       Here are the relevant parts collected from those two tables:

              tab(;); c c n n.  Preset;CompCPU -0;0 -1;1 -2;2 -3;3  -4;4  -5;5
              -6;6 -5e;7 -6e;8

       If  you know that a file requires somewhat big dictionary (e.g. 32 MiB)
       to compress well, but you want to compress it quicker than xxzz --88  would
       do, a preset with a low CompCPU value (e.g. 1) can be modified to use a
       bigger dictionary:

              xz --lzma2=preset=1,dict=32MiB foo.tar

       With certain files, the above command may be faster than  xxzz  --66  while
       compressing  significantly better.  However, it must be emphasized that
       only some files benefit from a big dictionary while keeping the CompCPU
       value low.  The most obvious situation, where a big dictionary can help
       a lot, is an archive containing very similar files of at  least  a  few
       megabytes  each.   The  dictionary  size has to be significantly bigger
       than any individual file to allow LZMA2 to take full advantage  of  the
       similarities between consecutive files.

       If  very high compressor and decompressor memory usage is fine, and the
       file being compressed is at least several hundred megabytes, it may  be
       useful  to  use  an  even  bigger dictionary than the 64 MiB that xxzz --99
       would use:

              xz -vv --lzma2=dict=192MiB big_foo.tar

       Using --vvvv (----vveerrbboossee ----vveerrbboossee) like in the above example can be useful
       to  see  the  memory  requirements  of the compressor and decompressor.
       Remember that using a dictionary bigger than the  size  of  the  uncom-
       pressed  file is waste of memory, so the above command isn't useful for
       small files.

       Sometimes the compression time doesn't  matter,  but  the  decompressor
       memory  usage has to be kept low e.g. to make it possible to decompress
       the file on an embedded system.  The following  command  uses  --66ee  (--66
       ----eexxttrreemmee)  as  a  base  and  sets  the dictionary to only 64 KiB.  The
       resulting file can be decompressed with XZ Embedded (that's  why  there
       is ----cchheecckk==ccrrcc3322) using about 100 KiB of memory.

              xz --check=crc32 --lzma2=preset=6e,dict=64KiB foo

       If  you  want  to  squeeze out as many bytes as possible, adjusting the
       number of literal context bits (_l_c) and number of  position  bits  (_p_b)
       can sometimes help.  Adjusting the number of literal position bits (_l_p)
       might help too, but usually _l_c and  _p_b  are  more  important.   E.g.  a
       source  code  archive  contains mostly US-ASCII text, so something like
       the following might give slightly (like 0.1 %) smaller file than xxzz --66ee
       (try also without llcc==44):

              xz --lzma2=preset=6e,pb=0,lc=4 source_code.tar

       Using  another  filter together with LZMA2 can improve compression with
       certain file types.  E.g. to compress a x86-32 or x86-64 shared library
       using the x86 BCJ filter:

              xz --x86 --lzma2 libfoo.so

       Note  that the order of the filter options is significant.  If ----xx8866 is
       specified after ----llzzmmaa22, xxzz will give an error, because there cannot be
       any  filter  after LZMA2, and also because the x86 BCJ filter cannot be
       used as the last filter in the chain.

       The Delta filter together with LZMA2 can give good results with  bitmap
       images.  It should usually beat PNG, which has a few more advanced fil-
       ters than simple delta but uses Deflate for the actual compression.

       The image has to be saved in uncompressed format, e.g. as  uncompressed
       TIFF.   The  distance parameter of the Delta filter is set to match the
       number of bytes per pixel in the image.  E.g. 24-bit RGB  bitmap  needs
       ddiisstt==33,  and  it  is also good to pass ppbb==00 to LZMA2 to accommodate the
       three-byte alignment:

              xz --delta=dist=3 --lzma2=pb=0 foo.tiff

       If multiple images have been put into a single archive (e.g. ..ttaarr), the
       Delta  filter will work on that too as long as all images have the same
       number of bytes per pixel.

SSEEEE AALLSSOO
       xxzzddeecc(1),  xxzzddiiffff(1),   xxzzggrreepp(1),   xxzzlleessss(1),   xxzzmmoorree(1),   ggzziipp(1),
       bbzziipp22(1), 77zz(1)

       XZ Utils: <http://tukaani.org/xz/>
       XZ Embedded: <http://tukaani.org/xz/embedded.html>
       LZMA SDK: <http://7-zip.org/sdk.html>



Tukaani                           2012-07-01                             XZ(1)
