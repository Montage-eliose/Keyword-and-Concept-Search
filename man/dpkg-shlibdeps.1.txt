dpkg-shlibdeps(1)               dpkg utilities               dpkg-shlibdeps(1)



NNAAMMEE
       dpkg-shlibdeps - generate shared library substvar dependencies

SSYYNNOOPPSSIISS
       ddppkkgg--sshhlliibbddeeppss [_o_p_t_i_o_n...] [--ee]_e_x_e_c_u_t_a_b_l_e [_o_p_t_i_o_n...]

DDEESSCCRRIIPPTTIIOONN
       ddppkkgg--sshhlliibbddeeppss  calculates  shared library dependencies for executables
       named in its arguments. The dependencies are added to the  substitution
       variables  file  ddeebbiiaann//ssuubbssttvvaarrss  as variable names sshhlliibbss::_d_e_p_e_n_d_e_n_c_y_-
       _f_i_e_l_d where _d_e_p_e_n_d_e_n_c_y_-_f_i_e_l_d is a  dependency  field  name.  Any  other
       variables starting with sshhlliibbss:: are removed from the file.

       ddppkkgg--sshhlliibbddeeppss  has  two  possible  sources  of information to generate
       dependency information. Either _s_y_m_b_o_l_s files or _s_h_l_i_b_s files. For  each
       binary that ddppkkgg--sshhlliibbddeeppss analyzes, it finds out the list of libraries
       that it's linked with.  Then, for each library, it looks up either  the
       _s_y_m_b_o_l_s  file,  or  the  _s_h_l_i_b_s file (if the former doesn't exist or if
       debian/shlibs.local contains the relevant dependency). Both  files  are
       supposed  to  be  provided  by  the  library package and should thus be
       available        as        /var/lib/dpkg/info/_p_a_c_k_a_g_e._s_y_m_b_o_l_s        or
       /var/lib/dpkg/info/_p_a_c_k_a_g_e._s_h_l_i_b_s.  The  package  name is identified in
       two steps: find the library file on the system  (looking  in  the  same
       directories  that  lldd..ssoo  would  use), then use ddppkkgg --SS _l_i_b_r_a_r_y_-_f_i_l_e to
       lookup the package providing the library.

   SSyymmbboollss ffiilleess
       Symbols files contain finer-grained dependency information by providing
       the  minimum  dependency  for each symbol that the library exports. The
       script tries to find a symbols file associated to a library package  in
       the following places (first match is used):

       debian/*/DEBIAN/symbols
              Shared  library  information  generated  by  the  current  build
              process that also invoked ddppkkgg--sshhlliibbddeeppss.  They are generated by
              ddppkkgg--ggeennssyymmbboollss(1).   They are only used if the library is found
              in a package's build tree. The symbols file in that  build  tree
              takes precedence over symbols files from other binary packages.

       /etc/dpkg/symbols/_p_a_c_k_a_g_e.symbols._a_r_c_h

       /etc/dpkg/symbols/_p_a_c_k_a_g_e.symbols
              Per-system  overriding  shared  library  dependency information.
              _a_r_c_h is the architecture of  the  current  system  (obtained  by
              ddppkkgg--aarrcchhiitteeccttuurree --qqDDEEBB__HHOOSSTT__AARRCCHH).

       Output from "ddppkkgg--qquueerryy ----ccoonnttrrooll--ppaatthh _p_a_c_k_a_g_e symbols"
              Package-provided  shared library dependency information.  Unless
              overridden  by  ----aaddmmiinnddiirr,   those   files   are   located   in
              /var/lib/dpkg.

       While  scanning the symbols used by all binaries, ddppkkgg--sshhlliibbddeeppss remem-
       bers the (biggest) minimal version needed for each library. At the  end
       of  the  process,  it  is  able to write out the minimal dependency for
       every library used (provided that the information of the _s_y_m_b_o_l_s  files
       are accurate).

       As   a   safe-guard   measure,   a   symbols   file   can   provide   a
       BBuuiilldd--DDeeppeennddss--PPaacckkaaggee meta-information field  and  ddppkkgg--sshhlliibbddeeppss  will
       extract  the  minimal  version required by the corresponding package in
       the BBuuiilldd--DDeeppeennddss field and use this version if it's  higher  than  the
       minimal version computed by scanning symbols.

   SShhlliibbss ffiilleess
       Shlibs  files  associate  directly  a  library to a dependency (without
       looking at the symbols). It's thus often stronger  than  really  needed
       but very safe and easy to handle.

       The  dependencies  for  a  library are looked up in several places. The
       first file providing information for the library of interest is used:

       debian/shlibs.local
              Package-local overriding shared library dependency information.

       /etc/dpkg/shlibs.override
              Per-system overriding shared library dependency information.

       debian/*/DEBIAN/shlibs
              Shared  library  information  generated  by  the  current  build
              process that also invoked ddppkkgg--sshhlliibbddeeppss.  They are only used if
              the library is found in a package's build tree. The shlibs  file
              in that build tree takes precedence over shlibs files from other
              binary packages.

       Output from "ddppkkgg--qquueerryy ----ccoonnttrrooll--ppaatthh _p_a_c_k_a_g_e shlibs"
              Package-provided shared library dependency information.   Unless
              overridden   by   ----aaddmmiinnddiirr,   those   files   are  located  in
              /var/lib/dpkg.

       /etc/dpkg/shlibs.default
              Per-system default shared library dependency information.

       The extracted dependencies are then directly used (except if  they  are
       filtered  out  because  they  have  been identified as duplicate, or as
       weaker than another dependency).

OOPPTTIIOONNSS
       ddppkkgg--sshhlliibbddeeppss interprets non-option  arguments  as  executable  names,
       just as if they'd been supplied as --ee_e_x_e_c_u_t_a_b_l_e.

       --ee_e_x_e_c_u_t_a_b_l_e
              Include   dependencies  appropriate  for  the  shared  libraries
              required by _e_x_e_c_u_t_a_b_l_e.  This option can be used multiple times.

       --ll_d_i_r_e_c_t_o_r_y
              Add _d_i_r_e_c_t_o_r_y to the list of directories to search  for  private
              shared  libraries  (since  dpkg 1.17.0). This option can be used
              multiple times.

              Note: Use this option instead  of  setting  LLDD__LLIIBBRRAARRYY__PPAATTHH,  as
              that environment variable is used to control the run-time linker
              and abusing it to set the shared library paths at build-time can
              be problematic when cross-compiling for example.

       --dd_d_e_p_e_n_d_e_n_c_y_-_f_i_e_l_d
              Add  dependencies  to  be  added  to the control file dependency
              field _d_e_p_e_n_d_e_n_c_y_-_f_i_e_l_d.  (The dependencies for  this  field  are
              placed in the variable sshhlliibbss::_d_e_p_e_n_d_e_n_c_y_-_f_i_e_l_d.)

              The  --dd_d_e_p_e_n_d_e_n_c_y_-_f_i_e_l_d  option takes effect for all executables
              after  the  option,  until  the  next  --dd_d_e_p_e_n_d_e_n_c_y_-_f_i_e_l_d.   The
              default _d_e_p_e_n_d_e_n_c_y_-_f_i_e_l_d is DDeeppeennddss.

              If the same dependency entry (or set of alternatives) appears in
              more  than  one  of  the  recognized  dependency   field   names
              PPrree--DDeeppeennddss,  DDeeppeennddss,  RReeccoommmmeennddss,  EEnnhhaanncceess  or  SSuuggggeessttss then
              ddppkkgg--sshhlliibbddeeppss will automatically remove the dependency from all
              fields  except the one representing the most important dependen-
              cies.

       --pp_v_a_r_n_a_m_e_-_p_r_e_f_i_x
              Start substitution variables  with  _v_a_r_n_a_m_e_-_p_r_e_f_i_x::  instead  of
              sshhlliibbss::.  Likewise, any existing substitution variables starting
              with _v_a_r_n_a_m_e_-_p_r_e_f_i_x:: (rather than sshhlliibbss::) are removed from  the
              the substitution variables file.

       --OO[_f_i_l_e_n_a_m_e]
              Print  substitution  variable  settings  to  standard output (or
              _f_i_l_e_n_a_m_e if specified), rather than being added to the substitu-
              tion variables file (ddeebbiiaann//ssuubbssttvvaarrss by default).

       --tt_t_y_p_e Prefer  shared  library  dependency  information  tagged for the
              given package type. If no tagged information is available, falls
              back to untagged information. The default package type is "deb".
              Shared library dependency information is tagged for a given type
              by  prefixing  it with the name of the type, a colon, and white-
              space.

       --LL_l_o_c_a_l_-_s_h_l_i_b_s_-_f_i_l_e
              Read  overriding  shared  library  dependency  information  from
              _l_o_c_a_l_-_s_h_l_i_b_s_-_f_i_l_e instead of ddeebbiiaann//sshhlliibbss..llooccaall.

       --TT_s_u_b_s_t_v_a_r_s_-_f_i_l_e
              Write  substitution  variables in _s_u_b_s_t_v_a_r_s_-_f_i_l_e; the default is
              ddeebbiiaann//ssuubbssttvvaarrss.

       --vv     Enable verbose mode. Numerous messages are displayed to  explain
              what ddppkkgg--sshhlliibbddeeppss does.

       --xx_p_a_c_k_a_g_e
              Exclude  the  package  from  the generated dependencies. This is
              useful to avoid self-dependencies for packages which provide ELF
              binaries  (executables  or library plugins) using a library con-
              tained in the same package. This option  can  be  used  multiple
              times to exclude several packages.

       --SS_p_a_c_k_a_g_e_-_b_u_i_l_d_-_d_i_r
              Look into _p_a_c_k_a_g_e_-_b_u_i_l_d_-_d_i_r first when trying to find a library.
              This is useful when the source package builds  multiple  flavors
              of  the  same  library  and  you want to ensure that you get the
              dependency from a given binary package. You can use this  option
              multiple  times:  directories  will  be  tried in the same order
              before directories of other binary packages.

       ----iiggnnoorree--mmiissssiinngg--iinnffoo
              Do not fail if dependency  information  can't  be  found  for  a
              shared  library.   Usage  of  this  option  is  discouraged, all
              libraries should provide  dependency  information  (either  with
              shlibs  files,  or  with symbols files) even if they are not yet
              used by other packages.

       ----wwaarrnniinnggss==_v_a_l_u_e
              _v_a_l_u_e is a bit field defining the set of warnings  that  can  be
              emitted  by ddppkkgg--sshhlliibbddeeppss.  Bit 0 (value=1) enables the warning
              "symbol _s_y_m used by _b_i_n_a_r_y found in none of the libraries",  bit
              1  (value=2)  enables the warning "package could avoid a useless
              dependency" and bit 2  (value=4)  enables  the  warning  "_b_i_n_a_r_y
              should  not be linked against _l_i_b_r_a_r_y".  The default _v_a_l_u_e is 3:
              the first two warnings are active by default, the  last  one  is
              not. Set _v_a_l_u_e to 7 if you want all warnings to be active.

       ----aaddmmiinnddiirr==_d_i_r
              Change  the  location of the ddppkkgg database. The default location
              is _/_v_a_r_/_l_i_b_/_d_p_k_g.

       --??, ----hheellpp
              Show the usage message and exit.

       ----vveerrssiioonn
              Show the version and exit.

DDIIAAGGNNOOSSTTIICCSS
   WWaarrnniinnggss
       Since ddppkkgg--sshhlliibbddeeppss analyzes the set of symbols used by each binary of
       the  generated  package,  it is able to emit warnings in several cases.
       They inform you of things that can be improved in the package. In  most
       cases,  those  improvements  concern  the upstream sources directly. By
       order of decreasing importance, here are the various warnings that  you
       can encounter:

       ssyymmbbooll _s_y_m uusseedd bbyy _b_i_n_a_r_y ffoouunndd iinn nnoonnee ooff tthhee lliibbrraarriieess..
              The  indicated symbol has not been found in the libraries linked
              with the binary. The _b_i_n_a_r_y is most  likely  a  library  and  it
              needs  to  be linked with an additional library during the build
              process (option --ll_l_i_b_r_a_r_y of the linker).

       _b_i_n_a_r_y ccoonnttaaiinnss aann uunnrreessoollvvaabbllee rreeffeerreennccee ttoo ssyymmbbooll _s_y_m:: iitt''ss  pprroobbaabbllyy
       aa pplluuggiinn
              The  indicated symbol has not been found in the libraries linked
              with the binary. The _b_i_n_a_r_y is most likely a plugin and the sym-
              bol  is probably provided by the program that loads this plugin.
              In theory a plugin doesn't have any SONAME but this binary  does
              have one and as such it could not be clearly identified as such.
              However the fact that the  binary  is  stored  in  a  non-public
              directory is a strong indication that's it's not a normal shared
              library. If the binary is really a plugin, then  disregard  this
              warning.  But  there's  always  the possibility that it's a real
              library and that programs linking to it are using  an  RPATH  so
              that  the  dynamic loader finds it. In that case, the library is
              broken and needs to be fixed.

       ppaacckkaaggee ccoouulldd aavvooiidd aa uusseelleessss  ddeeppeennddeennccyy  iiff  _b_i_n_a_r_y  wwaass  nnoott  lliinnkkeedd
       aaggaaiinnsstt _l_i_b_r_a_r_y ((iitt uusseess nnoonnee ooff tthhee lliibbrraarryy''ss ssyymmbboollss))
              None of the _b_i_n_a_r_i_e_s that are linked with _l_i_b_r_a_r_y use any of the
              symbols provided by the library. By fixing all the binaries, you
              would  avoid  the  dependency associated to this library (unless
              the same dependency is also generated by another library that is
              really used).

       ppaacckkaaggee  ccoouulldd  aavvooiidd  aa uusseelleessss ddeeppeennddeennccyy iiff _b_i_n_a_r_i_e_s wweerree nnoott lliinnkkeedd
       aaggaaiinnsstt _l_i_b_r_a_r_y ((tthheeyy uusseess nnoonnee ooff tthhee lliibbrraarryy''ss ssyymmbboollss))
              Exactly the same as the above warning, but  for  multiple  bina-
              ries.

       _b_i_n_a_r_y  sshhoouulldd  nnoott  bbee  lliinnkkeedd  aaggaaiinnsstt  _l_i_b_r_a_r_y  ((iitt uusseess nnoonnee ooff tthhee
       lliibbrraarryy''ss ssyymmbboollss))
              The _b_i_n_a_r_y is linked to a library that it doesn't need. It's not
              a problem but some small performance improvements in binary load
              time can be obtained by not linking this library to this binary.
              This  warning  checks the same information than the previous one
              but does it for each binary instead of doing the check  globally
              on all binaries analyzed.

   EErrrroorrss
       ddppkkgg--sshhlliibbddeeppss  will  fail  if it can't find a public library used by a
       binary or if this library  has  no  associated  dependency  information
       (either shlibs file or symbols file). A public library has a SONAME and
       is versioned (libsomething.so._X). A private  library  (like  a  plugin)
       should not have a SONAME and doesn't need to be versioned.

       ccoouullddnn''tt  ffiinndd  lliibbrraarryy  _l_i_b_r_a_r_y_-_s_o_n_a_m_e  nneeeeddeedd bbyy _b_i_n_a_r_y ((iittss RRPPAATTHH iiss
       ''_r_p_a_t_h''))
              The _b_i_n_a_r_y uses a library called _l_i_b_r_a_r_y_-_s_o_n_a_m_e but  ddppkkgg--sshhlliibb--
              ddeeppss  has  been unable to find the library.  ddppkkgg--sshhlliibbddeeppss cre-
              ates a list of directories to check  as  following:  directories
              listed  in  the  RPATH  of  the  binary,  directories  listed in
              /etc/ld.so.conf, directories added by the --ll option, directories
              listed in the LLDD__LLIIBBRRAARRYY__PPAATTHH environment variable, and standard
              public directories (/lib, /usr/lib, /lib32, /usr/lib32,  /lib64,
              /usr/lib64).  Then  it checks those directories in the package's
              build tree of the binary being analyzed, in the packages'  build
              trees  indicated with the --SS command-line option, in other pack-
              ages' build trees that contains a DEBIAN/shlibs  or  DEBIAN/sym-
              bols  file and finally in the root directory.  If the library is
              not found in any of those directories, then you get this error.

              If the library not found is in a private directory of  the  same
              package,  then you want to add the directory with --ll. If it's in
              another binary package being built, you want to make  sure  that
              the  shlibs/symbols  file of this package is already created and
              that --ll contains the appropriate directory if it also  is  in  a
              private directory.

       nnoo ddeeppeennddeennccyy iinnffoorrmmaattiioonn ffoouunndd ffoorr _l_i_b_r_a_r_y_-_f_i_l_e ((uusseedd bbyy _b_i_n_a_r_y))..
              The library needed by _b_i_n_a_r_y has been found by ddppkkgg--sshhlliibbddeeppss in
              _l_i_b_r_a_r_y_-_f_i_l_e but ddppkkgg--sshhlliibbddeeppss has  been  unable  to  find  any
              dependency  information for that library. To find out the depen-
              dency, it has tried to map the library to a Debian package  with
              the  help  of  ddppkkgg --SS _l_i_b_r_a_r_y_-_f_i_l_e.  Then it checked the corre-
              sponding shlibs and symbols files in /var/lib/dpkg/info/, and in
              the various package's build trees (debian/*/DEBIAN/).

              This failure can be caused by a bad or missing shlibs or symbols
              file in the package of the library. It might also happen if  the
              library  is  built  within  the  same  source package and if the
              shlibs files has not yet been created (in which  case  you  must
              fix debian/rules to create the shlibs before calling ddppkkgg--sshhlliibb--
              ddeeppss). Bad RPATH can also lead to the library being found  under
              a      non-canonical      name      (example:     /usr/lib/open-
              office.org/../lib/libssl.so.0.9.8   instead   of   /usr/lib/lib-
              ssl.so.0.9.8)  that's not associated to any package, ddppkkgg--sshhlliibb--
              ddeeppss tries to work around this by trying to fallback on a canon-
              ical name (using rreeaallppaatthh(3)) but it might not always work. It's
              always best to clean up the RPATH of the binary to  avoid  prob-
              lems.

              Calling  ddppkkgg--sshhlliibbddeeppss  in  verbose mode (--vv) will provide much
              more information about where it tried  to  find  the  dependency
              information.  This  might  be useful if you don't understand why
              it's giving you this error.

SSEEEE AALLSSOO
       ddeebb--sshhlliibbss(5), ddeebb--ssyymmbboollss(5), ddppkkgg--ggeennssyymmbboollss(1).



Debian Project                    2013-09-06                 dpkg-shlibdeps(1)
