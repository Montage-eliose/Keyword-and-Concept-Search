HEXDUMP(1)                BSD General Commands Manual               HEXDUMP(1)

NNAAMMEE
     hheexxdduummpp, hhdd -- ASCII, decimal, hexadecimal, octal dump

SSYYNNOOPPSSIISS
     hheexxdduummpp [--bbccCCddoovvxx] [--ee _f_o_r_m_a_t___s_t_r_i_n_g] [--ff _f_o_r_m_a_t___f_i_l_e] [--nn _l_e_n_g_t_h]
             [--ss _s_k_i_p] _f_i_l_e _._._.
     hhdd [--bbccddoovvxx] [--ee _f_o_r_m_a_t___s_t_r_i_n_g] [--ff _f_o_r_m_a_t___f_i_l_e] [--nn _l_e_n_g_t_h] [--ss _s_k_i_p]
             _f_i_l_e _._._.

DDEESSCCRRIIPPTTIIOONN
     The hheexxdduummpp utility is a filter which displays the specified files, or
     the standard input, if no files are specified, in a user specified for-
     mat.

     The options are as follows:

     --bb      _O_n_e_-_b_y_t_e _o_c_t_a_l _d_i_s_p_l_a_y.  Display the input offset in hexadecimal,
             followed by sixteen space-separated, three column, zero-filled,
             bytes of input data, in octal, per line.

     --cc      _O_n_e_-_b_y_t_e _c_h_a_r_a_c_t_e_r _d_i_s_p_l_a_y.  Display the input offset in hexadec-
             imal, followed by sixteen space-separated, three column, space-
             filled, characters of input data per line.

     --CC      _C_a_n_o_n_i_c_a_l _h_e_x_+_A_S_C_I_I _d_i_s_p_l_a_y.  Display the input offset in hexa-
             decimal, followed by sixteen space-separated, two column, hexa-
             decimal bytes, followed by the same sixteen bytes in %_p format
             enclosed in ``|'' characters.

             Calling the command hhdd implies this option.

     --dd      _T_w_o_-_b_y_t_e _d_e_c_i_m_a_l _d_i_s_p_l_a_y.  Display the input offset in hexadeci-
             mal, followed by eight space-separated, five column, zero-filled,
             two-byte units of input data, in unsigned decimal, per line.

     --ee _f_o_r_m_a_t___s_t_r_i_n_g
             Specify a format string to be used for displaying data.

     --ff _f_o_r_m_a_t___f_i_l_e
             Specify a file that contains one or more newline separated format
             strings.  Empty lines and lines whose first non-blank character
             is a hash mark (##) are ignored.

     --nn _l_e_n_g_t_h
             Interpret only _l_e_n_g_t_h bytes of input.

     --oo      _T_w_o_-_b_y_t_e _o_c_t_a_l _d_i_s_p_l_a_y.  Display the input offset in hexadecimal,
             followed by eight space-separated, six column, zero-filled, two
             byte quantities of input data, in octal, per line.

     --ss _o_f_f_s_e_t
             Skip _o_f_f_s_e_t bytes from the beginning of the input.  By default,
             _o_f_f_s_e_t is interpreted as a decimal number.  With a leading 00xx or
             00XX, _o_f_f_s_e_t is interpreted as a hexadecimal number, otherwise,
             with a leading 00, _o_f_f_s_e_t is interpreted as an octal number.
             Appending the character bb, kk, or mm to _o_f_f_s_e_t causes it to be
             interpreted as a multiple of 512, 1024, or 1048576, respectively.

     --vv      Cause hheexxdduummpp to display all input data.  Without the --vv option,
             any number of groups of output lines, which would be identical to
             the immediately preceding group of output lines (except for the
             input offsets), are replaced with a line comprised of a single
             asterisk.

     --xx      _T_w_o_-_b_y_t_e _h_e_x_a_d_e_c_i_m_a_l _d_i_s_p_l_a_y.  Display the input offset in hexa-
             decimal, followed by eight, space separated, four column, zero-
             filled, two-byte quantities of input data, in hexadecimal, per
             line.

     For each input file, hheexxdduummpp sequentially copies the input to standard
     output, transforming the data according to the format strings specified
     by the --ee and --ff options, in the order that they were specified.

   FFoorrmmaattss
     A format string contains any number of format units, separated by white-
     space.  A format unit contains up to three items: an iteration count, a
     byte count, and a format.

     The iteration count is an optional positive integer, which defaults to
     one.  Each format is applied iteration count times.

     The byte count is an optional positive integer.  If specified it defines
     the number of bytes to be interpreted by each iteration of the format.

     If an iteration count and/or a byte count is specified, a single slash
     must be placed after the iteration count and/or before the byte count to
     disambiguate them.  Any whitespace before or after the slash is ignored.

     The format is required and must be surrounded by double quote (" ")
     marks.  It is interpreted as a fprintf-style format string (see
     fprintf(3)), with the following exceptions:

           ++oo   An asterisk (*) may not be used as a field width or precision.

           ++oo   A byte count or field precision _i_s required for each ``s'' con-
               version character (unlike the fprintf(3) default which prints
               the entire string if the precision is unspecified).

           ++oo   The conversion characters ``%'', ``h'', ``l'', ``n'', ``p'' and
               ``q'' are not supported.

           ++oo   The single character escape sequences described in the C stan-
               dard are supported:

                     NUL                  \0
                     <alert character>    \a
                     <backspace>          \b
                     <form-feed>          \f
                     <newline>            \n
                     <carriage return>    \r
                     <tab>                \t
                     <vertical tab>       \v

     The hheexxdduummpp utility also supports the following additional conversion
     strings:

     __aa[ddooxx]     Display the input offset, cumulative across input files, of
                 the next byte to be displayed.  The appended characters dd, oo,
                 and xx specify the display base as decimal, octal or hexadeci-
                 mal respectively.

     __AA[ddooxx]     Identical to the __aa conversion string except that it is only
                 performed once, when all of the input data has been pro-
                 cessed.

     __cc          Output characters in the default character set.  Nonprinting
                 characters are displayed in three character, zero-padded
                 octal, except for those representable by standard escape
                 notation (see above), which are displayed as two character
                 strings.

     __pp          Output characters in the default character set.  Nonprinting
                 characters are displayed as a single ``..''.

     __uu          Output US ASCII characters, with the exception that control
                 characters are displayed using the following, lower-case,
                 names.  Characters greater than 0xff, hexadecimal, are dis-
                 played as hexadecimal strings.

                 000 NUL  001 SOH  002 STX  003 ETX  004 EOT  005 ENQ
                 006 ACK  007 BEL  008 BS   009 HT   00A LF   00B VT
                 00C FF   00D CR   00E SO   00F SI   010 DLE  011 DC1
                 012 DC2  013 DC3  014 DC4  015 NAK  016 SYN  017 ETB
                 018 CAN  019 EM   01A SUB  01B ESC  01C FS   01D GS
                 01E RS   01F US   07F DEL

     The default and supported byte counts for the conversion characters are
     as follows:

           %_c, %_p, %_u, %c       One byte counts only.

           %d, %i, %o, %u, %X, %x  Four byte default, one, two and four byte
                                   counts supported.

           %E, %e, %f, %G, %g      Eight byte default, four and twelve byte
                                   counts supported.

     The amount of data interpreted by each format string is the sum of the
     data required by each format unit, which is the iteration count times the
     byte count, or the iteration count times the number of bytes required by
     the format if the byte count is not specified.

     The input is manipulated in ``blocks'', where a block is defined as the
     largest amount of data specified by any format string.  Format strings
     interpreting less than an input block's worth of data, whose last format
     unit both interprets some number of bytes and does not have a specified
     iteration count, have the iteration count incremented until the entire
     input block has been processed or there is not enough data remaining in
     the block to satisfy the format string.

     If, either as a result of user specification or hheexxdduummpp modifying the
     iteration count as described above, an iteration count is greater than
     one, no trailing whitespace characters are output during the last itera-
     tion.

     It is an error to specify a byte count as well as multiple conversion
     characters or strings unless all but one of the conversion characters or
     strings is __aa or __AA.

     If, as a result of the specification of the --nn option or end-of-file
     being reached, input data only partially satisfies a format string, the
     input block is zero-padded sufficiently to display all available data
     (i.e., any format units overlapping the end of data will display some
     number of the zero bytes).

     Further output by such format strings is replaced by an equivalent number
     of spaces.  An equivalent number of spaces is defined as the number of
     spaces output by an ss conversion character with the same field width and
     precision as the original conversion character or conversion string but
     with any ``+'', `` '', ``#'' conversion flag characters removed, and ref-
     erencing a NULL string.

     If no format strings are specified, the default display is equivalent to
     specifying the --xx option.

EEXXIITT SSTTAATTUUSS
     The hheexxdduummpp and hhdd utilities exit 0 on success, and >0 if an error
     occurs.

EEXXAAMMPPLLEESS
     Display the input in perusal format:

           "%06.6_ao "  12/1 "%3_u "
           "\t\t" "%_p "
           "\n"

     Implement the -x option:

           "%07.7_Ax\n"
           "%07.7_ax  " 8/2 "%04x " "\n"

     Some examples for the -e option:

           # hex bytes
           % echo hello | hexdump -v -e '/1 "%02X "' ; echo
           68 65 6C 6C 6F 0A

           # same, with ASCII section
           % echo hello | hexdump -e '8/1 "%02X ""\t"" "' -e '8/1 "%c""\n"'
           68 65 6C 6C 6F 0A        hello

           # hex with preceding 'x'
           % echo hello | hexdump -v -e '"x" 1/1 "%02X" " "' ; echo
           x68 x65 x6C x6C x6F x0A

           # one hex byte per line
           % echo hello | hexdump -v -e '/1 "%02X\n"'
           68
           65
           6C
           6C
           6F
           0A

           # a table of byte#, hex, decimal, octal, ASCII
           % echo hello | hexdump -v  -e '/1  "%_ad#    "' -e '/1    "%02X hex"' -e '/1 " = %03i dec"' -e '/1 " = %03o oct"' -e '/1 " = _%c\_\n"'
           0#    68 hex = 104 dec = 150 oct = _h_
           1#    65 hex = 101 dec = 145 oct = _e_
           2#    6C hex = 108 dec = 154 oct = _l_
           3#    6C hex = 108 dec = 154 oct = _l_
           4#    6F hex = 111 dec = 157 oct = _o_
           5#    0A hex = 010 dec = 012 oct = _
           _

           # byte# & ASCII with control chars
           % echo hello | hexdump -v  -e '/1  "%_ad#  "' -e '/1 " _%_u\_\n"'
           0#   _h_
           1#   _e_
           2#   _l_
           3#   _l_
           4#   _o_
           5#   _lf_

SSEEEE AALLSSOO
     gdb(1), od(1)

BSD                            February 18, 2010                           BSD
