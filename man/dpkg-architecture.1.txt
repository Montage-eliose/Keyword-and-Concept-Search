dpkg-architecture(1)            dpkg utilities            dpkg-architecture(1)



NNAAMMEE
       dpkg-architecture  -  set  and  determine  the architecture for package
       building

SSYYNNOOPPSSIISS
       ddppkkgg--aarrcchhiitteeccttuurree [_o_p_t_i_o_n...] [_c_o_m_m_a_n_d]

DDEESSCCRRIIPPTTIIOONN
       ddppkkgg--aarrcchhiitteeccttuurree does provide a facility  to  determine  and  set  the
       build and host architecture for package building.

       The  build  architecture  is  always  determined by an external call to
       ddppkkgg(1), and can not be set at the command line.

       You can specify the host architecture by providing one or both  of  the
       options  --aa  and  --tt.  The default is determined by an external call to
       ggcccc(1), or the same as the build architecture if CCCC or gcc are both not
       available.  One  out of --aa and --tt is sufficient, the value of the other
       will be set to a usable default. Indeed, it is  often  better  to  only
       specify  one,  because  ddppkkgg--aarrcchhiitteeccttuurree  will warn you if your choice
       does not match the default.

CCOOMMMMAANNDDSS
       --ll     Print the environment variables, one each line,  in  the  format
              _V_A_R_I_A_B_L_E_=_v_a_l_u_e. This is the default action.

       --ee_d_e_b_i_a_n_-_a_r_c_h_i_t_e_c_t_u_r_e
              Check  for  equality  of  architecture  (since dpkg 1.13.13). By
              default _d_e_b_i_a_n_-_a_r_c_h_i_t_e_c_t_u_r_e  is  compared  against  the  current
              Debian architecture, being the host. This action will not expand
              the architecture wildcards.  Command finishes with an exit  sta-
              tus of 0 if matched, 1 if not matched.


       --ii_a_r_c_h_i_t_e_c_t_u_r_e_-_w_i_l_d_c_a_r_d
              Check  for  identity  of architecture by expanding _a_r_c_h_i_t_e_c_t_u_r_e_-
              _w_i_l_d_c_a_r_d as an architecture wildcard and comparing  against  the
              current  Debian architecture (since dpkg 1.13.13).  Command fin-
              ishes with an exit status of 0 if matched, 1 if not matched.

       --qq_v_a_r_i_a_b_l_e_-_n_a_m_e
              Print the value of a single variable.

       --ss     Print an export command. This can be used to set the environment
              variables using eval.

       --uu     Print a similar command to --ss but to unset all variables.

       --cc _c_o_m_m_a_n_d
              Execute  a _c_o_m_m_a_n_d in an environment which has all variables set
              to the determined value.

       --LL     Print a list of valid architecture names.

       --??, ----hheellpp
              Show the usage message and exit.

       ----vveerrssiioonn
              Show the version and exit.

OOPPTTIIOONNSS
       --aa_d_e_b_i_a_n_-_a_r_c_h_i_t_e_c_t_u_r_e
              Set the Debian architecture.

       --tt_g_n_u_-_s_y_s_t_e_m_-_t_y_p_e
              Set the GNU system type.

       --ff     Values set by existing environment variables with the same  name
              as  used by the scripts are honored (i.e. used by ddppkkgg--aarrcchhiitteecc--
              ttuurree), except if this force flag is  present.  This  allows  the
              user to override a value even when the call to ddppkkgg--aarrcchhiitteeccttuurree
              is buried in some  other  script  (for  example  ddppkkgg--bbuuiillddppaacckk--
              aaggee(1)).

TTEERRMMSS
       build machine
           The machine the package is built on.

       host machine
           The machine the package is built for.

       Debian architecture
           The  Debian architecture string, which specifies the binary tree in
           the FTP archive. Examples: i386, sparc, hurd-i386.

       architecture wildcard
           An architecture wildcard is a special architecture string that will
           match  any  real architecture being part of it. The general form is
           <kernel>-<cpu>.  Examples: linux-any, any-i386, hurd-any.

       GNU system type
           An architecture specification string consisting of two parts  sepa-
           rated  by  a  hyphen:  cpu  and  system.  Examples: i386-linux-gnu,
           sparc-linux-gnu, i386-gnu, x86_64-netbsd.

VVAARRIIAABBLLEESS
       The following variables are set by ddppkkgg--aarrcchhiitteeccttuurree:

       DDEEBB__BBUUIILLDD__AARRCCHH
           The Debian architecture of the build machine.

       DDEEBB__BBUUIILLDD__AARRCCHH__OOSS
           The Debian system name of the build machine (since dpkg 1.13.2).

       DDEEBB__BBUUIILLDD__AARRCCHH__CCPPUU
           The Debian cpu name of the build machine (since dpkg 1.13.2).

       DDEEBB__BBUUIILLDD__AARRCCHH__BBIITTSS
           The pointer size of the build machine (in bits; since dpkg 1.15.4).

       DDEEBB__BBUUIILLDD__AARRCCHH__EENNDDIIAANN
           The endianness of the build  machine  (little  /  big;  since  dpkg
           1.15.4).

       DDEEBB__BBUUIILLDD__GGNNUU__CCPPUU
           The CPU part of DDEEBB__BBUUIILLDD__GGNNUU__TTYYPPEE.

       DDEEBB__BBUUIILLDD__GGNNUU__SSYYSSTTEEMM
           The System part of DDEEBB__BBUUIILLDD__GGNNUU__TTYYPPEE.

       DDEEBB__BBUUIILLDD__GGNNUU__TTYYPPEE
           The GNU system type of the build machine.

       DDEEBB__BBUUIILLDD__MMUULLTTIIAARRCCHH
           The  clarified  GNU  system  type  of  the  build machine, used for
           filesystem paths (since dpkg 1.16.0).

       DDEEBB__HHOOSSTT__AARRCCHH
           The Debian architecture of the host machine.

       DDEEBB__HHOOSSTT__AARRCCHH__OOSS
           The Debian system name of the host machine (since dpkg 1.13.2).

       DDEEBB__HHOOSSTT__AARRCCHH__CCPPUU
           The Debian cpu name of the host machine (since dpkg 1.13.2).

       DDEEBB__HHOOSSTT__AARRCCHH__BBIITTSS
           The pointer size of the host machine (in bits; since dpkg 1.15.4).

       DDEEBB__HHOOSSTT__AARRCCHH__EENNDDIIAANN
           The endianness of the  host  machine  (little  /  big;  since  dpkg
           1.15.4).

       DDEEBB__HHOOSSTT__GGNNUU__CCPPUU
           The CPU part of DDEEBB__HHOOSSTT__GGNNUU__TTYYPPEE.

       DDEEBB__HHOOSSTT__GGNNUU__SSYYSSTTEEMM
           The System part of DDEEBB__HHOOSSTT__GGNNUU__TTYYPPEE.

       DDEEBB__HHOOSSTT__GGNNUU__TTYYPPEE
           The GNU system type of the host machine.

       DDEEBB__HHOOSSTT__MMUULLTTIIAARRCCHH
           The  clarified  GNU  system  type  of  the  host  machine, used for
           filesystem paths (since dpkg 1.16.0).

FFIILLEESS
   AArrcchhiitteeccttuurree ttaabblleess
       All these files have to be present for ddppkkgg--aarrcchhiitteeccttuurree to work. Their
       location  can  be  overridden  at runtime with the environment variable
       DDPPKKGG__DDAATTAADDIIRR.

       _/_u_s_r_/_s_h_a_r_e_/_d_p_k_g_/_c_p_u_t_a_b_l_e
              Table of known CPU names and mapping to their GNU name.

       _/_u_s_r_/_s_h_a_r_e_/_d_p_k_g_/_o_s_t_a_b_l_e
              Table of known operating system names and mapping to  their  GNU
              name.

       _/_u_s_r_/_s_h_a_r_e_/_d_p_k_g_/_t_r_i_p_l_e_t_t_a_b_l_e
              Mapping  between  Debian architecture triplets and Debian archi-
              tecture names.

   PPaacckkaaggiinngg ssuuppppoorrtt
       _/_u_s_r_/_s_h_a_r_e_/_d_p_k_g_/_a_r_c_h_i_t_e_c_t_u_r_e_._m_k
              Makefile snippet that properly sets and exports  all  the  vari-
              ables that ddppkkgg--aarrcchhiitteeccttuurree outputs (since dpkg 1.16.1).

EEXXAAMMPPLLEESS
       ddppkkgg--bbuuiillddppaacckkaaggee accepts the --aa option and passes it to ddppkkgg--aarrcchhiitteecc--
       ttuurree. Other examples:

              CC=i386-gnu-gcc dpkg-architecture -c debian/rules build

              eval `dpkg-architecture -u`

       Check if an architecture is equal to  the  current  architecture  or  a
       given one:

              dpkg-architecture -elinux-alpha

              dpkg-architecture -amips -elinux-mips

       Check  if  the current architecture or an architecture provided with --aa
       are Linux systems:

              dpkg-architecture -ilinux-any

              dpkg-architecture -ai386 -ilinux-any

   UUssaaggee iinn ddeebbiiaann//rruulleess
       The environment  variables  set  by  ddppkkgg--aarrcchhiitteeccttuurree  are  passed  to
       _d_e_b_i_a_n_/_r_u_l_e_s  as  make variables (see make documentation). However, you
       should not rely on them,  as  this  breaks  manual  invocation  of  the
       script. Instead, you should always initialize them using ddppkkgg--aarrcchhiitteecc--
       ttuurree with the --qq option. Here are some examples, which  also  show  how
       you can improve the cross compilation support in your package:

       Retrieving the GNU system type and forwarding it to ./configure:

           DEB_BUILD_GNU_TYPE ?= $(shell dpkg-architecture -qDEB_BUILD_GNU_TYPE)
           DEB_HOST_GNU_TYPE ?= $(shell dpkg-architecture -qDEB_HOST_GNU_TYPE)
           [...]
           ifeq ($(DEB_BUILD_GNU_TYPE), $(DEB_HOST_GNU_TYPE))
             confflags += --build=$(DEB_HOST_GNU_TYPE)
           else
             confflags += --build=$(DEB_BUILD_GNU_TYPE) \
                          --host=$(DEB_HOST_GNU_TYPE)
           endif
           [...]
           ./configure $(confflags)

       Doing something only for a specific architecture:

           DEB_HOST_ARCH ?= $(shell dpkg-architecture -qDEB_HOST_ARCH)

           ifeq ($(DEB_HOST_ARCH),alpha)
             [...]
           endif

       or   if   you  only  need  to  check  the  CPU  or  OS  type,  use  the
       DDEEBB__HHOOSSTT__AARRCCHH__CCPPUU or DDEEBB__HHOOSSTT__AARRCCHH__OOSS variables.

       Note that you can also rely on an external Makefile snippet to properly
       set all the variables that ddppkkgg--aarrcchhiitteeccttuurree can provide:

           include /usr/share/dpkg/architecture.mk

           ifeq ($(DEB_HOST_ARCH),alpha)
             [...]
           endif

       In  any  case,  you  should  never use ddppkkgg ----pprriinntt--aarrcchhiitteeccttuurree to get
       architecture information during a package build.

SSEEEE AALLSSOO
       ddppkkgg--bbuuiillddppaacckkaaggee(1), ddppkkgg--ccrroossss(1).



Debian Project                    2013-03-28              dpkg-architecture(1)
