dpkg-source(1)                  dpkg utilities                  dpkg-source(1)



NNAAMMEE
       dpkg-source - Debian source package (.dsc) manipulation tool

SSYYNNOOPPSSIISS
       ddppkkgg--ssoouurrccee [_o_p_t_i_o_n...] _c_o_m_m_a_n_d

DDEESSCCRRIIPPTTIIOONN
       ddppkkgg--ssoouurrccee packs and unpacks Debian source archives.

       None  of these commands allow multiple options to be combined into one,
       and they do not allow the value for an option to be specified in a sep-
       arate argument.

CCOOMMMMAANNDDSS
       --xx _f_i_l_e_n_a_m_e..ddsscc [_o_u_t_p_u_t_-_d_i_r_e_c_t_o_r_y]
              Extract  a  source package. One non-option argument must be sup-
              plied, the name of the Debian source control  file  (..ddsscc).   An
              optional  second  non-option argument may be supplied to specify
              the directory to extract the source package to,  this  must  not
              exist.  If  no output directory is specified, the source package
              is extracted into a directory  named  _s_o_u_r_c_e-_v_e_r_s_i_o_n  under  the
              current working directory.

              ddppkkgg--ssoouurrccee  will  read the names of the other file(s) making up
              the source package from the control file; they are assumed to be
              in the same directory as the ..ddsscc.

              The  files  in the extracted package will have their permissions
              and ownerships set to those which would have  been  expected  if
              the  files and directories had simply been created - directories
              and executable files will be 0777 and plain files will be  0666,
              both  modified by the extractors' umask; if the parent directory
              is setgid then the extracted directories will be  too,  and  all
              the files and directories will inherit its group ownership.

              If the source package uses a non-standard format (currently this
              means all formats except "1.0"), its  name  will  be  stored  in
              ddeebbiiaann//ssoouurrccee//ffoorrmmaatt  so that the following builds of the source
              package use the same format by default.


       --bb _d_i_r_e_c_t_o_r_y [_f_o_r_m_a_t_-_s_p_e_c_i_f_i_c_-_p_a_r_a_m_e_t_e_r_s]
              Build a source package. The first non-option argument  is  taken
              as  the  name  of the directory containing the debianized source
              tree (i.e. with a debian sub-directory and maybe changes to  the
              original files).  Depending on the source package format used to
              build the package, additional parameters might be accepted.

              ddppkkgg--ssoouurrccee will build the source package with the first  format
              found in this ordered list: the format indicated with the _-_-_f_o_r_-
              _m_a_t   command   line   option,   the   format    indicated    in
              ddeebbiiaann//ssoouurrccee//ffoorrmmaatt, "1.0". The fallback to "1.0" is deprecated
              and will be removed at some point  in  the  future,  you  should
              always  document the desired source format in ddeebbiiaann//ssoouurrccee//ffoorr--
              mmaatt.  See  section  SSOOUURRCCEE  PPAACCKKAAGGEE  FFOORRMMAATTSS  for  an  extensive
              description of the various source package formats.


       ----pprriinntt--ffoorrmmaatt _d_i_r_e_c_t_o_r_y
              Print  the  source format that would be used to build the source
              package if ddppkkgg--ssoouurrccee --bb _d_i_r_e_c_t_o_r_y was called (in the same con-
              ditions and with the same parameters).


       ----bbeeffoorree--bbuuiilldd _d_i_r_e_c_t_o_r_y
              Run  the  corresponding  hook of the source package format. This
              hook is called before any build of the package  (ddppkkgg--bbuuiillddppaacckk--
              aaggee  calls  it  very early even before ddeebbiiaann//rruulleess cclleeaann). This
              command is idempotent and can be called multiple times. Not  all
              source  formats implement something in this hook, and those that
              do usually prepare the source tree for the build for example  by
              ensuring that the Debian patches are applied.


       ----aafftteerr--bbuuiilldd _d_i_r_e_c_t_o_r_y
              Run  the  corresponding  hook of the source package format. This
              hook is called after any build of the package (ddppkkgg--bbuuiillddppaacckkaaggee
              calls  it  last).  This  command is idempotent and can be called
              multiple times. Not all source formats  implement  something  in
              this  hook,  and  those  that  do  usually  use  it to undo what
              ----bbeeffoorree--bbuuiilldd has done.


       ----ccoommmmiitt [_d_i_r_e_c_t_o_r_y] ...
              Record changes in the source tree unpacked  in  _d_i_r_e_c_t_o_r_y.  This
              command  can  take  supplementary  parameters  depending  on the
              source format.  It will error out for formats where this  opera-
              tion doesn't mean anything.


       --??, ----hheellpp
              Show the usage message and exit.

       ----vveerrssiioonn
              Show the version and exit.

OOPPTTIIOONNSS
   GGeenneerriicc bbuuiilldd ooppttiioonnss
       --cc_c_o_n_t_r_o_l_-_f_i_l_e
              Specifies the main source control file to read information from.
              The default is ddeebbiiaann//ccoonnttrrooll.  If given with relative  pathname
              this  is  interpreted  starting  at  the source tree's top level
              directory.

       --ll_c_h_a_n_g_e_l_o_g_-_f_i_l_e
              Specifies the changelog  file  to  read  information  from.  The
              default  is  ddeebbiiaann//cchhaannggeelloogg.   If given with relative pathname
              this is interpreted starting at  the  source  tree's  top  level
              directory.

       --FF_c_h_a_n_g_e_l_o_g_-_f_o_r_m_a_t
              Specifies   the   format   of   the   changelog.  See  ddppkkgg--ppaarr--
              sseecchhaannggeelloogg(1) for information about alternative formats.

       ----ffoorrmmaatt==_v_a_l_u_e
              Use the given format for building the source  package.  It  does
              override any format given in ddeebbiiaann//ssoouurrccee//ffoorrmmaatt.

       --VV_n_a_m_e==_v_a_l_u_e
              Set an output substitution variable.  See ddeebb--ssuubbssttvvaarrss(5) for a
              discussion of output substitution.

       --TT_s_u_b_s_t_v_a_r_s_-_f_i_l_e
              Read substitution variables in _s_u_b_s_t_v_a_r_s_-_f_i_l_e; the default is to
              not  read  any  file.  This option can be used multiple times to
              read substitution variables from multiple files.

       --DD_f_i_e_l_d==_v_a_l_u_e
              Override or add an output control file field.

       --UU_f_i_e_l_d
              Remove an output control file field.

       --ZZ_c_o_m_p_r_e_s_s_i_o_n, ----ccoommpprreessssiioonn=_c_o_m_p_r_e_s_s_i_o_n
              Specify the compression to use for created files  (tarballs  and
              diffs).   Note that this option will not cause existing tarballs
              to be recompressed, it only affects new files. Supported  values
              are:  _g_z_i_p, _b_z_i_p_2, _l_z_m_a and _x_z.  _g_z_i_p is the default. _x_z is only
              supported since dpkg 1.15.5.

       --zz_l_e_v_e_l, ----ccoommpprreessssiioonn--lleevveell=_l_e_v_e_l
              Compression level to use. As with --ZZ it only affects newly  cre-
              ated  files.  Supported values are: _1 to _9, _b_e_s_t, and _f_a_s_t.  The
              default is _9 for gzip and bzip2, _6 for xz and lzma.

       --ii[_r_e_g_e_x], ----ddiiffff--iiggnnoorree[=_r_e_g_e_x]
              You may specify a perl regular expression  to  match  files  you
              want  filtered out of the list of files for the diff. (This list
              is generated by a find command.) (If the source package is being
              built  as  a  version  3 source package using a VCS, this can be
              used to ignore uncommited changes on specific files. Using  -i.*
              will ignore all of them.)

              The  --ii  option  by  itself  enables this setting with a default
              regex (preserving any modification to the default regex done  by
              a  previous  use  of  ----eexxtteenndd--ddiiffff--iiggnnoorree) that will filter out
              control files and directories of the most common  revision  con-
              trol  systems,  backup  and  swap files and Libtool build output
              directories. There can only be one active regex, of multiple  --ii
              options only the last one will take effect.

              This  is  very  helpful in cutting out extraneous files that get
              included in the diff, e.g. if you  maintain  your  source  in  a
              revision  control  system  and want to use a checkout to build a
              source package without including the additional files and direc-
              tories  that  it  will  usually  contain (e.g. CVS/, .cvsignore,
              .svn/). The default regex is already very exhaustive, but if you
              need to replace it, please note that by default it can match any
              part of a path, so if you want to match the begin of a  filename
              or  only  full filenames, you will need to provide the necessary
              anchors (e.g. '(^|/)', '($|/)') yourself.

       ----eexxtteenndd--ddiiffff--iiggnnoorree=_r_e_g_e_x
              The perl regular expression specified will  extend  the  default
              value  used  by ----ddiiffff--iiggnnoorree and its current value (if set). It
              does this by concatenating "||_r_e_g_e_x" to the existing value.  This
              option  is convenient to use in ddeebbiiaann//ssoouurrccee//ooppttiioonnss to exclude
              some auto-generated files from the automatic patch generation.

       --II[_f_i_l_e_-_p_a_t_t_e_r_n], ----ttaarr--iiggnnoorree[=_f_i_l_e_-_p_a_t_t_e_r_n]
              If this option is specified,  the  pattern  will  be  passed  to
              ttaarr(1)'s  ----eexxcclluuddee  option  when  it  is  called  to generate a
              .orig.tar or .tar file. For example, --IICVS will  make  tar  skip
              over  CVS directories when generating a .tar.gz file. The option
              may be repeated multiple times  to  list  multiple  patterns  to
              exclude.

              --II by itself adds default ----eexxcclluuddee options that will filter out
              control files and directories of the most common  revision  con-
              trol  systems,  backup  and  swap files and Libtool build output
              directories.

       NNoottee:: While they have similar purposes, --ii and --II have  very  different
       syntax  and  semantics.  --ii can only be specified once and takes a perl
       compatible regular expression which is matched against the  full  rela-
       tive  path  of  each  file. --II can specified multiple times and takes a
       filename pattern with shell wildcards.  The pattern is applied  to  the
       full  relative path but also to each part of the path individually. The
       exact semantic of tar's ----eexxcclluuddee option is somewhat  complicated,  see
       https://www.gnu.org/software/tar/manual/tar.html#wildcards  for  a full
       documentation.

       The default regex and patterns for both options can be seen in the out-
       put of the ----hheellpp command.

   GGeenneerriicc eexxttrraacctt ooppttiioonnss
       ----nnoo--ccooppyy
              Do not copy original tarballs near the extracted source package.

       ----nnoo--cchheecckk
              Do not check signatures and checksums before unpacking.

       ----rreeqquuiirree--vvaalliidd--ssiiggnnaattuurree
              Refuse  to  unpack  the  source package if it doesn't contain an
              OpenPGP signature that can be verified either  with  the  user's
              _t_r_u_s_t_e_d_k_e_y_s_._g_p_g keyring, one of the vendor-specific keyrings, or
              one      of       the       official       Debian       keyrings
              (_/_u_s_r_/_s_h_a_r_e_/_k_e_y_r_i_n_g_s_/_d_e_b_i_a_n_-_k_e_y_r_i_n_g_._g_p_g                      and
              _/_u_s_r_/_s_h_a_r_e_/_k_e_y_r_i_n_g_s_/_d_e_b_i_a_n_-_m_a_i_n_t_a_i_n_e_r_s_._g_p_g).


SSOOUURRCCEE PPAACCKKAAGGEE FFOORRMMAATTSS
       If you don't know what source format to use, you should  probably  pick
       either      "3.0      (quilt)"      or      "3.0     (native)".     See
       https://wiki.debian.org/Projects/DebSrc3.0  for  information   on   the
       deployment of those formats within Debian.


   FFoorrmmaatt:: 11..00
       A source package in this format consists either of a ..oorriigg..ttaarr..ggzz asso-
       ciated to a ..ddiiffff..ggzz or a single ..ttaarr..ggzz (in that case the  package  is
       said to be _n_a_t_i_v_e).

       EExxttrraaccttiinngg

       Extracting  a  native package is a simple extraction of the single tar-
       ball in the target directory. Extracting a non-native package  is  done
       by  first  unpacking  the ..oorriigg..ttaarr..ggzz and then applying the patch con-
       tained in the ..ddiiffff..ggzz file. The timestamp  of  all  patched  files  is
       reset  to  the extraction time of the source package (this avoids time-
       stamp skews leading to problems when autogenerated files are  patched).
       The  diff  can  create new files (the whole debian directory is created
       that way) but can't remove files (empty files will be left over).

       BBuuiillddiinngg

       Building a native package is just creating a single  tarball  with  the
       source directory. Building a non-native package involves extracting the
       original tarball in a separate ".orig" directory and  regenerating  the
       ..ddiiffff..ggzz  by  comparing  the  source  package  _d_i_r_e_c_t_o_r_y with the .orig
       directory.

       BBuuiilldd ooppttiioonnss ((wwiitthh --bb))::

       If a second non-option argument is supplied it should be  the  name  of
       the  original  source  directory  or tarfile or the empty string if the
       package is a Debian-specific one and so has no Debianisation diffs.  If
       no second argument is supplied then ddppkkgg--ssoouurrccee will look for the orig-
       inal source tarfile _p_a_c_k_a_g_e___u_p_s_t_r_e_a_m_-_v_e_r_s_i_o_n..oorriigg..ttaarr..ggzz or the  origi-
       nal source directory _d_i_r_e_c_t_o_r_y..oorriigg depending on the --ssXX arguments.

       --ssaa,  --sspp,  --sskk,  --ssuu  and  --ssrr will not overwrite existing tarfiles or
       directories. If this is desired then --ssAA, --ssPP, --ssKK, --ssUU and --ssRR  should
       be used instead.

       --sskk    Specifies to expect the original source as a tarfile, by default
              _p_a_c_k_a_g_e___u_p_s_t_r_e_a_m_-_v_e_r_s_i_o_n..oorriigg..ttaarr.._e_x_t_e_n_s_i_o_n.  It will leave this
              original source in place as a tarfile, or copy it to the current
              directory if  it  isn't  already  there.  The  tarball  will  be
              unpacked into _d_i_r_e_c_t_o_r_y..oorriigg for the generation of the diff.

       --sspp    Like --sskk but will remove the directory again afterwards.

       --ssuu    Specifies  that  the original source is expected as a directory,
              by default _p_a_c_k_a_g_e--_u_p_s_t_r_e_a_m_-_v_e_r_s_i_o_n..oorriigg  and  ddppkkgg--ssoouurrccee  will
              create a new original source archive from it.

       --ssrr    Like --ssuu but will remove that directory after it has been used.

       --ssss    Specifies that the original source is available both as a direc-
              tory and as a tarfile. ddppkkgg--ssoouurrccee will  use  the  directory  to
              create  the  diff,  but  the  tarfile  to create the ..ddsscc.  This
              option must be used with care - if the directory and tarfile  do
              not match a bad source archive will be generated.

       --ssnn    Specifies to not look for any original source, and to not gener-
              ate a diff.  The second argument, if supplied, must be the empty
              string.  This  is used for Debian-specific packages which do not
              have a separate upstream source and therefore have no debianisa-
              tion diffs.

       --ssaa or --ssAA
              Specifies  to  look for the original source archive as a tarfile
              or as a directory - the second argument, if any, may be  either,
              or  the  empty  string  (this is equivalent to using --ssnn).  If a
              tarfile is found it will unpack it to create the diff and remove
              it  afterwards  (this  is  equivalent to --sspp); if a directory is
              found it will pack it to create the original source  and  remove
              it  afterwards  (this is equivalent to --ssrr); if neither is found
              it will assume that the package has no debianisation diffs, only
              a  straightforward  source  archive (this is equivalent to --ssnn).
              If both are found then ddppkkgg--ssoouurrccee will  ignore  the  directory,
              overwriting it, if --ssAA was specified (this is equivalent to --ssPP)
              or raise an error if --ssaa was specified.  --ssAA is the default.

       ----aabboorrtt--oonn--uuppssttrreeaamm--cchhaannggeess
              The process fails if the  generated  diff  contains  changes  to
              files  outside  of  the debian sub-directory. This option is not
              allowed  in   ddeebbiiaann//ssoouurrccee//ooppttiioonnss   but   can   be   used   in
              ddeebbiiaann//ssoouurrccee//llooccaall--ooppttiioonnss.

              EExxttrraacctt ooppttiioonnss ((wwiitthh --xx))::

              In all cases any existing original source tree will be removed.

       --sspp    Used  when  extracting then the original source (if any) will be
              left as a tarfile. If it is not already located in  the  current
              directory  or if an existing but different file is there it will
              be copied there.  (TThhiiss iiss tthhee ddeeffaauulltt).

       --ssuu    Unpacks the original source tree.

       --ssnn    Ensures that the original source is neither copied to  the  cur-
              rent  directory  nor unpacked. Any original source tree that was
              in the current directory is still removed.

       All the --ss_X options are mutually exclusive. If you  specify  more  than
       one only the last one will be used.

       ----sskkiipp--ddeebbiiaanniizzaattiioonn
              Skips  application  of  the  debian  diff on top of the upstream
              sources.

   FFoorrmmaatt:: 22..00
       Also known as wig&pen. This format is not recommended  for  wide-spread
       usage,  the  format  "3.0  (quilt)"  replaces it. Wig&pen was the first
       specification of a new-generation source package format.

       The behaviour of this format is the same as the  "3.0  (quilt)"  format
       except  that  it  doesn't use an explicit list of patches. All files in
       ddeebbiiaann//ppaattcchheess// matching the perl regular  expression  [[\\ww--]]++  must  be
       valid patches: they are applied at extraction time.

       When  building  a new source package, any change to the upstream source
       is stored in a patch named zzzz__ddeebbiiaann--ddiiffff--aauuttoo.

   FFoorrmmaatt:: 33..00 ((nnaattiivvee))
       This format is an extension of the native package format as defined  in
       the  1.0 format. It supports all compression methods and will ignore by
       default any VCS specific files and directories as well as  many  tempo-
       rary  files  (see  default  value associated to --II option in the ----hheellpp
       output).

   FFoorrmmaatt:: 33..00 ((qquuiilltt))
       A source package in this format contains at least an  original  tarball
       (..oorriigg..ttaarr.._e_x_t where _e_x_t can be ggzz, bbzz22, llzzmmaa and xxzz) and a debian tar-
       ball (..ddeebbiiaann..ttaarr.._e_x_t). It can also contain  additional  original  tar-
       balls  (..oorriigg--_c_o_m_p_o_n_e_n_t..ttaarr.._e_x_t).   _c_o_m_p_o_n_e_n_t can only contain alphanu-
       meric characters and hyphens ("-").

       EExxttrraaccttiinngg

       The main original tarball is extracted first, then all additional orig-
       inal tarballs are extracted in subdirectories named after the _c_o_m_p_o_n_e_n_t
       part of their filename (any pre-existing directory  is  replaced).  The
       debian  tarball is extracted on top of the source directory after prior
       removal of any pre-existing ddeebbiiaann directory. Note that the debian tar-
       ball must contain a ddeebbiiaann sub-directory but it can also contain binary
       files outside of that directory (see ----iinncclluuddee--bbiinnaarriieess option).

       All    patches    listed     in     ddeebbiiaann//ppaattcchheess//ddeebbiiaann..sseerriieess     or
       ddeebbiiaann//ppaattcchheess//sseerriieess are then applied.  If the former file is used and
       the latter one doesn't exist (or is a  symlink),  then  the  latter  is
       replaced  with a symlink to the former. This is meant to simplify usage
       of qquuiilltt to  manage  the  set  of  patches.  Note  however  that  while
       ddppkkgg--ssoouurrccee  parses  correctly  series files with explicit options used
       for patch application (stored on each line after the patch filename and
       one  or  more  spaces),  it does ignore those options and always expect
       patches that can be applied with the --pp11 option of ppaattcchh. It will  thus
       emit a warning when it encounters such options, and the build is likely
       to fail.

       Contrary to qquuiilltt's default behaviour, patches are  expected  to  apply
       without  any  fuzz.  When that is not the case, you should refresh such
       patches with qquuiilltt, or ddppkkgg--ssoouurrccee will error out while trying to apply
       them.

       Similarly  to  qquuiilltt's  default behaviour, the patches can remove files
       too.

       The file ..ppcc//aapppplliieedd--ppaattcchheess is  created  if  some  patches  have  been
       applied during the extraction.

       BBuuiillddiinngg

       All original tarballs found in the current directory are extracted in a
       temporary directory by following the same logic as for the unpack,  the
       debian  directory  is  copied  over in the temporary directory, and all
       patches  except  the   automatic   patch   (ddeebbiiaann--cchhaannggeess--_v_e_r_s_i_o_n   or
       ddeebbiiaann--cchhaannggeess,  depending  on  ----ssiinnggllee--ddeebbiiaann--ppaattcchh) are applied. The
       temporary directory is compared to the source package  directory.  When
       the  diff is non-empty, the build fails unless ----ssiinnggllee--ddeebbiiaann--ppaattcchh or
       ----aauuttoo--ccoommmmiitt has been used, in which case the diff is  stored  in  the
       automatic  patch.   If  the  automatic  patch  is created/deleted, it's
       added/removed from the series file and from the qquuiilltt metadata.

       Any change on a binary file is not representable in  a  diff  and  will
       thus  lead  to  a failure unless the maintainer deliberately decided to
       include that modified binary file in the debian tarball (by listing  it
       in  ddeebbiiaann//ssoouurrccee//iinncclluuddee--bbiinnaarriieess).  The  build  will  also fail if it
       finds binary files in the debian sub-directory unless  they  have  been
       whitelisted through ddeebbiiaann//ssoouurrccee//iinncclluuddee--bbiinnaarriieess.

       The  updated debian directory and the list of modified binaries is then
       used to generate the debian tarball.

       The automatically generated diff doesn't include changes  on  VCS  spe-
       cific  files as well as many temporary files (see default value associ-
       ated to --ii option in the ----hheellpp output). In particular, the ..ppcc  direc-
       tory used by qquuiilltt is ignored during generation of the automatic patch.

       Note:  ddppkkgg--ssoouurrccee ----bbeeffoorree--bbuuiilldd (and --bb) will ensure that all patches
       listed in the series file are applied so that a  package  build  always
       has  all  patches  applied.  It  does this by finding unapplied patches
       (they are listed in the sseerriieess file but  not  in  ..ppcc//aapppplliieedd--ppaattcchheess),
       and  if  the  first patch in that set can be applied without errors, it
       will apply them all. The option ----nnoo--pprreeppaarraattiioonn can be used to disable
       this behavior.


       RReeccoorrddiinngg cchhaannggeess

       ----ccoommmmiitt [_d_i_r_e_c_t_o_r_y] [_p_a_t_c_h_-_n_a_m_e] [_p_a_t_c_h_-_f_i_l_e]
              Generates  a  patch  corresponding to the local changes that are
              not managed by the qquuiilltt patch system and integrates it  in  the
              patch  system under the name _p_a_t_c_h_-_n_a_m_e. If the name is missing,
              it will be asked interactively. If _p_a_t_c_h_-_f_i_l_e is  given,  it  is
              used  as  the  patch corresponding to the local changes to inte-
              grate. Once integrated, an editor is launched so  that  you  can
              edit the meta-information in the patch header.

              Passing  _p_a_t_c_h_-_f_i_l_e  is mainly useful after a build failure that
              pre-generated this file, and on this ground the  given  file  is
              removed  after integration. Note also that the changes contained
              in the patch file must already be applied on the tree  and  that
              the  files  modified  by  the  patch must not have supplementary
              unrecorded changes.

              If the patch generation detects modified binary files, they will
              be automatically added to ddeebbiiaann//ssoouurrccee//iinncclluuddee--bbiinnaarriieess so that
              they end up in the  debian  tarball  (exactly  like  ddppkkgg--ssoouurrccee
              ----iinncclluuddee--bbiinnaarriieess --bb would do).

       BBuuiilldd ooppttiioonnss

       ----aallllooww--vveerrssiioonn--ooff--qquuiilltt--ddbb==_v_e_r_s_i_o_n
              Allow  ddppkkgg--ssoouurrccee to build the source package if the version of
              the qquuiilltt metadata is the one  specified,  even  if  ddppkkgg--ssoouurrccee
              doesn't know about it. Effectively this says that the given ver-
              sion of the qquuiilltt metadata is compatible with the version 2 that
              ddppkkgg--ssoouurrccee  currently  supports. The version of the qquuiilltt meta-
              data is stored in ..ppcc//..vveerrssiioonn.

       ----iinncclluuddee--rreemmoovvaall
              Do not ignore removed files and include them  in  the  automati-
              cally generated patch.

       ----iinncclluuddee--ttiimmeessttaammpp
              Include timestamp in the automatically generated patch.

       ----iinncclluuddee--bbiinnaarriieess
              Add  all  modified binaries in the debian tarball. Also add them
              to ddeebbiiaann//ssoouurrccee//iinncclluuddee--bbiinnaarriieess: they will be added by default
              in subsequent builds and this option is thus no more needed.

       ----nnoo--pprreeppaarraattiioonn
              Do  not  try to prepare the build tree by applying patches which
              are apparently unapplied.

       ----ssiinnggllee--ddeebbiiaann--ppaattcchh
              Use       ddeebbiiaann//ppaattcchheess//ddeebbiiaann--cchhaannggeess        instead        of
              ddeebbiiaann//ppaattcchheess//ddeebbiiaann--cchhaannggeess--_v_e_r_s_i_o_n  for the name of the auto-
              matic patch generated during build. This option is  particularly
              useful  when  the package is maintained in a VCS and a patch set
              can't reliably be  generated.  Instead  the  current  diff  with
              upstream should be stored in a single patch. The option would be
              put in ddeebbiiaann//ssoouurrccee//llooccaall--ooppttiioonnss and would be accompanied by a
              ddeebbiiaann//ssoouurrccee//llooccaall--ppaattcchh--hheeaaddeerr  file explaining how the Debian
              changes can be best reviewed, for example in  the  VCS  that  is
              used.

       ----ccrreeaattee--eemmppttyy--oorriigg
              Automatically  create the main original tarball as empty if it's
              missing and if there are supplementary original  tarballs.  This
              option  is  meant  to  be used when the source package is just a
              bundle of multiple upstream software and where there's no "main"
              software.

       ----nnoo--uunnaappppllyy--ppaattcchheess,, ----uunnaappppllyy--ppaattcchheess
              By  default,  ddppkkgg--ssoouurrccee will automatically unapply the patches
              in  the  ----aafftteerr--bbuuiilldd  hook  if  it  did  apply   them   during
              ----bbeeffoorree--bbuuiilldd. Those options allow you to forcefully disable or
              enable the patch unapplication process. Those options  are  only
              allowed  in  ddeebbiiaann//ssoouurrccee//llooccaall--ooppttiioonnss  so  that all generated
              source packages have the same behavior by default.

       ----aabboorrtt--oonn--uuppssttrreeaamm--cchhaannggeess
              The process fails if an automatic patch has been generated. This
              option  can  be  used  to  ensure that all changes were properly
              recorded in separate qquuiilltt patches prior to the  source  package
              build.  This  option is not allowed in ddeebbiiaann//ssoouurrccee//ooppttiioonnss but
              can be used in ddeebbiiaann//ssoouurrccee//llooccaall--ooppttiioonnss.

       ----aauuttoo--ccoommmmiitt
              The process doesn't fail if an automatic patch has  been  gener-
              ated, instead it's immediately recorded in the qquuiilltt series.


       EExxttrraacctt ooppttiioonnss

       ----sskkiipp--ddeebbiiaanniizzaattiioonn
              Skips  extraction  of  the debian tarball on top of the upstream
              sources.

       ----sskkiipp--ppaattcchheess
              Do not apply patches at the end of the extraction.

   FFoorrmmaatt:: 33..00 ((ccuussttoomm))
       This format is special. It doesn't represent a real source package for-
       mat but can be used to create source packages with arbitrary files.

       BBuuiilldd ooppttiioonnss

       All  non-option arguments are taken as files to integrate in the gener-
       ated source package. They must exist and are preferably in the  current
       directory. At least one file must be given.

       ----ttaarrggeett--ffoorrmmaatt==_v_a_l_u_e
              RReeqquuiirreedd.  Defines the real format of the generated source pack-
              age.  The generated .dsc file will contain  this  value  in  its
              FFoorrmmaatt field and not "3.0 (custom)".

   FFoorrmmaatt:: 33..00 ((ggiitt))
       This format is experimental.

       A  source  package  in this format consists of a single bundle of a git
       repository ..ggiitt to hold the source of a package.  There may also  be  a
       ..ggiittsshhaallllooww file listing revisions for a shallow git clone.

       EExxttrraaccttiinngg

       The  bundle  is cloned as a git repository to the target directory.  If
       there is a gitshallow file, it is installed  as  `.git/shallow`  inside
       the cloned git repository.

       Note  that  by  default  the  new  repository will have the same branch
       checked out that was checked out in  the  original  source.  (Typically
       "master",  but it could be anything.) Any other branches will be avail-
       able under `remotes/origin/`.

       BBuuiillddiinngg

       Before going any further, some checks are done to ensure that we  don't
       have any non-ignored uncommitted changes.

       ggiitt--bbuunnddllee(1)  is  used to generate a bundle of the git repository.  By
       default, all branches and tags in the repository are  included  in  the
       bundle.

       BBuuiilldd ooppttiioonnss

       ----ggiitt--rreeff==_r_e_f
              Allows  specifying  a  git ref to include in the git bundle. Use
              disables the default behavior  of  including  all  branches  and
              tags.  May  be specified multiple times. The _r_e_f can be the name
              of a branch or tag to include. It may also be any parameter that
              can  be  passed to ggiitt--rreevv--lliisstt(1). For example, to include only
              the master branch, use ----ggiitt--rreeff==master. To include all tags and
              branches,  except  for  the  private branch, use ----ggiitt--rreeff==--all
              ----ggiitt--rreeff==^private

       ----ggiitt--ddeepptthh==_n_u_m_b_e_r
              Creates a shallow clone with a history truncated to  the  speci-
              fied number of revisions.

   FFoorrmmaatt:: 33..00 ((bbzzrr))
       This  format  is experimental. It generates a single tarball containing
       the bzr repository.

       EExxttrraaccttiinngg

       The tarball is unpacked and then bzr is used to  checkout  the  current
       branch.

       BBuuiillddiinngg

       Before  going any further, some checks are done to ensure that we don't
       have any non-ignored uncommitted changes.

       Then the VCS specific part of the source directory is copied over to  a
       temporary  directory.  Before  this  temporary directory is packed in a
       tarball, various cleanup are done to save space.

DDIIAAGGNNOOSSTTIICCSS
   nnoo ssoouurrccee ffoorrmmaatt ssppeecciiffiieedd iinn ddeebbiiaann//ssoouurrccee//ffoorrmmaatt
       The file ddeebbiiaann//ssoouurrccee//ffoorrmmaatt should  always  exist  and  indicate  the
       desired  source  format.  For  backwards compatibility, format "1.0" is
       assumed when the file doesn't exist but you should not rely on this: at
       some point in the future ddppkkgg--ssoouurrccee will be modified to fail when that
       file doesn't exist.

       The rationale is that format "1.0" is no longer the recommended format,
       you  should  usually pick one of the newer formats ("3.0 (quilt)", "3.0
       (native)") but ddppkkgg--ssoouurrccee will not do this automatically for you.   If
       you want to continue using the old format, you should be explicit about
       it and put "1.0" in ddeebbiiaann//ssoouurrccee//ffoorrmmaatt.

   tthhee ddiiffff mmooddiiffiieess tthhee ffoolllloowwiinngg uuppssttrreeaamm ffiilleess
       When using source format "1.0" it is  usually  a  bad  idea  to  modify
       upstream files directly as the changes end up hidden and mostly undocu-
       mented in the .diff.gz file. Instead you should store your  changes  as
       patches  in the debian directory and apply them at build-time. To avoid
       this complexity you can also use the format "3.0 (quilt)"  that  offers
       this natively.

   ccaannnnoott rreepprreesseenntt cchhaannggee ttoo _f_i_l_e
       Changes  to  upstream  sources are usually stored with patch files, but
       not all changes can be represented with patches: they  can  only  alter
       the content of plain text files. If you try replacing a file with some-
       thing of a different type (for example replacing a plain  file  with  a
       symlink or a directory), you will get this error message.

   nneewwllyy ccrreeaatteedd eemmppttyy ffiillee _f_i_l_e wwiillll nnoott bbee rreepprreesseenntteedd iinn ddiiffff
       Empty  files can't be created with patch files. Thus this change is not
       recorded in the source package and you are warned about it.

   eexxeeccuuttaabbllee mmooddee _p_e_r_m_s ooff _f_i_l_e wwiillll nnoott bbee rreepprreesseenntteedd iinn ddiiffff
       Patch files do not record permissions of files and thus executable per-
       missions are not stored in the source package. This warning reminds you
       of that fact.

   ssppeecciiaall mmooddee _p_e_r_m_s ooff _f_i_l_e wwiillll nnoott bbee rreepprreesseenntteedd iinn ddiiffff
       Patch files do not record permissions of files and thus  modified  per-
       missions are not stored in the source package. This warning reminds you
       of that fact.

FFIILLEE FFOORRMMAATTSS
   ddeebbiiaann//ssoouurrccee//ffoorrmmaatt
       This file contains on a single line the format that should be  used  to
       build  the  source  package  (possible formats are described above). No
       leading or trailing spaces are allowed.

   ddeebbiiaann//ssoouurrccee//iinncclluuddee--bbiinnaarriieess
       This file contains a list of binary files (one per line) that should be
       included  in  the  debian  tarball.  Leading  and  trailing  spaces are
       stripped.  Lines starting with "#" are comments and are skipped.  Empty
       lines are ignored.

   ddeebbiiaann//ssoouurrccee//ooppttiioonnss
       This  file contains a list of long options that should be automatically
       prepended to the set of command line options of  a  ddppkkgg--ssoouurrccee  --bb  or
       ddppkkgg--ssoouurrccee  ----pprriinntt--ffoorrmmaatt call. Options like ----ccoommpprreessssiioonn and ----ccoomm--
       pprreessssiioonn--lleevveell are well suited for this file.

       Each option should be put on a separate line.  Empty  lines  and  lines
       starting  with "#" are ignored. The leading "--" should be stripped and
       short options are not allowed. Optional spaces are allowed  around  the
       "=" symbol and optional quotes are allowed around the value.  Here's an
       example of such a file:

         # let dpkg-source create a debian.tar.bz2 with maximal compression
         compression = "bzip2"
         compression-level = 9
         # use debian/patches/debian-changes as automatic patch
         single-debian-patch
         # ignore changes on config.{sub,guess}
         extend-diff-ignore = "(^|/)(config.sub|config.guess)$"

       Note: ffoorrmmaatt options are not accepted in  this  file,  you  should  use
       ddeebbiiaann//ssoouurrccee//ffoorrmmaatt instead.

   ddeebbiiaann//ssoouurrccee//llooccaall--ooppttiioonnss
       Exactly like ddeebbiiaann//ssoouurrccee//ooppttiioonnss except that the file is not included
       in the generated source package. It can be useful to store a preference
       tied  to the maintainer or to the VCS repository where the source pack-
       age is maintained.

   ddeebbiiaann//ssoouurrccee//llooccaall--ppaattcchh--hheeaaddeerr aanndd ddeebbiiaann//ssoouurrccee//ppaattcchh--hheeaaddeerr
       Free form text that is put on top of the automatic patch  generated  in
       formats  "2.0"  or "3.0 (quilt)". llooccaall--ppaattcchh--hheeaaddeerr is not included in
       the generated source package while ppaattcchh--hheeaaddeerr is.

   ddeebbiiaann//ppaattcchheess//sseerriieess
       This file lists all patches that have  to  be  applied  (in  the  given
       order) on top of the upstream source package. Leading and trailing spa-
       ces are stripped. Lines starting with "#" are comments and are skipped.
       Empty  lines  are  ignored. Remaining lines start with a patch filename
       (relative to the ddeebbiiaann//ppaattcchheess// directory) up to the first space char-
       acter  or  the end of line. Optional qquuiilltt options can follow up to the
       end of line or the first "#" preceded by  one  or  more  spaces  (which
       marks the start of a comment up to the end of line).

BBUUGGSS
       The point at which field overriding occurs compared to certain standard
       output field settings is rather confused.

SSEEEE AALLSSOO
       ddppkkgg--ddeebb(1), ddppkkgg(1), ddsseelleecctt(1).



Debian Project                    2013-12-05                    dpkg-source(1)
