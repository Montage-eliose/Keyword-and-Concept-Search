INTRO(1)                      Linux User's Manual                     INTRO(1)



NNAAMMEE
       intro - introduction to user commands

DDEESSCCRRIIPPTTIIOONN
       Section 1 of the manual describes user commands and tools, for example,
       file manipulation tools, shells,  compilers,  web  browsers,  file  and
       image viewers and editors, and so on.

       All  commands  yield  a status value on termination.  This value can be
       tested (e.g., in most shells the variable _$_?  contains  the  status  of
       the  last  executed  command) to see whether the command completed suc-
       cessfully.  A zero exit status is conventionally used to indicate  suc-
       cess,  and  a  nonzero  status means that the command was unsuccessful.
       (Details of the exit status can be found in wwaaiitt(2).)  A  nonzero  exit
       status  can  be  in the range 1 to 255, and some commands use different
       nonzero status values to indicate the reason why the command failed.

NNOOTTEESS
       Linux is a flavor of UNIX, and as a first approximation all  user  com-
       mands  under  UNIX work precisely the same under Linux (and FreeBSD and
       lots of other UNIX-like systems).

       Under Linux there are GUIs (graphical user interfaces), where  you  can
       point  and  click  and  drag, and hopefully get work done without first
       reading lots of documentation.  The traditional UNIX environment  is  a
       CLI  (command line interface), where you type commands to tell the com-
       puter what to do.  That is faster and more powerful, but requires find-
       ing out what the commands are.  Below a bare minimum, to get started.

   LLooggiinn
       In  order  to start working, you probably first have to login, that is,
       give your username and password.  See also llooggiinn(1).  The program _l_o_g_i_n
       now starts a _s_h_e_l_l (command interpreter) for you.  In case of a graphi-
       cal login, you get a screen with menus or icons and a mouse click  will
       start a shell in a window.  See also xxtteerrmm(1).

   TThhee sshheellll
       One  types  commands  to the _s_h_e_l_l, the command interpreter.  It is not
       built-in, but is just a program and you can change your shell.   Every-
       body  has  her  own  favorite one.  The standard one is called _s_h.  See
       also aasshh(1), bbaasshh(1), ccsshh(1), zzsshh(1), cchhsshh(1).

       A session might go like

              kknnuutthh llooggiinn:: _a_e_b
              PPaasssswwoorrdd:: _*_*_*_*_*_*_*_*
              %% _d_a_t_e
              Tue Aug  6 23:50:44 CEST 2002
              %% _c_a_l
                   August 2002
              Su Mo Tu We Th Fr Sa
                           1  2  3
               4  5  6  7  8  9 10
              11 12 13 14 15 16 17
              18 19 20 21 22 23 24
              25 26 27 28 29 30 31

              %% _l_s
              bin  tel
              %% _l_s _-_l
              total 2
              drwxrwxr-x   2 aeb       1024 Aug  6 23:51 bin
              -rw-rw-r--   1 aeb         37 Aug  6 23:52 tel
              %% _c_a_t _t_e_l
              maja    0501-1136285
              peter   0136-7399214
              %% _c_p _t_e_l _t_e_l_2
              %% _l_s _-_l
              total 3
              drwxr-xr-x   2 aeb       1024 Aug  6 23:51 bin
              -rw-r--r--   1 aeb         37 Aug  6 23:52 tel
              -rw-r--r--   1 aeb         37 Aug  6 23:53 tel2
              %% _m_v _t_e_l _t_e_l_1
              %% _l_s _-_l
              total 3
              drwxr-xr-x   2 aeb       1024 Aug  6 23:51 bin
              -rw-r--r--   1 aeb         37 Aug  6 23:52 tel1
              -rw-r--r--   1 aeb         37 Aug  6 23:53 tel2
              %% _d_i_f_f _t_e_l_1 _t_e_l_2
              %% _r_m _t_e_l_1
              %% _g_r_e_p _m_a_j_a _t_e_l_2
              maja    0501-1136285
              %%
       and here typing Control-D ended the session.  The %% here was  the  com-
       mand  prompt--it  is the shell's way of indicating that it is ready for
       the next command.  The prompt can be customized in lots  of  ways,  and
       one might include stuff like username, machine name, current directory,
       time, and so on.  An assignment PS1="What next, master? " would  change
       the prompt as indicated.

       We see that there are commands _d_a_t_e (that gives date and time), and _c_a_l
       (that gives a calendar).

       The command _l_s lists the contents of the  current  directory--it  tells
       you  what  files  you  have.  With a _-_l option it gives a long listing,
       that includes the owner and size and date of the file, and the  permis-
       sions  people  have for reading and/or changing the file.  For example,
       the file "tel" here is 37 bytes long, owned by aeb and  the  owner  can
       read  and write it, others can only read it.  Owner and permissions can
       be changed by the commands _c_h_o_w_n and _c_h_m_o_d.

       The command _c_a_t will show the contents of a file.  (The  name  is  from
       "concatenate and print": all files given as parameters are concatenated
       and sent to "standard output", here the terminal screen.)

       The command _c_p (from "copy") will copy a file.  On the other hand,  the
       command _m_v (from "move") only renames it.

       The  command  _d_i_f_f lists the differences between two files.  Here there
       was no output because there were no differences.

       The command _r_m (from "remove") deletes the file, and be careful! it  is
       gone.  No wastepaper basket or anything.  Deleted means lost.

       The  command  _g_r_e_p (from "g/re/p") finds occurrences of a string in one
       or more files.  Here it finds Maja's telephone number.

   PPaatthhnnaammeess aanndd tthhee ccuurrrreenntt ddiirreeccttoorryy
       Files live in a large tree, the file hierarchy.  Each  has  a  _p_a_t_h_n_a_m_e
       describing  the  path  from the root of the tree (which is called /) to
       the file.  For example, such a full pathname  might  be  /home/aeb/tel.
       Always  using  full  pathnames would be inconvenient, and the name of a
       file in the current directory may be abbreviated  by  giving  only  the
       last  component.   That  is  why  "/home/aeb/tel" can be abbreviated to
       "tel" when the current directory is "/home/aeb".

       The command _p_w_d prints the current directory.

       The command _c_d changes the current directory.  Try "cd /" and "pwd" and
       "cd" and "pwd".

   DDiirreeccttoorriieess
       The command _m_k_d_i_r makes a new directory.

       The  command  _r_m_d_i_r  removes  a directory if it is empty, and complains
       otherwise.

       The command _f_i_n_d (with a rather baroque syntax) will  find  files  with
       given  name or other properties.  For example, "find . -name tel" would
       find the file "tel" starting in the present directory (which is  called
       ".").   And  "find  / -name tel" would do the same, but starting at the
       root of the tree.  Large searches on a multi-GB disk will be  time-con-
       suming, and it may be better to use llooccaattee(1).

   DDiisskkss aanndd ffiilleessyysstteemmss
       The  command  _m_o_u_n_t  will  attach the filesystem found on some disk (or
       floppy, or CDROM or so) to the big filesystem  hierarchy.   And  _u_m_o_u_n_t
       detaches  it again.  The command _d_f will tell you how much of your disk
       is still free.

   PPrroocceesssseess
       On a UNIX system many user and  system  processes  run  simultaneously.
       The  one  you  are talking to runs in the _f_o_r_e_g_r_o_u_n_d, the others in the
       _b_a_c_k_g_r_o_u_n_d.  The command _p_s will show you which  processes  are  active
       and  what numbers these processes have.  The command _k_i_l_l allows you to
       get rid of them.  Without option this is a friendly request: please  go
       away.   And "kill -9" followed by the number of the process is an imme-
       diate kill.  Foreground processes can often be killed  by  typing  Con-
       trol-C.

   GGeettttiinngg iinnffoorrmmaattiioonn
       There are thousands of commands, each with many options.  Traditionally
       commands are documented on _m_a_n _p_a_g_e_s, (like this one), so that the com-
       mand  "man  kill" will document the use of the command "kill" (and "man
       man" document the command "man").   The  program  _m_a_n  sends  the  text
       through  some  _p_a_g_e_r,  usually _l_e_s_s.  Hit the space bar to get the next
       page, hit q to quit.

       In documentation it is customary to refer to man pages  by  giving  the
       name  and section number, as in mmaann(1).  Man pages are terse, and allow
       you to find quickly some forgotten detail.  For newcomers an  introduc-
       tory text with more examples and explanations is useful.

       A  lot  of  GNU/FSF  software  is provided with info files.  Type "info
       info" for an introduction on the use of the program "info".

       Special   topics   are   often   treated   in    HOWTOs.     Look    in
       _/_u_s_r_/_s_h_a_r_e_/_d_o_c_/_h_o_w_t_o_/_e_n and use a browser if you find HTML files there.

SSEEEE AALLSSOO
       ssttaannddaarrddss(7)

CCOOLLOOPPHHOONN
       This  page  is  part of release 3.54 of the Linux _m_a_n_-_p_a_g_e_s project.  A
       description of the project, and information about reporting  bugs,  can
       be found at http://www.kernel.org/doc/man-pages/.



Linux                             2007-11-15                          INTRO(1)
