DEBCONF-COPYDB(1)                   Debconf                  DEBCONF-COPYDB(1)



NNAAMMEE
       debconf-copydb - copy a debconf database

SSYYNNOOPPSSIISS
        debconf-copydb sourcedb destdb [--pattern=pattern] [--owner-pattern=pattern] [--config=Foo:bar]

DDEESSCCRRIIPPTTIIOONN
       ddeebbccoonnff--ccooppyyddbb copies items from an existing debconf database into
       another, possibly new database. The two databases may have different
       formats; if so a conversion will automatically be done.

OOPPTTIIOONNSS
       _s_o_u_r_c_e_d_b
           The name of the source database. Typically it will be defined in
           your debconf.conf (or .debconfrc) file.

       _d_e_s_t_d_b
           The name of the destination database. It may be defined in
           debconf.conf or .debconfrc, or you might define it on the command
           line (see below).

       --pp _p_a_t_t_e_r_n, ----ppaatttteerrnn _p_a_t_t_e_r_n
           If this is specified, only items in _s_o_u_r_c_e_d_b whose names match the
           pattern will be copied.

       ----oowwnneerr--ppaatttteerrnn _p_a_t_t_e_r_n
           If this is specified, only items in _s_o_u_r_c_e_d_b whose owners match the
           pattern will be copied.

       --cc _f_o_o_:_b_a_r, ----ccoonnffiigg _F_o_o_:_b_a_r
           Set option Foo to bar. This is similar to writing:

             Foo: bar

           In debconf.conf, except you probably want to leave off the space on
           the command line (or quote it: "Foo: bar"). Generally must be used
           multiple times, to build up a full configuration stanza. While
           blank lines are used to separate stanzas in debconf.conf, this
           program will assume that "Name:dbname" denotes the beginning of a
           new stanza.

EEXXAAMMPPLLEESS
         debconf-copydb configdb backup

       Copy all of configdb to backup, assuming you already have the backup
       database defined in debconf.conf.

         debconf-copydb configdb newdb --pattern='^slrn/' \
               --config=Name:newdb --config=Driver:File \
               --config=Filename:newdb.dat

       Copy slrn's data out of configdb, and into newdb. newdb is not defined
       in the rc file, so the --config switches set up the database on the
       fly.

         debconf-copydb configdb stdout -c Name:stdout -c Driver:Pipe \
               -c InFd:none --pattern='^foo/'

       Spit out all the items in the debconf database related to package foo.

         debconf-copydb configdb pipe --config=Name:pipe \
                       --config=Driver:Pipe --config=InFd:none | \
               ssh remotehost debconf-copydb pipe configdb \
                       --config=Name:pipe --config=Driver:Pipe

       This uses the special purpose pipe driver to copy a database to a
       remote system.

SSEEEE AALLSSOO
       _d_e_b_c_o_n_f_._c_o_n_f(5)

AAUUTTHHOORR
       Joey Hess <joeyh@debian.org>



                                  2011-06-22                 DEBCONF-COPYDB(1)
