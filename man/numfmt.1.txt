NUMFMT(1)                        User Commands                       NUMFMT(1)



NNAAMMEE
       numfmt - Convert numbers from/to human-readable strings

SSYYNNOOPPSSIISS
       nnuummffmmtt [_O_P_T_I_O_N]... [_N_U_M_B_E_R]...

DDEESSCCRRIIPPTTIIOONN
       Reformat  NUMBER(s),  or  the  numbers  from standard input if none are
       specified.

       Mandatory arguments to long options are  mandatory  for  short  options
       too.

       ----ddeebbuugg
              print warnings about invalid input

       --dd, ----ddeelliimmiitteerr=_X
              use X instead of whitespace for field delimiter

       ----ffiieelldd=_N
              replace the number in input field N (default is 1)

       ----ffoorrmmaatt=_F_O_R_M_A_T
              use  printf  style  floating-point  FORMAT; see FORMAT below for
              details

       ----ffrroomm=_U_N_I_T
              auto-scale input numbers to UNITs; default is 'none';  see  UNIT
              below

       ----ffrroomm--uunniitt=_N
              specify the input unit size (instead of the default 1)

       ----ggrroouuppiinngg
              use  locale-defined  grouping  of  digits, e.g. 1,000,000 (which
              means it has no effect in the C/POSIX locale)

       ----hheeaaddeerr[=_N]
              print (without converting) the first N header lines; N  defaults
              to 1 if not specified

       ----iinnvvaalliidd=_M_O_D_E
              failure  mode for invalid numbers: MODE can be: abort (default),
              fail, warn, ignore

       ----ppaaddddiinngg=_N
              pad the output to N characters;  positive  N  will  right-align;
              negative  N will left-align; padding is ignored if the output is
              wider than N; the default is to automatically pad  if  a  white-
              space is found

       ----rroouunndd=_M_E_T_H_O_D
              use  METHOD  for rounding when scaling; METHOD can be: up, down,
              from-zero (default), towards-zero, nearest

       ----ssuuffffiixx=_S_U_F_F_I_X
              add SUFFIX to output numbers,  and  accept  optional  SUFFIX  in
              input numbers

       ----ttoo=_U_N_I_T
              auto-scale output numbers to UNITs; see UNIT below

       ----ttoo--uunniitt=_N
              the output unit size (instead of the default 1)

       ----hheellpp display this help and exit

       ----vveerrssiioonn
              output version information and exit

   UUNNIITT ooppttiioonnss::
       none   no auto-scaling is done; suffixes will trigger an error

       auto   accept optional single/two letter suffix:

              1K = 1000, 1Ki = 1024, 1M = 1000000, 1Mi = 1048576,

       si     accept optional single letter suffix:

              1K = 1000, 1M = 1000000, ...

       iec    accept optional single letter suffix:

              1K = 1024, 1M = 1048576, ...

       iec-i  accept optional two-letter suffix:

              1Ki = 1024, 1Mi = 1048576, ...

       FORMAT  must be suitable for printing one floating-point argument '%f'.
       Optional quote (%'f) will enable ----ggrroouuppiinngg (if  supported  by  current
       locale).   Optional  width value (%10f) will pad output. Optional nega-
       tive width values (%-10f) will left-pad output.

       Exit status is 0 if all input numbers were successfully converted.   By
       default,  numfmt will stop at the first conversion error with exit sta-
       tus 2.  With ----iinnvvaalliidd=='fail' a warning is printed for each  conversion
       error  and the exit status is 2.  With ----iinnvvaalliidd=='warn' each conversion
       error is diagnosed, but the exit status is 0.  With  ----iinnvvaalliidd=='ignore'
       conversion errors are not diagnosed and the exit status is 0.

EEXXAAMMPPLLEESS
              $ numfmt --to=si 1000

              -> "1.0K"

              $ numfmt --to=iec 2048

              -> "2.0K"

              $ numfmt --to=iec-i 4096

              -> "4.0Ki"

              $ echo 1K | numfmt --from=si

              -> "1000"

              $ echo 1K | numfmt --from=iec

              -> "1024"

              $ df | numfmt --header --field 2 --to=si
              $ ls -l | numfmt --header --field 5 --to=iec
              $ ls -lh | numfmt --header --field 5 --from=iec --padding=10
              $ ls -lh | numfmt --header --field 5 --from=iec --format %10f

AAUUTTHHOORR
       Written by Assaf Gordon.

RREEPPOORRTTIINNGG BBUUGGSS
       Report numfmt bugs to bug-coreutils@gnu.org
       GNU coreutils home page: <http://www.gnu.org/software/coreutils/>
       General help using GNU software: <http://www.gnu.org/gethelp/>
       Report numfmt translation bugs to <http://translationproject.org/team/>

CCOOPPYYRRIIGGHHTT
       Copyright  (C) 2013 Free Software Foundation, Inc.  License GPLv3+: GNU
       GPL version 3 or later <http://gnu.org/licenses/gpl.html>.
       This is free software: you are free  to  change  and  redistribute  it.
       There is NO WARRANTY, to the extent permitted by law.

SSEEEE AALLSSOO
       The  full  documentation  for nnuummffmmtt is maintained as a Texinfo manual.
       If the iinnffoo and nnuummffmmtt programs are properly installed  at  your  site,
       the command

              iinnffoo ccoorreeuuttiillss ''nnuummffmmtt iinnvvooccaattiioonn''

       should give you access to the complete manual.



GNU coreutils 8.21                March 2016                         NUMFMT(1)
