MYSQLBINLOG(1)               MySQL Database System              MYSQLBINLOG(1)



NNAAMMEE
       mysqlbinlog - utility for processing binary log files

SSYYNNOOPPSSIISS
       mmyyssqqllbbiinnlloogg [[ooppttiioonnss]] _l_o_g___f_i_l_e ......

DDEESSCCRRIIPPTTIIOONN
       The server's binary log consists of files containing "events" that
       describe modifications to database contents. The server writes these
       files in binary format. To display their contents in text format, use
       the mmyyssqqllbbiinnlloogg utility. You can also use mmyyssqqllbbiinnlloogg to display the
       contents of relay log files written by a slave server in a replication
       setup because relay logs have the same format as binary logs. The
       binary log and relay log are discussed further in Section 5.2.4, "The
       Binary Log", and Section 17.2.2, "Replication Relay and Status Logs".

       Invoke mmyyssqqllbbiinnlloogg like this:

           shell> mmyyssqqllbbiinnlloogg [[_o_p_t_i_o_n_s]] _l_o_g___f_i_l_e ......

       For example, to display the contents of the binary log file named
       binlog.000003, use this command:

           shell> mmyyssqqllbbiinnlloogg bbiinnlloogg..00000000000033

       The output includes events contained in binlog.000003. For
       statement-based logging, event information includes the SQL statement,
       the ID of the server on which it was executed, the timestamp when the
       statement was executed, how much time it took, and so forth. For
       row-based logging, the event indicates a row change rather than an SQL
       statement. See Section 17.1.2, "Replication Formats", for information
       about logging modes.

       Events are preceded by header comments that provide additional
       information. For example:

           # at 141
           #100309  9:28:36 server id 123  end_log_pos 245
             Query thread_id=3350  exec_time=11  error_code=0

       In the first line, the number following at indicates the file offset,
       or starting position, of the event in the binary log file.

       The second line starts with a date and time indicating when the
       statement started on the server where the event originated. For
       replication, this timestamp is propagated to slave servers.  server id
       is the server_id value of the server where the event originated.
       end_log_pos indicates where the next event starts (that is, it is the
       end position of the current event + 1).  thread_id indicates which
       thread executed the event.  exec_time is the time spent executing the
       event, on a master server. On a slave, it is the difference of the end
       execution time on the slave minus the beginning execution time on the
       master. The difference serves as an indicator of how much replication
       lags behind the master.  error_code indicates the result from executing
       the event. Zero means that no error occurred.

           NNoottee
           When using event groups, the file offsets of events may be grouped
           together and the comments of events may be grouped together. Do not
           mistake these grouped events for blank file offsets.

       The output from mmyyssqqllbbiinnlloogg can be re-executed (for example, by using
       it as input to mmyyssqqll) to redo the statements in the log. This is useful
       for recovery operations after a server crash. For other usage examples,
       see the discussion later in this section and in Section 7.5, "Point-in-
       Time (Incremental) Recovery Using the Binary Log".

       Normally, you use mmyyssqqllbbiinnlloogg to read binary log files directly and
       apply them to the local MySQL server. It is also possible to read
       binary logs from a remote server by using the ----rreeaadd--ffrroomm--rreemmoottee--sseerrvveerr
       option. To read remote binary logs, the connection parameter options
       can be given to indicate how to connect to the server. These options
       are ----hhoosstt, ----ppaasssswwoorrdd, ----ppoorrtt, ----pprroottooccooll, ----ssoocckkeett, and ----uusseerr; they
       are ignored except when you also use the ----rreeaadd--ffrroomm--rreemmoottee--sseerrvveerr
       option.

       When running mmyyssqqllbbiinnlloogg against a large binary log, be careful that
       the filesystem has enough space for the resulting files. To configure
       the directory that mmyyssqqllbbiinnlloogg uses for temporary files, use the TMPDIR
       environment variable.

       mmyyssqqllbbiinnlloogg supports the following options, which can be specified on
       the command line or in the [mysqlbinlog] and [client] groups of an
       option file. For information about option files used by MySQL programs,
       see Section 4.2.6, "Using Option Files".

       +o   ----hheellpp, --??

           Display a help message and exit.

       +o   ----bbaassee6644--oouuttppuutt[[==_v_a_l_u_e]]

           This option determines when events should be displayed encoded as
           base-64 strings using BINLOG statements. The option has these
           permissible values (not case sensitive):

           +o   AUTO ("automatic") or UNSPEC ("unspecified") displays BINLOG
               statements automatically when necessary (that is, for format
               description events and row events). If no ----bbaassee6644--oouuttppuutt
               option is given, the effect is the same as
               ----bbaassee6644--oouuttppuutt==AAUUTTOO.

                   NNoottee
                   Automatic BINLOG display is the only safe behavior if you
                   intend to use the output of mmyyssqqllbbiinnlloogg to re-execute
                   binary log file contents. The other option values are
                   intended only for debugging or testing purposes because
                   they may produce output that does not include all events in
                   executable form.

           +o   ALWAYS displays BINLOG statements whenever possible. If the
               ----bbaassee6644--oouuttppuutt option is given without a value, the effect is
               the same as ----bbaassee6644--oouuttppuutt==AALLWWAAYYSS.

                   NNoottee
                   Changes to replication in MySQL 5.6 make output generated
                   by this option unusable, so ALWAYS is deprecated as of
                   MySQL 5.5.8 and will be an invalid value in MySQL 5.6

           +o   NEVER causes BINLOG statements not to be displayed.
               mmyyssqqllbbiinnlloogg exits with an error if a row event is found that
               must be displayed using BINLOG.

           +o   DECODE-ROWS specifies to mmyyssqqllbbiinnlloogg that you intend for row
               events to be decoded and displayed as commented SQL statements
               by also specifying the ----vveerrbboossee option. Like NEVER,
               DECODE-ROWS suppresses display of BINLOG statements, but unlike
               NEVER, it does not exit with an error if a row event is found.

           For examples that show the effect of ----bbaassee6644--oouuttppuutt and ----vveerrbboossee
           on row event output, see the section called "MYSQLBINLOG ROW EVENT
           DISPLAY".

       +o   ----bbiinndd--aaddddrreessss==_i_p___a_d_d_r_e_s_s

           On a computer having multiple network interfaces, use this option
           to select which interface to use for connecting to the MySQL
           server.

           This option is supported beginning with MySQL 5.5.8.

       +o   ----cchhaarraacctteerr--sseettss--ddiirr==_d_i_r___n_a_m_e

           The directory where character sets are installed. See Section 10.5,
           "Character Set Configuration".

       +o   ----ddaattaabbaassee==_d_b___n_a_m_e, --dd _d_b___n_a_m_e

           This option causes mmyyssqqllbbiinnlloogg to output entries from the binary
           log (local log only) that occur while _d_b___n_a_m_e is been selected as
           the default database by USE.

           The ----ddaattaabbaassee option for mmyyssqqllbbiinnlloogg is similar to the
           ----bbiinnlloogg--ddoo--ddbb option for mmyyssqqlldd, but can be used to specify only
           one database. If ----ddaattaabbaassee is given multiple times, only the last
           instance is used.

           The effects of this option depend on whether the statement-based or
           row-based logging format is in use, in the same way that the
           effects of ----bbiinnlloogg--ddoo--ddbb depend on whether statement-based or
           row-based logging is in use.

           SSttaatteemmeenntt--bbaasseedd llooggggiinngg. The ----ddaattaabbaassee option works as follows:

           +o   While _d_b___n_a_m_e is the default database, statements are output
               whether they modify tables in _d_b___n_a_m_e or a different database.

           +o   Unless _d_b___n_a_m_e is selected as the default database, statements
               are not output, even if they modify tables in _d_b___n_a_m_e.

           +o   There is an exception for CREATE DATABASE, ALTER DATABASE, and
               DROP DATABASE. The database being _c_r_e_a_t_e_d_, _a_l_t_e_r_e_d_, _o_r _d_r_o_p_p_e_d
               is considered to be the default database when determining
               whether to output the statement.

           Suppose that the binary log was created by executing these
           statements using statement-based-logging:

               INSERT INTO test.t1 (i) VALUES(100);
               INSERT INTO db2.t2 (j)  VALUES(200);
               USE test;
               INSERT INTO test.t1 (i) VALUES(101);
               INSERT INTO t1 (i)      VALUES(102);
               INSERT INTO db2.t2 (j)  VALUES(201);
               USE db2;
               INSERT INTO test.t1 (i) VALUES(103);
               INSERT INTO db2.t2 (j)  VALUES(202);
               INSERT INTO t2 (j)      VALUES(203);

           mmyyssqqllbbiinnlloogg ----ddaattaabbaassee==tteesstt does not output the first two INSERT
           statements because there is no default database. It outputs the
           three INSERT statements following USE test, but not the three
           INSERT statements following USE db2.

           mmyyssqqllbbiinnlloogg ----ddaattaabbaassee==ddbb22 does not output the first two INSERT
           statements because there is no default database. It does not output
           the three INSERT statements following USE test, but does output the
           three INSERT statements following USE db2.

           RRooww--bbaasseedd llooggggiinngg.  mmyyssqqllbbiinnlloogg outputs only entries that change
           tables belonging to _d_b___n_a_m_e. The default database has no effect on
           this. Suppose that the binary log just described was created using
           row-based logging rather than statement-based logging.  mmyyssqqllbbiinnlloogg
           ----ddaattaabbaassee==tteesstt outputs only those entries that modify t1 in the
           test database, regardless of whether USE was issued or what the
           default database is.  If a server is running with binlog_format set
           to MIXED and you want it to be possible to use mmyyssqqllbbiinnlloogg with the
           ----ddaattaabbaassee option, you must ensure that tables that are modified
           are in the database selected by USE. (In particular, no
           cross-database updates should be used.)

               NNoottee
               Prior to MySQL Cluster NDB 7.2.2, this option did not work
               correctly with MySQL Cluster tables unless, unless the binary
               log was generated using ----lloogg--bbiinn--uussee--vv11--rrooww--eevveennttss==00. (Bug
               #13067813)

       +o   ----ddeebbuugg[[==_d_e_b_u_g___o_p_t_i_o_n_s]], --## [[_d_e_b_u_g___o_p_t_i_o_n_s]]

           Write a debugging log. A typical _d_e_b_u_g___o_p_t_i_o_n_s string is
           d:t:o,_f_i_l_e___n_a_m_e. The default is d:t:o,/tmp/mysqlbinlog.trace.

       +o   ----ddeebbuugg--cchheecckk

           Print some debugging information when the program exits.

       +o   ----ddeebbuugg--iinnffoo

           Print debugging information and memory and CPU usage statistics
           when the program exits.

       +o   ----ddeeffaauulltt--aauutthh==_p_l_u_g_i_n

           A hint about the client-side authentication plugin to use. See
           Section 6.3.6, "Pluggable Authentication".

           This option was added in MySQL 5.5.10.

       +o   ----ddeeffaauullttss--eexxttrraa--ffiillee==_f_i_l_e___n_a_m_e

           Read this option file after the global option file but (on Unix)
           before the user option file. If the file does not exist or is
           otherwise inaccessible, an error occurs. Before MySQL 5.5.8,
           _f_i_l_e___n_a_m_e must be the full path name to the file. As of MySQL
           5.5.8, the name is interpreted relative to the current directory if
           given as a relative path name.

       +o   ----ddeeffaauullttss--ffiillee==_f_i_l_e___n_a_m_e

           Use only the given option file. If the file does not exist or is
           otherwise inaccessible, an error occurs. Before MySQL 5.5.8,
           _f_i_l_e___n_a_m_e must be the full path name to the file. As of MySQL
           5.5.8, the name is interpreted relative to the current directory if
           given as a relative path name.

       +o   ----ddeeffaauullttss--ggrroouupp--ssuuffffiixx==_s_t_r

           Read not only the usual option groups, but also groups with the
           usual names and a suffix of _s_t_r. For example, mmyyssqqllbbiinnlloogg normally
           reads the [client] and [mysqlbinlog] groups. If the
           ----ddeeffaauullttss--ggrroouupp--ssuuffffiixx==__ootthheerr option is given, mmyyssqqllbbiinnlloogg also
           reads the [client_other] and [mysqlbinlog_other] groups.

       +o   ----ddiissaabbllee--lloogg--bbiinn, --DD

           Disable binary logging. This is useful for avoiding an endless loop
           if you use the ----ttoo--llaasstt--lloogg option and are sending the output to
           the same MySQL server. This option also is useful when restoring
           after a crash to avoid duplication of the statements you have
           logged.

           This option requires that you have the SUPER privilege. It causes
           mmyyssqqllbbiinnlloogg to include a SET sql_log_bin = 0 statement in its
           output to disable binary logging of the remaining output. The SET
           statement is ineffective unless you have the SUPER privilege.

       +o   ----ffoorrccee--iiff--ooppeenn, --FF

           Read binary log files even if they are open or were not closed
           properly.

       +o   ----ffoorrccee--rreeaadd, --ff

           With this option, if mmyyssqqllbbiinnlloogg reads a binary log event that it
           does not recognize, it prints a warning, ignores the event, and
           continues. Without this option, mmyyssqqllbbiinnlloogg stops if it reads such
           an event.

       +o   ----hheexxdduummpp, --HH

           Display a hex dump of the log in comments, as described in the
           section called "MYSQLBINLOG HEX DUMP FORMAT". The hex output can be
           helpful for replication debugging.

       +o   ----hhoosstt==_h_o_s_t___n_a_m_e, --hh _h_o_s_t___n_a_m_e

           Get the binary log from the MySQL server on the given host.

       +o   ----llooccaall--llooaadd==_d_i_r___n_a_m_e, --ll _d_i_r___n_a_m_e

           Prepare local temporary files for LOAD DATA INFILE in the specified
           directory.

               IImmppoorrttaanntt
               These temporary files are not automatically removed by
               mmyyssqqllbbiinnlloogg or any other MySQL program.

       +o   ----nnoo--ddeeffaauullttss

           Do not read any option files. If program startup fails due to
           reading unknown options from an option file, ----nnoo--ddeeffaauullttss can be
           used to prevent them from being read.

       +o   ----ooffffsseett==_N, --oo _N

           Skip the first _N entries in the log.

       +o   ----ppaasssswwoorrdd[[==_p_a_s_s_w_o_r_d]], --pp[[_p_a_s_s_w_o_r_d]]

           The password to use when connecting to the server. If you use the
           short option form (--pp), you _c_a_n_n_o_t have a space between the option
           and the password. If you omit the _p_a_s_s_w_o_r_d value following the
           ----ppaasssswwoorrdd or --pp option on the command line, mmyyssqqllbbiinnlloogg prompts
           for one.

           Specifying a password on the command line should be considered
           insecure. See Section 6.1.2.1, "End-User Guidelines for Password
           Security". You can use an option file to avoid giving the password
           on the command line.

       +o   ----pplluuggiinn--ddiirr==_d_i_r___n_a_m_e

           The directory in which to look for plugins. Specify this option if
           the ----ddeeffaauulltt--aauutthh option is used to specify an authentication
           plugin but mmyyssqqllbbiinnlloogg does not find it. See Section 6.3.6,
           "Pluggable Authentication".

           This option was added in MySQL 5.5.10.

       +o   ----ppoorrtt==_p_o_r_t___n_u_m, --PP _p_o_r_t___n_u_m

           The TCP/IP port number to use for connecting to a remote server.

       +o   ----ppoossiittiioonn==_N

           Deprecated. Use ----ssttaarrtt--ppoossiittiioonn instead.  ----ppoossiittiioonn was removed
           in MySQL 5.5.3.

       +o   ----pprriinntt--ddeeffaauullttss

           Print the program name and all options that it gets from option
           files.

       +o   ----pprroottooccooll=={{TTCCPP||SSOOCCKKEETT||PPIIPPEE||MMEEMMOORRYY}}

           The connection protocol to use for connecting to the server. It is
           useful when the other connection parameters normally would cause a
           protocol to be used other than the one you want. For details on the
           permissible values, see Section 4.2.2, "Connecting to the MySQL
           Server".

       +o   ----rreeaadd--ffrroomm--rreemmoottee--sseerrvveerr, --RR

           Read the binary log from a MySQL server rather than reading a local
           log file. Any connection parameter options are ignored unless this
           option is given as well. These options are ----hhoosstt, ----ppaasssswwoorrdd,
           ----ppoorrtt, ----pprroottooccooll, ----ssoocckkeett, and ----uusseerr.

           This option requires that the remote server be running. It works
           only for binary log files on the remote server, not relay log
           files.

       +o   ----rreessuulltt--ffiillee==_n_a_m_e, --rr _n_a_m_e

           Direct output to the given file.

       +o   ----sseerrvveerr--iidd==_i_d

           Display only those events created by the server having the given
           server ID.

       +o   ----sseerrvveerr--iidd--bbiittss==_N

           Use only the first _N bits of the server_id to identify the server.
           If the binary log was written by a mmyyssqqlldd with server-id-bits set
           to less than 32 and user data stored in the most significant bit,
           running mmyyssqqllbbiinnlloogg with ----sseerrvveerr--iidd--bbiittss set to 32 enables this
           data to be seen.

           This option is supported only by the versions of mmyyssqqllbbiinnlloogg
           supplied with the MySQL Cluster distribution, or built from the
           MySQL Cluster sources.

       +o   ----sseett--cchhaarrsseett==_c_h_a_r_s_e_t___n_a_m_e

           Add a SET NAMES _c_h_a_r_s_e_t___n_a_m_e statement to the output to specify the
           character set to be used for processing log files.

       +o   ----sshhaarreedd--mmeemmoorryy--bbaassee--nnaammee==_n_a_m_e

           On Windows, the shared-memory name to use, for connections made
           using shared memory to a local server. The default value is MYSQL.
           The shared-memory name is case sensitive.

           The server must be started with the ----sshhaarreedd--mmeemmoorryy option to
           enable shared-memory connections.

       +o   ----sshhoorrtt--ffoorrmm, --ss

           Display only the statements contained in the log, without any extra
           information or row-based events. This is for testing only, and
           should not be used in production systems.

       +o   ----ssoocckkeett==_p_a_t_h, --SS _p_a_t_h

           For connections to localhost, the Unix socket file to use, or, on
           Windows, the name of the named pipe to use.

       +o   ----ssttaarrtt--ddaatteettiimmee==_d_a_t_e_t_i_m_e

           Start reading the binary log at the first event having a timestamp
           equal to or later than the _d_a_t_e_t_i_m_e argument. The _d_a_t_e_t_i_m_e value is
           relative to the local time zone on the machine where you run
           mmyyssqqllbbiinnlloogg. The value should be in a format accepted for the
           DATETIME or TIMESTAMP data types. For example:

               shell> mmyyssqqllbbiinnlloogg ----ssttaarrtt--ddaatteettiimmee==""22000055--1122--2255 1111::2255::5566"" bbiinnlloogg..000000000033

           This option is useful for point-in-time recovery. See Section 7.3,
           "Example Backup and Recovery Strategy".

       +o   ----ssttaarrtt--ppoossiittiioonn==_N, --jj _N

           Start reading the binary log at the first event having a position
           equal to or greater than _N. This option applies to the first log
           file named on the command line.

           This option is useful for point-in-time recovery. See Section 7.3,
           "Example Backup and Recovery Strategy".

       +o   ----ssttoopp--ddaatteettiimmee==_d_a_t_e_t_i_m_e

           Stop reading the binary log at the first event having a timestamp
           equal to or later than the _d_a_t_e_t_i_m_e argument. This option is useful
           for point-in-time recovery. See the description of the
           ----ssttaarrtt--ddaatteettiimmee option for information about the _d_a_t_e_t_i_m_e value.

           This option is useful for point-in-time recovery. See Section 7.3,
           "Example Backup and Recovery Strategy".

       +o   ----ssttoopp--ppoossiittiioonn==_N

           Stop reading the binary log at the first event having a position
           equal to or greater than _N. This option applies to the last log
           file named on the command line.

           This option is useful for point-in-time recovery. See Section 7.3,
           "Example Backup and Recovery Strategy".

       +o   ----ttoo--llaasstt--lloogg, --tt

           Do not stop at the end of the requested binary log from a MySQL
           server, but rather continue printing until the end of the last
           binary log. If you send the output to the same MySQL server, this
           may lead to an endless loop. This option requires
           ----rreeaadd--ffrroomm--rreemmoottee--sseerrvveerr.

       +o   ----uusseerr==_u_s_e_r___n_a_m_e, --uu _u_s_e_r___n_a_m_e

           The MySQL user name to use when connecting to a remote server.

       +o   ----vveerrbboossee, --vv

           Reconstruct row events and display them as commented SQL
           statements. If this option is given twice, the output includes
           comments to indicate column data types and some metadata.

           For examples that show the effect of ----bbaassee6644--oouuttppuutt and ----vveerrbboossee
           on row event output, see the section called "MYSQLBINLOG ROW EVENT
           DISPLAY".

       +o   ----vveerrssiioonn, --VV

           Display version information and exit.

           In MySQL 5.5, the version number shown for mmyyssqqllbbiinnlloogg is always
           3.3.

       You can also set the following variable by using ----_v_a_r___n_a_m_e==_v_a_l_u_e
       syntax:

       +o   open_files_limit

           Specify the number of open file descriptors to reserve.

       You can pipe the output of mmyyssqqllbbiinnlloogg into the mmyyssqqll client to execute
       the events contained in the binary log. This technique is used to
       recover from a crash when you have an old backup (see Section 7.5,
       "Point-in-Time (Incremental) Recovery Using the Binary Log"). For
       example:

           shell> mmyyssqqllbbiinnlloogg bbiinnlloogg..000000000011 || mmyyssqqll --uu rroooott --pp

       Or:

           shell> mmyyssqqllbbiinnlloogg bbiinnlloogg..[[00--99]]** || mmyyssqqll --uu rroooott --pp

       You can also redirect the output of mmyyssqqllbbiinnlloogg to a text file instead,
       if you need to modify the statement log first (for example, to remove
       statements that you do not want to execute for some reason). After
       editing the file, execute the statements that it contains by using it
       as input to the mmyyssqqll program:

           shell> mmyyssqqllbbiinnlloogg bbiinnlloogg..000000000011 >> ttmmppffiillee
           shell> ... _e_d_i_t _t_m_p_f_i_l_e ...
           shell> mmyyssqqll --uu rroooott --pp << ttmmppffiillee

       When mmyyssqqllbbiinnlloogg is invoked with the ----ssttaarrtt--ppoossiittiioonn option, it
       displays only those events with an offset in the binary log greater
       than or equal to a given position (the given position must match the
       start of one event). It also has options to stop and start when it sees
       an event with a given date and time. This enables you to perform
       point-in-time recovery using the ----ssttoopp--ddaatteettiimmee option (to be able to
       say, for example, "roll forward my databases to how they were today at
       10:30 a.m.").

       If you have more than one binary log to execute on the MySQL server,
       the safe method is to process them all using a single connection to the
       server. Here is an example that demonstrates what may be _u_n_s_a_f_e:

           shell> mmyyssqqllbbiinnlloogg bbiinnlloogg..000000000011 || mmyyssqqll --uu rroooott --pp ## DDAANNGGEERR!!!!
           shell> mmyyssqqllbbiinnlloogg bbiinnlloogg..000000000022 || mmyyssqqll --uu rroooott --pp ## DDAANNGGEERR!!!!

       Processing binary logs this way using multiple connections to the
       server causes problems if the first log file contains a CREATE
       TEMPORARY TABLE statement and the second log contains a statement that
       uses the temporary table. When the first mmyyssqqll process terminates, the
       server drops the temporary table. When the second mmyyssqqll process
       attempts to use the table, the server reports "unknown table."

       To avoid problems like this, use a _s_i_n_g_l_e mmyyssqqll process to execute the
       contents of all binary logs that you want to process. Here is one way
       to do so:

           shell> mmyyssqqllbbiinnlloogg bbiinnlloogg..000000000011 bbiinnlloogg..000000000022 || mmyyssqqll --uu rroooott --pp

       Another approach is to write all the logs to a single file and then
       process the file:

           shell> mmyyssqqllbbiinnlloogg bbiinnlloogg..000000000011 >>  //ttmmpp//ssttaatteemmeennttss..ssqqll
           shell> mmyyssqqllbbiinnlloogg bbiinnlloogg..000000000022 >>>> //ttmmpp//ssttaatteemmeennttss..ssqqll
           shell> mmyyssqqll --uu rroooott --pp --ee ""ssoouurrccee //ttmmpp//ssttaatteemmeennttss..ssqqll""

       mmyyssqqllbbiinnlloogg can produce output that reproduces a LOAD DATA INFILE
       operation without the original data file.  mmyyssqqllbbiinnlloogg copies the data
       to a temporary file and writes a LOAD DATA LOCAL INFILE statement that
       refers to the file. The default location of the directory where these
       files are written is system-specific. To specify a directory
       explicitly, use the ----llooccaall--llooaadd option.

       Because mmyyssqqllbbiinnlloogg converts LOAD DATA INFILE statements to LOAD DATA
       LOCAL INFILE statements (that is, it adds LOCAL), both the client and
       the server that you use to process the statements must be configured
       with the LOCAL capability enabled. See Section 6.1.6, "Security Issues
       with LOAD DATA LOCAL".

           WWaarrnniinngg
           The temporary files created for LOAD DATA LOCAL statements are _n_o_t
           automatically deleted because they are needed until you actually
           execute those statements. You should delete the temporary files
           yourself after you no longer need the statement log. The files can
           be found in the temporary file directory and have names like
           _o_r_i_g_i_n_a_l___f_i_l_e___n_a_m_e_-_#_-_#.

MMYYSSQQLLBBIINNLLOOGG HHEEXX DDUUMMPP FFOORRMMAATT
       The ----hheexxdduummpp option causes mmyyssqqllbbiinnlloogg to produce a hex dump of the
       binary log contents:

           shell> mmyyssqqllbbiinnlloogg ----hheexxdduummpp mmaasstteerr--bbiinn..000000000011

       The hex output consists of comment lines beginning with #, so the
       output might look like this for the preceding command:

           /*!40019 SET @@session.max_insert_delayed_threads=0*/;
           /*!50003 SET @OLD_COMPLETION_TYPE=@@COMPLETION_TYPE,COMPLETION_TYPE=0*/;
           # at 4
           #051024 17:24:13 server id 1  end_log_pos 98
           # Position  Timestamp   Type   Master ID        Size      Master Pos    Flags
           # 00000004 9d fc 5c 43   0f   01 00 00 00   5e 00 00 00   62 00 00 00   00 00
           # 00000017 04 00 35 2e 30 2e 31 35  2d 64 65 62 75 67 2d 6c |..5.0.15.debug.l|
           # 00000027 6f 67 00 00 00 00 00 00  00 00 00 00 00 00 00 00 |og..............|
           # 00000037 00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00 |................|
           # 00000047 00 00 00 00 9d fc 5c 43  13 38 0d 00 08 00 12 00 |.......C.8......|
           # 00000057 04 04 04 04 12 00 00 4b  00 04 1a                |.......K...|
           #       Start: binlog v 4, server v 5.0.15-debug-log created 051024 17:24:13
           #       at startup
           ROLLBACK;

       Hex dump output currently contains the elements in the following list.
       This format is subject to change. (For more information about binary
       log format, see MMyySSQQLL IInntteerrnnaallss:: TThhee BBiinnaarryy LLoogg[1].

       +o   Position: The byte position within the log file.

       +o   Timestamp: The event timestamp. In the example shown, '9d fc 5c 43'
           is the representation of '051024 17:24:13' in hexadecimal.

       +o   Type: The event type code. In the example shown, '0f' indicates a
           FORMAT_DESCRIPTION_EVENT. The following table lists the possible
           type codes.

           allbox tab(:); lB lB lB.  T{ Type T}:T{ Name T}:T{ Meaning T} l l l
           l l l l l l l l l l l l l l l l l l l l l l l l l l l l l l l l l l
           l l l l l l l l l l l l l l l l l l l l l l l l l l l l l l l l l l
           l l l l l l l l l l.  T{ 00 T}:T{ UNKNOWN_EVENT T}:T{ This event
           should never be present in the log.  T} T{ 01 T}:T{ START_EVENT_V3
           T}:T{ This indicates the start of a log file written by MySQL 4 or
           earlier.  T} T{ 02 T}:T{ QUERY_EVENT T}:T{ The most common type of
           events. These contain statements executed on the
                               master.  T} T{ 03 T}:T{ STOP_EVENT T}:T{
           Indicates that master has stopped.  T} T{ 04 T}:T{ ROTATE_EVENT
           T}:T{ Written when the master switches to a new log file.  T} T{ 05
           T}:T{ INTVAR_EVENT T}:T{ Used for AUTO_INCREMENT values or when the
                               LAST_INSERT_ID()
                               function is used in the statement.  T} T{ 06
           T}:T{ LOAD_EVENT T}:T{ Used for LOAD DATA
                               INFILE in MySQL 3.23.  T} T{ 07 T}:T{
           SLAVE_EVENT T}:T{ Reserved for future use.  T} T{ 08 T}:T{
           CREATE_FILE_EVENT T}:T{ Used for LOAD DATA
                               INFILE statements. This indicates the
                               start of execution of such a statement. A
           temporary
                               file is created on the slave. Used in MySQL 4
           only.  T} T{ 09 T}:T{ APPEND_BLOCK_EVENT T}:T{ Contains data for
           use in a
                               LOAD DATA
                               INFILE statement. The data is stored in
                               the temporary file on the slave.  T} T{ 0a
           T}:T{ EXEC_LOAD_EVENT T}:T{ Used for LOAD DATA
                               INFILE statements. The contents of the
                               temporary file is stored in the table on the
           slave.
                               Used in MySQL 4 only.  T} T{ 0b T}:T{
           DELETE_FILE_EVENT T}:T{ Rollback of a LOAD DATA
                               INFILE statement. The temporary file
                               should be deleted on the slave.  T} T{ 0c T}:T{
           NEW_LOAD_EVENT T}:T{ Used for LOAD DATA
                               INFILE in MySQL 4 and earlier.  T} T{ 0d T}:T{
           RAND_EVENT T}:T{ Used to send information about random values if
           the
                               RAND() function is
                               used in the statement.  T} T{ 0e T}:T{
           USER_VAR_EVENT T}:T{ Used to replicate user variables.  T} T{ 0f
           T}:T{ FORMAT_DESCRIPTION_EVENT T}:T{ This indicates the start of a
           log file written by MySQL 5 or later.  T} T{ 10 T}:T{ XID_EVENT
           T}:T{ Event indicating commit of an XA transaction.  T} T{ 11 T}:T{
           BEGIN_LOAD_QUERY_EVENT T}:T{ Used for LOAD DATA
                               INFILE statements in MySQL 5 and later.  T} T{
           12 T}:T{ EXECUTE_LOAD_QUERY_EVENT T}:T{ Used for LOAD DATA
                               INFILE statements in MySQL 5 and later.  T} T{
           13 T}:T{ TABLE_MAP_EVENT T}:T{ Information about a table
           definition. Used in MySQL 5.1.5 and later.  T} T{ 14 T}:T{
           PRE_GA_WRITE_ROWS_EVENT T}:T{ Row data for a single table that
           should be created. Used in MySQL 5.1.5
                               to 5.1.17.  T} T{ 15 T}:T{
           PRE_GA_UPDATE_ROWS_EVENT T}:T{ Row data for a single table that
           needs to be updated. Used in MySQL
                               5.1.5 to 5.1.17.  T} T{ 16 T}:T{
           PRE_GA_DELETE_ROWS_EVENT T}:T{ Row data for a single table that
           should be deleted. Used in MySQL 5.1.5
                               to 5.1.17.  T} T{ 17 T}:T{ WRITE_ROWS_EVENT
           T}:T{ Row data for a single table that should be created. Used in
           MySQL 5.1.18
                               and later.  T} T{ 18 T}:T{ UPDATE_ROWS_EVENT
           T}:T{ Row data for a single table that needs to be updated. Used in
           MySQL
                               5.1.18 and later.  T} T{ 19 T}:T{
           DELETE_ROWS_EVENT T}:T{ Row data for a single table that should be
           deleted. Used in MySQL 5.1.18
                               and later.  T} T{ 1a T}:T{ INCIDENT_EVENT T}:T{
           Something out of the ordinary happened. Added in MySQL 5.1.18.  T}


       +o   Master ID: The server ID of the master that created the event.

       +o   Size: The size in bytes of the event.

       +o   Master Pos: The position of the next event in the original master
           log file.

       +o   Flags: 16 flags. The following flags are used. The others are
           reserved for future use.

           allbox tab(:); lB lB lB.  T{ Flag T}:T{ Name T}:T{ Meaning T} l l l
           l l l l l l l l l.  T{ 01 T}:T{ LOG_EVENT_BINLOG_IN_USE_F T}:T{ Log
           file correctly closed. (Used only in
                               FORMAT_DESCRIPTION_EVENT.) If
                               this flag is set (if the flags are, for
           example,
                               '01 00') in a
                               FORMAT_DESCRIPTION_EVENT, the log
                               file has not been properly closed. Most
           probably
                               this is because of a master crash (for example,
           due
                               to power failure).  T} T{ 02 T}:T{   T}:T{
           Reserved for future use.  T} T{ 04 T}:T{
           LOG_EVENT_THREAD_SPECIFIC_F T}:T{ Set if the event is dependent on
           the connection it was executed in (for
                               example, '04 00'), for example,
                               if the event uses temporary tables.  T} T{ 08
           T}:T{ LOG_EVENT_SUPPRESS_USE_F T}:T{ Set in some circumstances when
           the event is not dependent on the default
                               database.  T}


MMYYSSQQLLBBIINNLLOOGG RROOWW EEVVEENNTT DDIISSPPLLAAYY
       The following examples illustrate how mmyyssqqllbbiinnlloogg displays row events
       that specify data modifications. These correspond to events with the
       WRITE_ROWS_EVENT, UPDATE_ROWS_EVENT, and DELETE_ROWS_EVENT type codes.
       The ----bbaassee6644--oouuttppuutt==DDEECCOODDEE--RROOWWSS and ----vveerrbboossee options may be used to
       affect row event output.

       Suppose that the server is using row-based binary logging and that you
       execute the following sequence of statements:

           CREATE TABLE t
           (
             id   INT NOT NULL,
             name VARCHAR(20) NOT NULL,
             date DATE NULL
           ) ENGINE = InnoDB;
           START TRANSACTION;
           INSERT INTO t VALUES(1, 'apple', NULL);
           UPDATE t SET name = 'pear', date = '2009-01-01' WHERE id = 1;
           DELETE FROM t WHERE id = 1;
           COMMIT;

       By default, mmyyssqqllbbiinnlloogg displays row events encoded as base-64 strings
       using BINLOG statements. Omitting extraneous lines, the output for the
       row events produced by the preceding statement sequence looks like
       this:

           shell> mmyyssqqllbbiinnlloogg _l_o_g___f_i_l_e
           ...
           # at 218
           #080828 15:03:08 server id 1  end_log_pos 258   Write_rows: table id 17 flags: STMT_END_F
           BINLOG '
           fAS3SBMBAAAALAAAANoAAAAAABEAAAAAAAAABHRlc3QAAXQAAwMPCgIUAAQ=
           fAS3SBcBAAAAKAAAAAIBAAAQABEAAAAAAAEAA//8AQAAAAVhcHBsZQ==
           '/*!*/;
           ...
           # at 302
           #080828 15:03:08 server id 1  end_log_pos 356   Update_rows: table id 17 flags: STMT_END_F
           BINLOG '
           fAS3SBMBAAAALAAAAC4BAAAAABEAAAAAAAAABHRlc3QAAXQAAwMPCgIUAAQ=
           fAS3SBgBAAAANgAAAGQBAAAQABEAAAAAAAEAA////AEAAAAFYXBwbGX4AQAAAARwZWFyIbIP
           '/*!*/;
           ...
           # at 400
           #080828 15:03:08 server id 1  end_log_pos 442   Delete_rows: table id 17 flags: STMT_END_F
           BINLOG '
           fAS3SBMBAAAALAAAAJABAAAAABEAAAAAAAAABHRlc3QAAXQAAwMPCgIUAAQ=
           fAS3SBkBAAAAKgAAALoBAAAQABEAAAAAAAEAA//4AQAAAARwZWFyIbIP
           '/*!*/;

       To see the row events as comments in the form of "pseudo-SQL"
       statements, run mmyyssqqllbbiinnlloogg with the ----vveerrbboossee or --vv option. The output
       will contain lines beginning with ###:

           shell> mmyyssqqllbbiinnlloogg --vv _l_o_g___f_i_l_e
           ...
           # at 218
           #080828 15:03:08 server id 1  end_log_pos 258   Write_rows: table id 17 flags: STMT_END_F
           BINLOG '
           fAS3SBMBAAAALAAAANoAAAAAABEAAAAAAAAABHRlc3QAAXQAAwMPCgIUAAQ=
           fAS3SBcBAAAAKAAAAAIBAAAQABEAAAAAAAEAA//8AQAAAAVhcHBsZQ==
           '/*!*/;
           ### INSERT INTO test.t
           ### SET
           ###   @1=1
           ###   @2='apple'
           ###   @3=NULL
           ...
           # at 302
           #080828 15:03:08 server id 1  end_log_pos 356   Update_rows: table id 17 flags: STMT_END_F
           BINLOG '
           fAS3SBMBAAAALAAAAC4BAAAAABEAAAAAAAAABHRlc3QAAXQAAwMPCgIUAAQ=
           fAS3SBgBAAAANgAAAGQBAAAQABEAAAAAAAEAA////AEAAAAFYXBwbGX4AQAAAARwZWFyIbIP
           '/*!*/;
           ### UPDATE test.t
           ### WHERE
           ###   @1=1
           ###   @2='apple'
           ###   @3=NULL
           ### SET
           ###   @1=1
           ###   @2='pear'
           ###   @3='2009:01:01'
           ...
           # at 400
           #080828 15:03:08 server id 1  end_log_pos 442   Delete_rows: table id 17 flags: STMT_END_F
           BINLOG '
           fAS3SBMBAAAALAAAAJABAAAAABEAAAAAAAAABHRlc3QAAXQAAwMPCgIUAAQ=
           fAS3SBkBAAAAKgAAALoBAAAQABEAAAAAAAEAA//4AQAAAARwZWFyIbIP
           '/*!*/;
           ### DELETE FROM test.t
           ### WHERE
           ###   @1=1
           ###   @2='pear'
           ###   @3='2009:01:01'

       Specify ----vveerrbboossee or --vv twice to also display data types and some
       metadata for each column. The output will contain an additional comment
       following each column change:

           shell> mmyyssqqllbbiinnlloogg --vvvv _l_o_g___f_i_l_e
           ...
           # at 218
           #080828 15:03:08 server id 1  end_log_pos 258   Write_rows: table id 17 flags: STMT_END_F
           BINLOG '
           fAS3SBMBAAAALAAAANoAAAAAABEAAAAAAAAABHRlc3QAAXQAAwMPCgIUAAQ=
           fAS3SBcBAAAAKAAAAAIBAAAQABEAAAAAAAEAA//8AQAAAAVhcHBsZQ==
           '/*!*/;
           ### INSERT INTO test.t
           ### SET
           ###   @1=1 /* INT meta=0 nullable=0 is_null=0 */
           ###   @2='apple' /* VARSTRING(20) meta=20 nullable=0 is_null=0 */
           ###   @3=NULL /* VARSTRING(20) meta=0 nullable=1 is_null=1 */
           ...
           # at 302
           #080828 15:03:08 server id 1  end_log_pos 356   Update_rows: table id 17 flags: STMT_END_F
           BINLOG '
           fAS3SBMBAAAALAAAAC4BAAAAABEAAAAAAAAABHRlc3QAAXQAAwMPCgIUAAQ=
           fAS3SBgBAAAANgAAAGQBAAAQABEAAAAAAAEAA////AEAAAAFYXBwbGX4AQAAAARwZWFyIbIP
           '/*!*/;
           ### UPDATE test.t
           ### WHERE
           ###   @1=1 /* INT meta=0 nullable=0 is_null=0 */
           ###   @2='apple' /* VARSTRING(20) meta=20 nullable=0 is_null=0 */
           ###   @3=NULL /* VARSTRING(20) meta=0 nullable=1 is_null=1 */
           ### SET
           ###   @1=1 /* INT meta=0 nullable=0 is_null=0 */
           ###   @2='pear' /* VARSTRING(20) meta=20 nullable=0 is_null=0 */
           ###   @3='2009:01:01' /* DATE meta=0 nullable=1 is_null=0 */
           ...
           # at 400
           #080828 15:03:08 server id 1  end_log_pos 442   Delete_rows: table id 17 flags: STMT_END_F
           BINLOG '
           fAS3SBMBAAAALAAAAJABAAAAABEAAAAAAAAABHRlc3QAAXQAAwMPCgIUAAQ=
           fAS3SBkBAAAAKgAAALoBAAAQABEAAAAAAAEAA//4AQAAAARwZWFyIbIP
           '/*!*/;
           ### DELETE FROM test.t
           ### WHERE
           ###   @1=1 /* INT meta=0 nullable=0 is_null=0 */
           ###   @2='pear' /* VARSTRING(20) meta=20 nullable=0 is_null=0 */
           ###   @3='2009:01:01' /* DATE meta=0 nullable=1 is_null=0 */

       You can tell mmyyssqqllbbiinnlloogg to suppress the BINLOG statements for row
       events by using the ----bbaassee6644--oouuttppuutt==DDEECCOODDEE--RROOWWSS option. This is similar
       to ----bbaassee6644--oouuttppuutt==NNEEVVEERR but does not exit with an error if a row event
       is found. The combination of ----bbaassee6644--oouuttppuutt==DDEECCOODDEE--RROOWWSS and ----vveerrbboossee
       provides a convenient way to see row events only as SQL statements:

           shell> mmyyssqqllbbiinnlloogg --vv ----bbaassee6644--oouuttppuutt==DDEECCOODDEE--RROOWWSS _l_o_g___f_i_l_e
           ...
           # at 218
           #080828 15:03:08 server id 1  end_log_pos 258   Write_rows: table id 17 flags: STMT_END_F
           ### INSERT INTO test.t
           ### SET
           ###   @1=1
           ###   @2='apple'
           ###   @3=NULL
           ...
           # at 302
           #080828 15:03:08 server id 1  end_log_pos 356   Update_rows: table id 17 flags: STMT_END_F
           ### UPDATE test.t
           ### WHERE
           ###   @1=1
           ###   @2='apple'
           ###   @3=NULL
           ### SET
           ###   @1=1
           ###   @2='pear'
           ###   @3='2009:01:01'
           ...
           # at 400
           #080828 15:03:08 server id 1  end_log_pos 442   Delete_rows: table id 17 flags: STMT_END_F
           ### DELETE FROM test.t
           ### WHERE
           ###   @1=1
           ###   @2='pear'
           ###   @3='2009:01:01'


           NNoottee
           You should not suppress BINLOG statements if you intend to
           re-execute mmyyssqqllbbiinnlloogg output.

       The SQL statements produced by ----vveerrbboossee for row events are much more
       readable than the corresponding BINLOG statements. However, they do not
       correspond exactly to the original SQL statements that generated the
       events. The following limitations apply:

       +o   The original column names are lost and replaced by @_N, where _N is a
           column number.

       +o   Character set information is not available in the binary log, which
           affects string column display:

           +o   There is no distinction made between corresponding binary and
               nonbinary string types (BINARY and CHAR, VARBINARY and VARCHAR,
               BLOB and TEXT). The output uses a data type of STRING for
               fixed-length strings and VARSTRING for variable-length strings.

           +o   For multibyte character sets, the maximum number of bytes per
               character is not present in the binary log, so the length for
               string types is displayed in bytes rather than in characters.
               For example, STRING(4) will be used as the data type for values
               from either of these column types:

                   CHAR(4) CHARACTER SET latin1
                   CHAR(2) CHARACTER SET ucs2

           +o   Due to the storage format for events of type UPDATE_ROWS_EVENT,
               UPDATE statements are displayed with the WHERE clause preceding
               the SET clause.

       Proper interpretation of row events requires the information from the
       format description event at the beginning of the binary log. Because
       mmyyssqqllbbiinnlloogg does not know in advance whether the rest of the log
       contains row events, by default it displays the format description
       event using a BINLOG statement in the initial part of the output.

       If the binary log is known not to contain any events requiring a BINLOG
       statement (that is, no row events), the ----bbaassee6644--oouuttppuutt==NNEEVVEERR option
       can be used to prevent this header from being written.

CCOOPPYYRRIIGGHHTT
       Copyright (C) 1997, 2016, Oracle and/or its affiliates. All rights
       reserved.

       This documentation is free software; you can redistribute it and/or
       modify it only under the terms of the GNU General Public License as
       published by the Free Software Foundation; version 2 of the License.

       This documentation is distributed in the hope that it will be useful,
       but WITHOUT ANY WARRANTY; without even the implied warranty of
       MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
       General Public License for more details.

       You should have received a copy of the GNU General Public License along
       with the program; if not, write to the Free Software Foundation, Inc.,
       51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA or see
       http://www.gnu.org/licenses/.


NNOOTTEESS
        1. MySQL Internals: The Binary Log
           http://dev.mysql.com/doc/internals/en/binary-log.html

SSEEEE AALLSSOO
       For more information, please refer to the MySQL Reference Manual, which
       may already be installed locally and which is also available online at
       http://dev.mysql.com/doc/.

AAUUTTHHOORR
       Oracle Corporation (http://dev.mysql.com/).



MySQL 5.5                         03/01/2016                    MYSQLBINLOG(1)
