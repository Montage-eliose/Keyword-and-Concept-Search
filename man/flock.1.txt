FLOCK(1)                         User Commands                        FLOCK(1)



NNAAMMEE
       flock - manage locks from shell scripts

SSYYNNOOPPSSIISS
       fflloocckk [--ssxxoonn] [--ww _t_i_m_e_o_u_t] _l_o_c_k_f_i_l_e [--cc] _c_o_m_m_a_n_d_._._.

       fflloocckk [--ssxxoonn] [--ww _t_i_m_e_o_u_t] _l_o_c_k_d_i_r [--cc] _c_o_m_m_a_n_d_._._.

       fflloocckk [--ssxxuunn] [--ww _t_i_m_e_o_u_t] _f_d

DDEESSCCRRIIPPTTIIOONN
       This  utility  manages  fflloocckk(2) locks from within shell scripts or the
       command line.

       The first and second forms wraps the lock around the executing  a  com-
       mand,  in a manner similar to ssuu(1) or nneewwggrrpp(1).  It locks a specified
       file or directory, which is created (assuming appropriate permissions),
       if it does not already exist.

       The  third form is convenient inside shell scripts, and is usually used
       the following manner:

       (
         flock -n 9 || exit 1
         # ... commands executed under lock ...
       ) 9>/var/lock/mylockfile

       The mode used to open the file doesn't matter to fflloocckk; using >  or  >>
       allows  the  lockfile  to be created if it does not already exist, how-
       ever, write permission is required; using  <  requires  that  the  file
       already exists but only read permission is required.

       By  default,  if  the  lock cannot be immediately acquired, fflloocckk waits
       until the lock is available.

OOPPTTIIOONNSS
       --ss, ----sshhaarreedd
              Obtain a shared lock, sometimes called a read lock.

       --xx, --ee, ----eexxcclluussiivvee
              Obtain an exclusive lock, sometimes called a write  lock.   This
              is the default.

       --uu, ----uunnlloocckk
              Drop  a  lock.   This  is  usually not required, since a lock is
              automatically dropped when the file is closed.  However, it  may
              be  required  in special cases, for example if the enclosed com-
              mand group may have forked a background process which should not
              be holding the lock.

       --nn, ----nnbb, ----nnoonnbblloocckk
              Fail  (with an exit code of 1) rather than wait if the lock can-
              not be immediately acquired.

       --ww, ----wwaaiitt, ----ttiimmeeoouutt _s_e_c_o_n_d_s
              Fail (with an exit code of 1) if the  lock  cannot  be  acquired
              within _s_e_c_o_n_d_s seconds.  Decimal fractional values are allowed.

       --oo, ----cclloossee
              Close  the file descriptor on which the lock is held before exe-
              cuting _c_o_m_m_a_n_d.  This  is  useful  if  _c_o_m_m_a_n_d  spawns  a  child
              process which should not be holding the lock.

       --cc, ----ccoommmmaanndd _c_o_m_m_a_n_d
              Pass a single _c_o_m_m_a_n_d to the shell with --cc.

       --hh, ----hheellpp
              Print a help message.

AAUUTTHHOORR
       Written by H. Peter Anvin <hpa@zytor.com>.

CCOOPPYYRRIIGGHHTT
       Copyright (C) 2003-2006 H. Peter Anvin.
       This is free software; see the source for copying conditions.  There is
       NO warranty; not even for MERCHANTABILITY or FITNESS FOR  A  PARTICULAR
       PURPOSE.

SSEEEE AALLSSOO
       fflloocckk(2)

AAVVAAIILLAABBIILLIITTYY
       The  flock  command  is part of the util-linux package and is available
       from ftp://ftp.kernel.org/pub/linux/utils/util-linux/.



util-linux                       February 2006                        FLOCK(1)
