LTRACE(1)                        User Commands                       LTRACE(1)



NNAAMMEE
       ltrace - A library call tracer


SSYYNNOOPPSSIISS
       llttrraaccee  [-e  _f_i_l_t_e_r|-L] [-l|--library=_l_i_b_r_a_r_y___p_a_t_t_e_r_n] [-x _f_i_l_t_e_r] [-S]
       [-b|--no-signals] [-i] [-w|--where=_n_r] [-r|-t|-tt|-ttt] [-T] [-F  _f_i_l_e_-
       _n_a_m_e]  [-A  _m_a_x_e_l_t_s]  [-s  _s_t_r_s_i_z_e] [-C|--demangle] [-a|--align _c_o_l_u_m_n]
       [-n|--indent _n_r] [-o|--output _f_i_l_e_n_a_m_e] [-D|--debug _m_a_s_k] [-u _u_s_e_r_n_a_m_e]
       [-f] [-p _p_i_d] [[--] _c_o_m_m_a_n_d _[_a_r_g _._._._]]

       llttrraaccee  -c  [-e  _f_i_l_t_e_r|-L]  [-l|--library=_l_i_b_r_a_r_y___p_a_t_t_e_r_n] [-x _f_i_l_t_e_r]
       [-S] [-o|--output _f_i_l_e_n_a_m_e] [-f] [-p _p_i_d] [[--] _c_o_m_m_a_n_d _[_a_r_g _._._._]]

       llttrraaccee -V|--version

       llttrraaccee -h|--help


DDEESSCCRRIIPPTTIIOONN
       llttrraaccee is a program that simply runs the  specified  _c_o_m_m_a_n_d  until  it
       exits.   It  intercepts and records the dynamic library calls which are
       called by the executed process and the signals which  are  received  by
       that  process.   It  can also intercept and print the system calls exe-
       cuted by the program.

       Its use is very similar to ssttrraaccee((11)).


OOPPTTIIOONNSS
       -a, --align _c_o_l_u_m_n
              Align return values in a specific _c_o_l_u_m_n (default column is  5/8
              of screen width).

       -A _m_a_x_e_l_t_s
              Maximum number of array elements to print before suppressing the
              rest with an ellipsis  ("...").   This  also  limits  number  of
              recursive structure expansions.

       -b, --no-signals
              Disable printing of signals recieved by the traced process.

       -c     Count  time and calls for each library call and report a summary
              on program exit.

       -C, --demangle
              Decode (demangle) low-level symbol names into user-level  names.
              Besides  removing any initial underscore prefix used by the sys-
              tem, this makes C++ function names readable.

       -D, --debug mask
              Show debugging output of llttrraaccee itself.  _m_a_s_k is a  number  with
              internal meaning that's not really well defined at all.  _m_a_s_k of
              77 shows all debug messages, which is what you usually need.

       -e _f_i_l_t_e_r
              A qualifying expression which modifies which  library  calls  to
              trace.   The format of the filter expression is described in the
              section FFIILLTTEERR EEXXPPRREESSSSIIOONNSS.  If more than one -e option  appears
              on  the  command  line, the library calls that match any of them
              are traced.  If no -e is given, @@MMAAIINN is assumed as a default.

       -f     Trace child processes as they are created  by  currently  traced
              processes  as  a result of the fork(2) or clone(2) system calls.
              The new process is attached immediately.

       -F _f_i_l_e_n_a_m_e
              Load an alternate config file.  Normally,  /etc/ltrace.conf  and
              ~/.ltrace.conf will be read (the latter only if it exists).  Use
              this option to load the given file or files instead of those two
              default  files.  See ltrace.conf(5) for details on the syntax of
              ltrace configuration files.

       -h, --help
              Show a summary of the options to ltrace and exit.

       -i     Print the instruction pointer at the time of the library call.

       -l, --library _l_i_b_r_a_r_y___p_a_t_t_e_r_n
              Display only calls to functions implemented  by  libraries  that
              match  _l_i_b_r_a_r_y___p_a_t_t_e_r_n_.   Multiple library patters can be speci-
              fied  with  several  instances  of  this  option.    Syntax   of
              library_pattern is described in section FFIILLTTEERR EEXXPPRREESSSSIIOONNSS.

              Note that while this option selects calls that might be directed
              to the selected libraries, there's no actual guarantee that  the
              call  won't be directed elsewhere due to e.g. LD_PRELOAD or sim-
              ply dependency ordering.  If you want to make sure that  symbols
              in  given  library  are actually called, use --xx @@_l_i_b_r_a_r_y___p_a_t_t_e_r_n
              instead.

       -L     When no -e option is given, don't assume the default  action  of
              @@MMAAIINN.

       -n, --indent _n_r
              Indent trace output by _n_r spaces for each level of call nesting.
              Using this option makes the program flow visualization  easy  to
              follow.   This  indents  uselessly  also  functions  that  never
              return, such as service functions for throwing exceptions in the
              C++ runtime.

       -o, --output _f_i_l_e_n_a_m_e
              Write  the  trace  output  to  the  file _f_i_l_e_n_a_m_e rather than to
              stderr.

       -p _p_i_d Attach to the process with the process ID _p_i_d and begin tracing.
              This  option can be used together with passing a command to exe-
              cute.  It is possible to attach to several processes by  passing
              more than one option -p.

       -r     Print  a  relative  timestamp with each line of the trace.  This
              records the time difference between the beginning of  successive
              lines.

       -s _s_t_r_s_i_z_e
              Specify the maximum string size to print (the default is 32).

       -S     Display system calls as well as library calls

       -t     Prefix each line of the trace with the time of day.

       -tt    If given twice, the time printed will include the microseconds.

       -ttt   If  given thrice, the time printed will include the microseconds
              and the leading portion will be printed as the number of seconds
              since the epoch.

       -T     Show   the   time  spent inside each call. This records the time
              difference between the beginning and the end of each call.

       -u _u_s_e_r_n_a_m_e
              Run command with the userid, groupid and supplementary groups of
              _u_s_e_r_n_a_m_e.   This  option is only useful when running as root and
              enables the correct execution of setuid and/or setgid binaries.

       -w, --where _n_r
              Show backtrace of _n_r stack frames for each traced function. This
              option  enabled only if libunwind support was enabled at compile
              time.

       -x _f_i_l_t_e_r
              A qualifying expression which modifies which symbol table  entry
              points  to  trace.   The  format  of  the  filter  expression is
              described in the section FFIILLTTEERR EEXXPPRREESSSSIIOONNSS.  If more  than  one
              -x  option  appears  on the command line, the symbols that match
              any of them are traced.  No entry points are traced if no -x  is
              given.

       -V, --version
              Show the version number of ltrace and exit.


FFIILLTTEERR EEXXPPRREESSSSIIOONNSS
       Filter  expression  is  a chain of glob- or regexp-based rules that are
       used to pick symbols for tracing from libraries that the process  uses.
       Most  of  it  is intuitive, so as an example, the following would trace
       calls to malloc and free, except those done by libc:

       -e malloc+free-@libc.so*

       This reads: trace malloc and free, but don't trace anything that  comes
       from  libc.   Semi-formally,  the  syntax  of  the  above example looks
       approximately like this:

       {[+-][_s_y_m_b_o_l___p_a_t_t_e_r_n][@_l_i_b_r_a_r_y___p_a_t_t_e_r_n]}

       _S_y_m_b_o_l___p_a_t_t_e_r_n is used to match symbol names, _l_i_b_r_a_r_y___p_a_t_t_e_r_n to  match
       library SONAMEs.  Both are implicitly globs, but can be regular expres-
       sions as well (see below).  The glob syntax supports meta-characters  **
       and  ??  and  character classes, similarly to what basic bash globs sup-
       port.  ^^ and $$ are recognized to mean, respectively, start and  end  of
       given name.

       Both  _s_y_m_b_o_l___p_a_t_t_e_r_n  and _l_i_b_r_a_r_y___p_a_t_t_e_r_n have to match the whole name.
       If you want to match only part of the name, surround it with one or two
       *'s  as  appropriate.  The exception is if the pattern is not mentioned
       at all, in which case it's as if the corresponding pattern were **.  (So
       mmaalllloocc is really mmaalllloocc@@** and @@lliibbcc..** is really **@@lliibbcc..**.)

       In  libraries that don't have an explicit SONAME, basename is taken for
       SONAME.  That holds for main binary as well: //bbiinn//eecchhoo has an  implicit
       SONAME  of  eecchhoo.   In  addition  to that, special library pattern MMAAIINN
       always matches symbols in the main binary  and  never  a  library  with
       actual SONAME MMAAIINN (use e.g. ^^MMAAIINN or [[MM]]AAIINN for that).

       If  the  symbol  or  library  pattern  is  surrounded in slashes (/like
       this/), then it is considered  a  regular  expression  instead.   As  a
       shorthand, instead of writing //xx//@@//yy//, you can write //xx@@yy//.

       If  the library pattern starts with a slash, it is not a SONAME expres-
       sion, but a path expression, and is matched against  the  library  path
       name.

       The first rule may lack a sign, in which case ++ is assumed.  If, on the
       other hand, the first rule has a -- sign, it is as if there was  another
       rule  @@  in  front of it, which has the effect of tracing complement of
       given rule.

       The above rules are used to construct the set of traced symbols.   Each
       candidate  symbol  is  passed  through  the chain of above rules.  Ini-
       tially, the symbol is _u_n_m_a_r_k_e_d.  If it matches a  ++  rule,  it  becomes
       _m_a_r_k_e_d,  if  it matches a -- rule, it becomes _u_n_m_a_r_k_e_d again.  If, after
       applying all rules, the symbol is _m_a_r_k_e_d, it will be traced.


BBUUGGSS
       It has most of the bugs stated in ssttrraaccee((11)).

       It only works on Linux and in a small subset of architectures.

       If you would like to report a bug, send a message to the  mailing  list
       (ltrace-devel@lists.alioth.debian.org), or use the rreeppoorrttbbuugg((11)) program
       if you are under the Debian GNU/Linux distribution.


FFIILLEESS
       _/_e_t_c_/_l_t_r_a_c_e_._c_o_n_f
              System configuration file

       _~_/_._l_t_r_a_c_e_._c_o_n_f
              Personal config file, overrides _/_e_t_c_/_l_t_r_a_c_e_._c_o_n_f


AAUUTTHHOORR
       Juan Cespedes <cespedes@debian.org>
       Petr Machata <pmachata@redhat.com>


SSEEEE AALLSSOO
       llttrraaccee..ccoonnff((55)),, ssttrraaccee((11)), ppttrraaccee((22))



                                 January 2013                        LTRACE(1)
