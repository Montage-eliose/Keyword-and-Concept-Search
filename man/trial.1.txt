TRIAL(1)                                                              TRIAL(1)



NNAAMMEE
       trial - run unit tests

SSYYNNOOPPSSIISS
       ttrriiaall  [  _o_p_t_i_o_n_s ] [ _f_i_l_e | _p_a_c_k_a_g_e | _m_o_d_u_l_e | _T_e_s_t_C_a_s_e | _t_e_s_t_m_e_t_h_o_d ]
       ...

       ttrriiaall ----hheellpp | --hh

DDEESSCCRRIIPPTTIIOONN
       trial loads and executes a suite of unit tests, obtained from  modules,
       packages and files listed on the command line.

       trial  will  take  either  filenames or fully qualified Python names as
       arguments.  Thus `trial myproject/foo.py',  `trial  myproject.foo'  and
       `trial  myproject.foo.SomeTestCase.test_method'  are  all valid ways to
       invoke trial. Multiple such arguments  are  also  accepted,  and  their
       order  will  determine  the  order in which the corresponding tests are
       run.

       After running the given test suite, the default test reporter prints  a
       summary  of  the  test  run. This consists of the word "PASSED" (if all
       tests ran as expected) or "FAILED" (if any test  behaved  unexpectedly)
       followed by a count of the different kinds of test results encountered.
       The possible kinds of test results includes:

       successes
              Tests that passed all their  assertions  and  completed  without
              error.  These are marked "PASSED" in the normal test output.

       failures
              Tests that failed an assertion, called self.fail() or explicitly
              raised self.failureException for some reason. These  are  marked
              "FAILED" in the normal test output.

       errors Tests  that raised an unexpected exception (including Assertion-
              Error), tests that caused the  tearDown()  method  to  raise  an
              exception,  tests that run for longer than the timeout interval,
              tests that caused  something  to  call  twisted.python.log.err()
              without  subsequently  calling  self.flushLoggedErrors(),  tests
              that leave the reactor in  an  unclean  state,  etc.  These  are
              marked "ERROR" in the normal test output.

              Note  that  because  errors  can be caused after the actual test
              method returns, it is possible for a single test to be  reported
              as  both  an  error and a failure, and hence the total number of
              test results can be greater than the total number of tests  exe-
              cuted.

       skips  Tests  that  were  skipped, usually because of missing dependen-
              cies. These are marked "SKIPPED" in the normal test output.

       expectedFailures
              Tests that failed, but were expected to  fail,  usually  because
              the  test  is  for  a  feature that hasn't been implemented yet.
              These are marked "TODO" in the normal test output.

       unexpectedSuccesses
              Tests that  should  have  been  listed  under  expectedFailures,
              except that for some reason the test succeeded. These are marked
              "SUCCESS!?!" in the normal test output.

OOPPTTIIOONNSS
       --jj, ----jjoobbss _n_u_m_b_e_r
              Set the number of process workers to run. It conflicts with  the
              debug, exitfirst and profile options.

       --bb, ----ddeebbuugg
              Run the tests in a debugger. If that debugger is 'pdb' (which is
              the default if unspecified), a `.pdbrc' will be loaded from  the
              current  directory if it exists. Also does post-mortem debugging
              on exceptions.

       --BB, ----ddeebbuugg--ssttaacckkttrraacceess
              Report Deferred creation and callback stack traces.

       ----ccoovveerraaggee
              Generate coverage information in the `coverage' subdirectory  of
              the  trial  temp  directory (`_trial_temp' by default). For each
              Python module touched by the execution of  the  given  tests,  a
              file  will  be  created  in the coverage directory named for the
              module's fully-qualified name with  the  suffix  `.cover'.   For
              example, because the trial test runner is written in Python, the
              coverage directory will  almost  always  contain  a  file  named
              `twisted.trial.runner.cover'.

              Each  `.cover'  file contains a copy of the Python source of the
              module in question, with a prefix at the beginning of each  line
              containing  coverage  information.   For lines that are not exe-
              cutable (blank lines, comments, etc.)  the prefix is blank.  For
              executable  lines that were run in the course of the test suite,
              the prefix is a number indicating the number of times that  line
              was  executed.   The  string  `>>>>>>' prefixes executable lines
              that were not executed in the course of the test suite.

              Note that this functionality uses Python's sys.settrace()  func-
              tion, so tests that call sys.settrace() themselves are likely to
              break trial's coverage functionality.

       ----ddeebbuuggggeerr
              Specifies the debugger to use when the --debug option is passed.
              The  argument  should  be  the fully qualified name of an object
              that implements the same interface  as  the  standard  library's
              `pdb'.

       ----ddiissaabblleeggcc
              Disable  the garbage collector for the duration of the test run.
              As each test is run, trial saves the TestResult  objects,  which
              means  that  Python's  garbage  collector  has  more non-garbage
              objects to wade  through,  making  each  garbage-collection  run
              slightly slower. Disabling garbage collection entirely will make
              some test suites complete faster (contrast  --force-gc,  below),
              at the cost of increasing (possibly greatly) memory consumption.
              This option also makes tests slightly more deterministic,  which
              might help debugging in extreme circumstances.

       --ee, ----rrtteerrrroorrss
              Print tracebacks to standard output as soon as they occur.

       ----ffoorrccee--ggcc
              Run  gc.collect()  before  and after each test case. This can be
              used to isolate errors that occur when  objects  get  collected.
              This  option  would  be  the  default, except it makes tests run
              about ten times slower.

       --hh, ----hheellpp
              Print a usage message to standard output, then exit.

       ----hheellpp--oorrddeerr
              Print a list of possible orders that TestCase test  methods  can
              be  run  in,  then exit. The orders can be used with the --order
              option described below.

       ----hheellpp--rreeppoorrtteerrss
              Print a list of valid reporters to standard output,  then  exit.
              Reporters  can  be selected with the --reporter option described
              below.

       ----hheellpp--rreeaaccttoorrss
              Print a list of possible reactors to standard output, then exit.
              Not  all  listed reactors are available on every platform. Reac-
              tors can be selected with the --reactor option described below.

       --ll, ----llooggffiillee _l_o_g_f_i_l_e
              Direct the  log  to  a  different  file.  The  default  file  is
              `test.log'.  _l_o_g_f_i_l_e is relative to _trial_temp.

       --nn, ----ddrryy--rruunn
              Go through all the tests and make them pass without running.

       --NN, ----nnoo--rreeccuurrssee
              By default, trial recurses through packages to find every module
              inside every subpackage.  Unless,  that  is,  you  specify  this
              option.

       ----nnooppmm Don't  automatically jump into debugger for post-mortem analysis
              of exceptions.  Only usable in conjunction with --debug.

       ----oorrddeerr _o_r_d_e_r
              Specify what order to run the individual test methods within the
              given  TestCases.  By  default, they are run alphabetically. See
              --help-order for a list of other valid values.

       ----pprrooffiillee
              Run tests under the Python profiler.

       --rr, ----rreeaaccttoorr _r_e_a_c_t_o_r
              Choose which reactor to use.  See --help-reactors for a list.

       ----rreeccuurrssiioonnlliimmiitt _l_i_m_i_t
              Set Python's recursion limit. See sys.setrecursionlimit().

       ----rreeppoorrtteerr _r_e_p_o_r_t_e_r
              Select the reporter to use for trial's output.  Use the  --help-
              reporters option to see a list of valid reporters.

       --xx, ----eexxiittffiirrsstt
              Stop  the  test run after the first test which does not succeed.
              This includes failures, errors, or unexpected  successes.  Won't
              work with the --jobs option currently.

       ----ssppeeww Print an insanely verbose log of everything that happens. Useful
              when debugging freezes or locks in complex code.

       ----ttbbffoorrmmaatt _f_o_r_m_a_t
              Format  to  display  tracebacks  with.  Acceptable  values   are
              `default',  `brief'  and  `verbose'. `brief' produces tracebacks
              that play nicely with Emacs' GUD.

       ----tteemmpp--ddiirreeccttoorryy _d_i_r_e_c_t_o_r_y
              WARNING: Do not use this option unless you  know  what  you  are
              doing.  By default, trial creates a directory called _trial_temp
              under the current working directory.  When trial runs, it  first
              _d_e_l_e_t_e_s  this  directory, then creates it, then changes into the
              directory to run the tests. The log file and any coverage  files
              are  stored  here. Use this option if you wish to have trial run
              in a directory other than _trial_temp.  Be  warned,  trial  will
              _d_e_l_e_t_e the directory before re-creating it.

       ----tteessttmmoodduullee _f_i_l_e_n_a_m_e
              Ask  trial  to  look  into  _f_i_l_e_n_a_m_e and run any tests specified
              using the Emacs-style buffer variable `test-case-name'.

       ----uunncclleeaann--wwaarrnniinnggss
              As of Twisted 8.0, trial will report an error if the reactor  is
              left  unclean at the end of the test. This option is provided to
              assist in migrating from Twisted 2.5 to Twisted 8.0  and  later.
              Enabling this option will turn the errors into warnings.

       --uu, ----uunnttiill--ffaaiilluurree
              Keep  looping  the  tests until one of them raises an error or a
              failure.  This is particularly useful for reproducing  intermit-
              tent failures.

       ----vveerrssiioonn
              Prints the Twisted version number and exit.

       ----wwiitthhoouutt--mmoodduullee _m_o_d_u_l_e_n_a_m_e_s
              Simulate  the lack of the specified comma-separated list of mod-
              ules. This makes it look like the modules are not present in the
              system,  causing tests to check the behavior for that configura-
              tion.

       --zz, ----rraannddoomm _s_e_e_d
              Run the tests in random order using the  specified  seed.  Don't
              pass this option if you also are passing --order.

SSEEEE AALLSSOO
       The  latest  version  of  the  trial  documentation  can  be  found  at
       http://twistedmatrix.com/documents/current/core/howto/testing.html

AAUUTTHHOORR
       Written by Jonathan M. Lange

RREEPPOORRTTIINNGG BBUUGGSS
       To report a bug, visit http://twistedmatrix.com/trac/newticket

CCOOPPYYRRIIGGHHTT
       Copyright (C) 2003-2013 Twisted Matrix Laboratories
       This is free software; see the source for copying conditions.  There is
       NO  warranty;  not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR
       PURPOSE.



                                   Jun 2013                           TRIAL(1)
