rpcgen(1)                   General Commands Manual                  rpcgen(1)



NNAAMMEE
       _rr_pp_cc_gg_ee_nn - an RPC protocol compiler

SSYYNNOOPPSSIISS
       _rr_pp_cc_gg_ee_nn _i_n_f_i_l_e
       _rr_pp_cc_gg_ee_nn _[[_--_DD_n_a_m_e_[[_==_v_a_l_u_e_]]_]] _[[_--_TT_]] _[[_--_KK _s_e_c_s_]] _i_n_f_i_l_e
       _rr_pp_cc_gg_ee_nn _--_cc_||_--_hh_||_--_ll_||_--_mm_||_--_MM_||_--_tt _[[_--_oo _o_u_t_f_i_l_e _]] _i_n_f_i_l_e
       _rr_pp_cc_gg_ee_nn _[[_--_II_]] _--_ss _n_e_t_t_y_p_e _[[_--_oo _o_u_t_f_i_l_e_]] _i_n_f_i_l_e
       _rr_pp_cc_gg_ee_nn _--_nn _n_e_t_i_d _[[_--_oo _o_u_t_f_i_l_e_]] _i_n_f_i_l_e

DDEESSCCRRIIPPTTIIOONN
       _rr_pp_cc_gg_ee_nn  is  a  tool that generates C code to implement an RPC protocol.
       The input to _rr_pp_cc_gg_ee_nn is a language similar to C known  as  RPC  Language
       (Remote Procedure Call Language).

       _rr_pp_cc_gg_ee_nn  is  normally  used  as  in the first synopsis where it takes an
       input file and generates up to four output files.   If  the  _i_n_f_i_l_e  is
       named  _pp_rr_oo_tt_oo_.._xx, then _rr_pp_cc_gg_ee_nn will generate a header file in _pp_rr_oo_tt_oo_.._hh, XDR
       routines in _pp_rr_oo_tt_oo____xx_dd_rr_.._cc, server-side stubs in _pp_rr_oo_tt_oo____ss_vv_cc_.._cc, and  client-
       side  stubs in _pp_rr_oo_tt_oo____cc_ll_nn_tt_.._cc.  With the _--_TT option, it will also generate
       the RPC dispatch table in _pp_rr_oo_tt_oo____tt_bb_ll_.._ii.  With the _--_SS_cc  option,  it  will
       also generate  sample code which would illustrate how to use the remote
       procedures  on  the  client  side.  This  code  would  be  created   in
       _pp_rr_oo_tt_oo____cc_ll_ii_ee_nn_tt_.._cc.   With  the  _--_SS_ss option, it will also generate a sample
       server code which would illustrate how to write the remote  procedures.
       This code would be created in _pp_rr_oo_tt_oo____ss_ee_rr_vv_ee_rr_.._cc.

       The  server created can be started both by the port monitors (for exam-
       ple, _ii_nn_ee_tt_dd or _ll_ii_ss_tt_ee_nn) or by itself.  When it is started by a port moni-
       tor,  it  creates  servers  only  for  the transport for which the file
       descriptor _00 was passed.  The name of the transport must  be  specified
       by setting up the environmental variable _PP_MM____TT_RR_AA_NN_SS_PP_OO_RR_TT.  When the server
       generated by _rr_pp_cc_gg_ee_nn is executed, it creates server handles for all  the
       transports  specified  in  _NN_EE_TT_PP_AA_TT_HH  environment  variable,  or if it is
       unset, it creates server handles for all the  visible  transports  from
       _//_ee_tt_cc_//_nn_ee_tt_cc_oo_nn_ff_ii_gg  file.   Note: the transports are chosen at run time and
       not at compile time.

       When built for a port monitor (_rr_pp_cc_gg_ee_nn _--_II), and that the server is self-
       started,  it  backgrounds  itself  by default.  A special define symbol
       _RR_PP_CC____SS_VV_CC____FF_GG can be used to run the server process in foreground.

       The second synopsis provides special features which allow for the  cre-
       ation  of  more sophisticated RPC servers.  These features include sup-
       port for user provided _##_dd_ee_ff_ii_nn_ee_ss and RPC dispatch tables.   The  entries
       in the RPC dispatch table contain:
              +o  pointers  to the service routine corresponding to that proce-
                 dure,
              +o  a pointer to the input and output arguments
              +o  the size of these routines
       A server can use the dispatch table to check authorization and then  to
       execute  the  service routine; a client library may use it to deal with
       the details of storage management and XDR data conversion.

       The other three synopses shown above are used when one does not want to
       generate  all  the output files, but only a particular one.  Some exam-
       ples of their usage is described in the EXAMPLE  section  below.   When
       _rr_pp_cc_gg_ee_nn is executed with the _--_ss option, it creates servers for that par-
       ticular class of transports.  When executed with the _--_nn option, it cre-
       ates  a  server for the transport specified by _n_e_t_i_d.  If _i_n_f_i_l_e is not
       specified, _rr_pp_cc_gg_ee_nn accepts the standard input.

       The C preprocessor, _cc_cc _--_EE [see _cc_cc(1)], is run on the input file  before
       it  is  actually  interpreted by _rr_pp_cc_gg_ee_nn.  For each type of output file,
       _rr_pp_cc_gg_ee_nn defines a special preprocessor symbol for use by the _rr_pp_cc_gg_ee_nn pro-
       grammer:

       _RR_PP_CC____HH_DD_RR     defined when compiling into header files
       _RR_PP_CC____XX_DD_RR     defined when compiling into XDR routines
       _RR_PP_CC____SS_VV_CC     defined when compiling into server-side stubs
       _RR_PP_CC____CC_LL_NN_TT    defined when compiling into client-side stubs
       _RR_PP_CC____TT_BB_LL     defined when compiling into RPC dispatch tables

       Any  line  beginning  with `_%%' is passed directly into the output file,
       uninterpreted by _rr_pp_cc_gg_ee_nn.

       For every data type referred to in _i_n_f_i_l_e, _rr_pp_cc_gg_ee_nn  assumes  that  there
       exists a routine with the string _xx_dd_rr___ prepended to the name of the data
       type.  If this routine does not exist in the RPC/XDR library,  it  must
       be  provided.  Providing an undefined data type allows customization of
       XDR routines.

       The following options are available:

       _--_aa     Generate all the files including  sample  code  for  client  and
              server side.

       _--_bb     This  generates  code  for  the SunOS4.1 style of rpc. It is for
              backward compatibility.  This is the default.

       _--_55     This generates code for the SysVr4 style of rpc. It is  used  by
              the  Transport  Independent  RPC  that  is  in Svr4 systems.  By
              default rpcgen generates code for SunOS4.1 stype of rpc.

       _--_cc     Compile into XDR routines.

       _--_CC     Generate code in ANSI C. This option also  generates  code  that
              could be compiled with the C++ compiler.  This is the default.

       _--_kk     Generate code in K&R C.  The default is ANSI C.

       _--_DD_n_a_m_e_[[_==_v_a_l_u_e_]]
              Define  a  symbol  _n_a_m_e.  Equivalent to the _##_dd_ee_ff_ii_nn_ee directive in
              the source.  If no _v_a_l_u_e is given, _v_a_l_u_e is defined as _11.   This
              option may be specified more than once.

       _--_hh     Compile  into _CC data-definitions (a header file).  _--_TT option can
              be used in conjunction to produce a header file  which  supports
              RPC dispatch tables.

       _--_II     Generate  a service that can be started from inetd.  The default
              is to generate a static service that handles transports selected
              with _--_ss.  Using _--_II allows starting a service by either method.

       _--_KK _s_e_c_s
              By default, services created using _rr_pp_cc_gg_ee_nn wait _11_22_00 seconds after
              servicing a  request  before  exiting.   That  interval  can  be
              changed  using the _--_KK flag.  To create a server that exits imme-
              diately upon servicing a request, _--_KK _00 can be used.  To create a
              server that never exits, the appropriate argument is _--_KK _--_11.

              When  monitoring  for  a  server,  some  portmonitors, like _ll_ii_ss_--
              _tt_ee_nn(1M), _a_l_w_a_y_s spawn a new process in  response  to  a  service
              request.   If it is known that a server will be used with such a
              monitor, the server should exit immediately on completion.   For
              such servers, _rr_pp_cc_gg_ee_nn should be used with _--_KK _--_11.

       _--_ll     Compile into client-side stubs.

       _--_mm     Compile  into  server-side  stubs,  but do not generate a "main"
              routine.  This option is useful for doing callback-routines  and
              for  users who need to write their own "main" routine to do ini-
              tialization.

       _--_MM     Generate  multithread-safe  stubs  for  passing  arguments   and
              results  between  rpcgen-generated  code  and user written code.
              This option is useful for users who want to use threads in their
              code.

       _--_nn _n_e_t_i_d
              Compile  into  server-side  stubs for the transport specified by
              _n_e_t_i_d.  There should be an entry  for  _n_e_t_i_d  in  the  netconfig
              database.  This option may be specified more than once, so as to
              compile a server that serves multiple transports.

       _--_NN     Use the newstyle of rpcgen. This allows procedures to have  mul-
              tiple  arguments.   It  also uses the style of parameter passing
              that closely resembles C. So, when  passing  an  argument  to  a
              remote  procedure you do not have to pass a pointer to the argu-
              ment but the argument itself. This behaviour is  different  from
              the  oldstyle  of rpcgen generated code. The newstyle is not the
              default case because of backward compatibility.

       _--_oo _o_u_t_f_i_l_e
              Specify the name of the output  file.   If  none  is  specified,
              standard  output is used (_--_cc, _--_hh, _--_ll, _--_mm, _--_nn, _--_ss, _--_SS_cc, _--_SS_mm, _--_SS_ss,
              and _--_tt modes only).

       _--_ss _n_e_t_t_y_p_e
              Compile into server-side stubs for all the transports  belonging
              to  the class _n_e_t_t_y_p_e.  The supported classes are _nn_ee_tt_pp_aa_tt_hh, _vv_ii_ss_ii_--
              _bb_ll_ee, _cc_ii_rr_cc_uu_ii_tt____nn, _cc_ii_rr_cc_uu_ii_tt____vv, _dd_aa_tt_aa_gg_rr_aa_mm____nn, _dd_aa_tt_aa_gg_rr_aa_mm____vv, _tt_cc_pp, and  _uu_dd_pp
              [see  _rr_pp_cc(3N)  for  the meanings associated with these classes].
              This option may be specified more than once.  Note:  the  trans-
              ports are chosen at run time and not at compile time.

       _--_SS_cc    Generate sample code to show the use of remote procedure and how
              to bind to the server before calling the client side stubs  gen-
              erated by rpcgen.

       _--_SS_mm    Generate  a  sample Makefile which can be used for compiling the
              application.

       _--_SS_ss    Generate skeleton code for the remote procedures on  the  server
              side.  You  would need to fill in the actual code for the remote
              procedures.

       _--_tt     Compile into RPC dispatch table.

       _--_TT     Generate the code to support RPC dispatch tables.

       The options _--_cc, _--_hh, _--_ll, _--_mm, _--_ss and _--_tt are used exclusively to  generate
       a  particular  type of file, while the options _--_DD and _--_TT are global and
       can be used with the other options.

NNOOTTEESS
       The RPC Language does not support nesting of structures.   As  a  work-
       around,  structures  can  be  declared at the top-level, and their name
       used inside other structures in order to achieve the same effect.

       Name clashes can occur when using program definitions, since the appar-
       ent  scoping  does  not  really apply.  Most of these can be avoided by
       giving unique names for programs, versions, procedures and types.

       The server code generated with _--_nn option refers to the transport  indi-
       cated by _n_e_t_i_d and hence is very site specific.

EEXXAAMMPPLLEE
       The following example:

              _$$ _rr_pp_cc_gg_ee_nn _--_TT _pp_rr_oo_tt_.._xx

       generates  the  five files: _pp_rr_oo_tt_.._hh, _pp_rr_oo_tt____cc_ll_nn_tt_.._cc, _pp_rr_oo_tt____ss_vv_cc_.._cc, _pp_rr_oo_tt____xx_dd_rr_.._cc
       and _pp_rr_oo_tt____tt_bb_ll_.._ii.

       The following example sends the C data-definitions (header file) to the
       standard output.

              _$$ _rr_pp_cc_gg_ee_nn _--_hh _pp_rr_oo_tt_.._xx

       To  send  the test version of the _--_DD_TT_EE_SS_TT, server side stubs for all the
       transport belonging to the class _dd_aa_tt_aa_gg_rr_aa_mm____nn to standard output, use:

              _$$ _rr_pp_cc_gg_ee_nn _--_ss _dd_aa_tt_aa_gg_rr_aa_mm____nn _--_DD_TT_EE_SS_TT _pp_rr_oo_tt_.._xx

       To create the server side stubs for the transport  indicated  by  _n_e_t_i_d
       _tt_cc_pp, use:

              _$$ _rr_pp_cc_gg_ee_nn _--_nn _tt_cc_pp _--_oo _pp_rr_oo_tt____ss_vv_cc_.._cc _pp_rr_oo_tt_.._xx

SSEEEE AALLSSOO
       _cc_cc(1).



                                                                            0a
